#define ARMA_DONT_PRINT_FAST_MATH_WARNING
#include <armadillo> // Include Armadillo linear algebra library
#include <cmath>
#include <iostream>
#include <string>
// g++ -I ~/mambaforge/include -L ~/mambaforge/lib multivariate.cpp -llapack -lblas -larmadillo

arma::mat generateMVN(const arma::vec& mu, const arma::mat& Sigma, int num_samples) {
    int num_vars = mu.n_elem; // Number of variables (Dimension of the Gaussian)
    arma::mat Y = arma::randn(num_samples, num_vars); // Independent standard normals
    arma::mat C; // Cholesky Decomposition
    arma::chol(C, Sigma); // Perform Cholesky Decomposition
    return arma::repmat(mu, 1, num_samples).t() + Y * C;
}

arma::mat generate_ksi(int Nb) {
  arma::vec mu = {0, 0}; // mean vector
  arma::mat Sigma = {{1, 0.}, {0., 1}}; // covariance matrix  
  arma::mat ksi = generateMVN(mu, Sigma, Nb);
  return ksi;
}

arma::mat get_mat_LR(arma::mat ksi, int rank, int Nb) {
  arma::mat sumOuterProds = arma::zeros<arma::mat>(Nb, Nb); // Initialize to zeros
  
  for (int i = 0; i < rank; ++i)
    sumOuterProds += ksi.col(i) * ksi.col(i).t(); // Accumulate the outer products  
  
  return sumOuterProds;
}
