(undo-tree-save-format-version . 1)
"ea18417be089c3ce5ede19830cb2ac5f2c7b9386"
[nil nil nil nil (25787 60813 672349 452000) 0 nil]
([nil nil ((20 . 21) (nil rear-nonsticky nil 228 . 229) (nil fontified nil 1 . 229) (1 . 229) (t . -1)) nil (25787 60813 672344 686000) 0 nil])
([nil nil ((219 . 220) (101 . 186) (#("    proc = subprocess.run('./my_cpp_executable', shell=True, stdout=subprocess.PIPE)
" 0 4 (fontified t) 4 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t) 9 10 (fontified t face tree-sitter-hl-face:operator) 10 22 (fontified t) 22 25 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 25 26 (fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (fontified t face tree-sitter-hl-face:string) 27 46 (fontified t face tree-sitter-hl-face:string) 46 47 (fontified t face tree-sitter-hl-face:string) 47 49 (fontified t) 49 54 (fontified t face tree-sitter-hl-face:label) 54 55 (fontified t face tree-sitter-hl-face:operator) 55 59 (fontified t face tree-sitter-hl-face:constant\.builtin) 59 61 (fontified t) 61 67 (fontified t face tree-sitter-hl-face:label) 67 68 (fontified t face tree-sitter-hl-face:operator) 68 79 (fontified t) 79 83 (fontified t face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor tree-sitter-hl-face:property)) 83 84 (fontified t face (rainbow-delimiters-depth-1-face)) 84 85 (fontified t)) . -101) (undo-tree-id0 . -85) 1 (t 25787 60813 669875 670000)) nil (25787 60814 58203 687000) 0 nil])
([nil nil ((nil rear-nonsticky nil 166 . 167) (nil fontified nil 127 . 167) (127 . 167) (t 25787 60814 53872 447000)) nil (25787 60844 984701 879000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t ws-butler-chg delete face tree-sitter-hl-face:string)) . 167) (#("e" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("l" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("b" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("a" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("t" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("u" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("c" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("e" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("x" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("e" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("_" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("p" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("p" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("c" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("_" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("y" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("m" 0 1 (fontified t ws-butler-chg delete)) . 167) (#("/" 0 1 (fontified t ws-butler-chg delete face tree-sitter-hl-face:operator)) . 167) (#("." 0 1 (fontified t ws-butler-chg delete)) . 167) (#("\"" 0 1 (fontified t face tree-sitter-hl-face:string)) . 167) (t 25787 60844 985614 20000)) nil (25787 60851 916218 580000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -158) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (#(" " 0 1 (fontified t)) . -159) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (#("'" 0 1 (fontified t face tree-sitter-hl-face:string)) . -160) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (#("a" 0 1 (fontified t)) . -161) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#("r" 0 1 (fontified t)) . -162) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("g" 0 1 (fontified t)) . -163) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("2" 0 1 (fontified t)) . -164) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("'" 0 1 (fontified t face tree-sitter-hl-face:string)) . -165) (undo-tree-id33 . -1) 166 (t 25787 60851 917556 462000)) nil (25787 60867 565569 414000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face tree-sitter-hl-face:string)) . -153) (undo-tree-id1 . -1) (#("r" 0 1 (fontified t face tree-sitter-hl-face:string)) . -154) (undo-tree-id2 . -1) (#("g" 0 1 (fontified t face tree-sitter-hl-face:string)) . -155) (undo-tree-id3 . -1) (#("1" 0 1 (fontified t face tree-sitter-hl-face:string)) . -156) (undo-tree-id4 . -1) 157) nil (25787 60867 565544 65000) 0 nil])
([nil nil ((172 . 172) (172 . 173) (171 . 171) (171 . 172) (170 . 170) (170 . 171) (169 . 169) (169 . 170) (168 . 168) (168 . 169) (167 . 167) (167 . 168) (166 . 166) (166 . 167) (165 . 165) (165 . 166) (164 . 164) (164 . 165) (163 . 163) (163 . 164) (161 . 161) (161 . 163) (159 . 159) (159 . 161) (158 . 158) (158 . 159) (156 . 156) (156 . 158) (154 . 154) (154 . 156) (153 . 153) (153 . 154)) nil (25787 60867 565526 738000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -127) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) 128 (t 25787 60867 565426 993000)) nil (25787 60871 474901 651000) 0 nil])
([nil nil ((101 . 243) (#("    proc = subprocess.run(['./my_cpp_executable', './conf/config_EI.yml'], shell=True, stdout=subprocess.PIPE)
" 0 4 (fontified t) 4 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t) 9 10 (fontified t face tree-sitter-hl-face:operator) 10 22 (fontified t) 22 25 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 25 26 (fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (fontified t face (rainbow-delimiters-depth-2-face)) 27 28 (fontified t face tree-sitter-hl-face:string) 28 47 (fontified t face tree-sitter-hl-face:string) 47 48 (fontified t face tree-sitter-hl-face:string) 48 50 (fontified t) 50 51 (fontified t face tree-sitter-hl-face:string) 51 71 (fontified t face tree-sitter-hl-face:string) 71 72 (fontified t face tree-sitter-hl-face:string) 72 73 (fontified t rear-nonsticky t face (rainbow-delimiters-depth-2-face)) 73 74 (fontified t) 74 75 (fontified t) 75 80 (fontified t face tree-sitter-hl-face:label) 80 81 (fontified t face tree-sitter-hl-face:operator) 81 85 (fontified t face tree-sitter-hl-face:constant\.builtin) 85 87 (fontified t) 87 93 (fontified t face tree-sitter-hl-face:label) 93 94 (fontified t face tree-sitter-hl-face:operator) 94 105 (fontified t) 105 109 (fontified t face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor tree-sitter-hl-face:property)) 109 110 (fontified t face (rainbow-delimiters-depth-1-face)) 110 111 (fontified t)) . -101) (undo-tree-id68 . -110) (undo-tree-id69 . -26) (undo-tree-id70 . -75) (undo-tree-id71 . -76) (undo-tree-id72 . -26) (undo-tree-id73 . -26) (undo-tree-id74 . -13) (undo-tree-id75 . -110) (undo-tree-id76 . -73) (undo-tree-id77 . -110) (undo-tree-id78 . -110) (undo-tree-id79 . -110) (undo-tree-id80 . -110) (undo-tree-id81 . -110) (undo-tree-id82 . -110) (undo-tree-id83 . -99) (undo-tree-id84 . -99) (undo-tree-id85 . -99) (undo-tree-id86 . -99) (undo-tree-id87 . -110) (undo-tree-id88 . -72) (undo-tree-id89 . -72) (undo-tree-id90 . -54) (undo-tree-id91 . -53) (undo-tree-id92 . -110) (undo-tree-id93 . -71) (undo-tree-id94 . -75) (undo-tree-id95 . -80) (undo-tree-id96 . 2) (undo-tree-id97 . -110) (undo-tree-id98 . 86) (undo-tree-id99 . -26) (undo-tree-id100 . -110) (undo-tree-id101 . -110) (undo-tree-id102 . -26) (undo-tree-id103 . -27) (undo-tree-id104 . -25) (undo-tree-id105 . -26) (undo-tree-id106 . -4) (undo-tree-id107 . -8) (undo-tree-id108 . -75) (undo-tree-id109 . -80) (undo-tree-id110 . -111) (undo-tree-id111 . -110) 211 (t 25787 60871 473394 759000)) nil (25787 60871 966367 725000) 0 nil])
([nil nil ((#("my" 0 2 (fontified t face tree-sitter-hl-face:string)) . 140) (t 25787 60871 965390 703000)) nil (25787 60889 563088 728000) 0 nil])
([nil nil ((#("_cpp" 0 1 (fontified t ws-butler-chg delete face tree-sitter-hl-face:string) 1 4 (fontified t face tree-sitter-hl-face:string)) . 140)) nil (25787 60889 563087 227000) 0 nil])
([nil nil ((#("_executable" 0 1 (fontified t ws-butler-chg delete face tree-sitter-hl-face:string) 1 11 (fontified t face tree-sitter-hl-face:string)) . 140)) nil (25787 60889 563084 181000) 0 nil])
([nil nil ((141 . 141) (141 . 143) (140 . 140) (140 . 141)) nil (25787 60889 563082 6000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t ws-butler-chg chg face tree-sitter-hl-face:string)) . -140) (undo-tree-id117 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg face tree-sitter-hl-face:string)) . -141) (undo-tree-id118 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg face tree-sitter-hl-face:string)) . -142) (undo-tree-id119 . -1) 143) nil (25787 60889 563078 685000) 0 nil])
([nil nil ((145 . 145) (145 . 146) (143 . 143) (143 . 145) (142 . 142) (142 . 143) (140 . 140) (140 . 142)) nil (25787 60889 563072 821000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t ws-butler-chg chg face tree-sitter-hl-face:string)) . -144) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg face tree-sitter-hl-face:string)) . -145) (undo-tree-id116 . -1) 146) nil (25787 60889 563064 632000) 0 nil])
([nil nil ((149 . 149) (149 . 150) (148 . 148) (148 . 149) (147 . 147) (147 . 148) (146 . 146) (146 . 147) (145 . 145) (145 . 146) (144 . 144) (144 . 145)) nil (25787 60889 563027 699000) 0 nil])
([nil nil ((#("        shell=True,
" 0 8 (fontified t) 8 13 (fontified t face tree-sitter-hl-face:label) 13 14 (fontified t face tree-sitter-hl-face:operator) 14 18 (fontified t face tree-sitter-hl-face:constant\.builtin) 18 20 (fontified t)) . -178) (undo-tree-id120 . -20) (undo-tree-id121 . -20) (undo-tree-id122 . -20) (undo-tree-id123 . -20) (undo-tree-id124 . -20) (undo-tree-id125 . -20) (undo-tree-id126 . -20) (undo-tree-id127 . -20) (undo-tree-id128 . -20) (undo-tree-id129 . -20) (undo-tree-id130 . -20) (undo-tree-id131 . -20) (undo-tree-id132 . -20) (undo-tree-id133 . -20) (undo-tree-id134 . -20) (undo-tree-id135 . -20) (undo-tree-id136 . -20) (undo-tree-id137 . -20) (undo-tree-id138 . -20) (undo-tree-id139 . -20) (undo-tree-id140 . -20) 198 (t 25787 60889 561246 59000)) nil (25787 60918 477657 22000) 0 nil])
([nil nil ((nil rear-nonsticky nil 555 . 556) (nil fontified nil 250 . 556) (250 . 556) (t 25787 60918 477010 2000)) nil (25787 60997 494764 848000) 0 nil])
([nil nil ((#("    proc = subprocess.run(
        [\"./bin/LifNet\", \"./conf/config_EI.yml\"],
        stdout=subprocess.PIPE,
    )
" 0 4 (fontified t) 4 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t) 9 10 (fontified t face tree-sitter-hl-face:operator) 10 22 (fontified t) 22 25 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 25 26 (fontified t face (rainbow-delimiters-depth-1-face)) 26 27 (fontified t) 27 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 37 (fontified t face tree-sitter-hl-face:string) 37 39 (fontified t face tree-sitter-hl-face:string) 39 49 (fontified t face tree-sitter-hl-face:string) 49 50 (fontified t face tree-sitter-hl-face:string) 50 52 (fontified t) 52 53 (fontified t face tree-sitter-hl-face:string) 53 73 (fontified t face tree-sitter-hl-face:string) 73 74 (fontified t face tree-sitter-hl-face:string) 74 75 (fontified t face (rainbow-delimiters-depth-2-face)) 75 77 (fontified t) 77 78 (fontified t) 78 85 (fontified t) 85 91 (fontified t face tree-sitter-hl-face:label) 91 92 (fontified t face tree-sitter-hl-face:operator) 92 103 (fontified t) 103 107 (fontified t face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor tree-sitter-hl-face:property)) 107 109 (fontified t) 109 113 (fontified t) 113 114 (fontified t face (rainbow-delimiters-depth-1-face)) 114 115 (fontified t)) . 101) (undo-tree-id171 . -115) (undo-tree-id172 . -43) (undo-tree-id173 . -42) (undo-tree-id174 . -77) (undo-tree-id175 . -43) (undo-tree-id176 . -43) (undo-tree-id177 . -114) (undo-tree-id178 . -77) (undo-tree-id179 . -27) (undo-tree-id180 . -115) 216) nil (25787 60997 494762 602000) 0 nil])
([nil nil ((nil rear-nonsticky nil 264 . 265) (nil fontified nil 264 . 265) (nil fontified nil 263 . 264) (nil fontified nil 259 . 263) (nil fontified nil 257 . 259) (nil fontified nil 253 . 257) (nil fontified nil 242 . 253) (nil fontified nil 241 . 242) (nil fontified nil 235 . 241) (nil fontified nil 228 . 235) (nil fontified nil 227 . 228) (nil fontified nil 225 . 227) (nil fontified nil 224 . 225) (nil fontified nil 223 . 224) (nil fontified nil 203 . 223) (nil fontified nil 202 . 203) (nil fontified nil 200 . 202) (nil fontified nil 199 . 200) (nil fontified nil 189 . 199) (nil fontified nil 187 . 189) (nil fontified nil 186 . 187) (nil fontified nil 185 . 186) (nil fontified nil 177 . 185) (nil fontified nil 176 . 177) (nil fontified nil 175 . 176) (nil fontified nil 172 . 175) (nil fontified nil 160 . 172) (nil fontified nil 159 . 160) (nil fontified nil 158 . 159) (nil fontified nil 154 . 158) (nil fontified nil 150 . 154) (150 . 265)) nil (25787 60997 494752 108000) 0 nil])
([nil nil ((#("    proc = subprocess.Popen('./my_cpp_executable', shell=True, stdout=subprocess.PIPE)
" 0 4 (ws-butler-chg chg fontified t) 4 8 (ws-butler-chg chg fontified t face tree-sitter-hl-face:variable) 8 9 (ws-butler-chg chg fontified t) 9 10 (ws-butler-chg chg fontified t face tree-sitter-hl-face:operator) 10 22 (ws-butler-chg chg fontified t) 22 27 (ws-butler-chg chg fontified t face (tree-sitter-hl-face:constructor tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 27 28 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-1-face)) 28 29 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string) 29 48 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string) 48 49 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string) 49 51 (ws-butler-chg chg fontified t) 51 56 (ws-butler-chg chg fontified t face tree-sitter-hl-face:label) 56 57 (ws-butler-chg chg fontified t face tree-sitter-hl-face:operator) 57 61 (ws-butler-chg chg fontified t face tree-sitter-hl-face:constant\.builtin) 61 63 (ws-butler-chg chg fontified t) 63 69 (ws-butler-chg chg fontified t face tree-sitter-hl-face:label) 69 70 (ws-butler-chg chg fontified t face tree-sitter-hl-face:operator) 70 81 (ws-butler-chg chg fontified t) 81 85 (ws-butler-chg chg fontified t face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor tree-sitter-hl-face:property)) 85 86 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-1-face)) 86 87 (ws-butler-chg chg fontified t)) . -265) (undo-tree-id141 . -87) (undo-tree-id142 . -70) (undo-tree-id143 . -80) (undo-tree-id144 . -87) (undo-tree-id145 . -87) (undo-tree-id146 . -87) (undo-tree-id147 . -87) (undo-tree-id148 . -87) (undo-tree-id149 . -87) (undo-tree-id150 . -87) (undo-tree-id151 . -87) (undo-tree-id152 . -87) (undo-tree-id153 . -87) (undo-tree-id154 . -87) (undo-tree-id155 . -87) (undo-tree-id156 . -87) (undo-tree-id157 . -87) (undo-tree-id158 . -87) (undo-tree-id159 . -87) (undo-tree-id160 . -87) (undo-tree-id161 . -87) (undo-tree-id162 . -87) (undo-tree-id163 . -87) (undo-tree-id164 . -87) (undo-tree-id165 . -87) (undo-tree-id166 . -87) (undo-tree-id167 . -87) (undo-tree-id168 . -87) (undo-tree-id169 . -87) (undo-tree-id170 . -87) 352) nil (25787 60997 494740 799000) 0 nil])
([nil nil ((459 . 460) (135 . 136) 265 (t 25787 60997 492374 531000)) nil (25787 60997 880167 351000) 0 nil])
([nil nil ((apply -6 21 141 undo--wrap-and-run-primitive-undo 21 141 ((106 . 108) (38 . 40) (21 . 23) 134)) (t 25787 60997 880371 442000)) nil (25787 61002 199449 864000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 20) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) 140) nil (25787 61002 199442 966000) 0 nil])
([nil nil ((#("
run_cpp()
" 0 1 (fontified t) 1 8 (fontified t face tree-sitter-hl-face:function\.call) 8 9 (fontified t face (rainbow-delimiters-depth-1-face)) 9 10 (fontified t face (rainbow-delimiters-depth-1-face)) 10 11 (rear-nonsticky t fontified t)) . 476) (undo-tree-id236 . -11) (undo-tree-id237 . -11) (undo-tree-id238 . -11) (undo-tree-id239 . -11) (undo-tree-id240 . -11) (undo-tree-id241 . -11) (undo-tree-id242 . -11) (undo-tree-id243 . -11) (undo-tree-id244 . -11) (undo-tree-id245 . -11) (undo-tree-id246 . -11) (undo-tree-id247 . -11) (undo-tree-id248 . -11) (undo-tree-id249 . -11) (undo-tree-id250 . -11) (undo-tree-id251 . -11) (undo-tree-id252 . -11) (undo-tree-id253 . -11) (undo-tree-id254 . -11) (undo-tree-id255 . -11) (undo-tree-id256 . -11) (undo-tree-id257 . -11) (undo-tree-id258 . -11) (undo-tree-id259 . -11) (undo-tree-id260 . -11) (undo-tree-id261 . -11) (undo-tree-id262 . -11) (undo-tree-id263 . -11) (undo-tree-id264 . -11) (undo-tree-id265 . -11) (undo-tree-id266 . -11) (undo-tree-id267 . -11) (undo-tree-id268 . -11) (undo-tree-id269 . -11) (undo-tree-id270 . -11) (undo-tree-id271 . -11) (undo-tree-id272 . -11) (undo-tree-id273 . -11) (undo-tree-id274 . -1) (undo-tree-id275 . -11) (undo-tree-id276 . -11) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (t 25787 61002 196337 111000)) nil (25787 61005 545487 532000) 0 nil])
([nil nil ((232 . 241) (t 25787 61005 544310 503000)) nil (25787 61025 974076 486000) 0 nil])
([nil nil ((nil rear-nonsticky nil 233 . 234) (nil fontified nil 233 . 234) (233 . 234)) nil (25787 61025 974074 691000) 0 nil])
([nil nil ((#("        " 0 1 (fontified t ws-butler-chg delete) 1 8 (fontified t ws-butler-chg chg)) . 233) (undo-tree-id301 . 8) (undo-tree-id302 . -1) (#("
" 0 1 (ws-butler-chg chg fontified t rear-nonsticky t)) . -233) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) 234) nil (25787 61025 974068 370000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -233) (undo-tree-id320 . 1) 234 (t 25787 61025 972148 630000)) nil (25787 61026 358104 521000) 0 nil])
([nil nil ((241 . 242) (t 25787 61026 356145 595000)) nil (25787 61042 572815 672000) 0 nil])
([nil nil ((242 . 251)) nil (25787 61042 572814 731000) 0 nil])
([nil nil ((249 . 250) (244 . 244) (244 . 249) (243 . 243) (243 . 244) (242 . 242) (242 . 243)) nil (25787 61042 572813 463000) 0 nil])
([nil nil ((250 . 250) (250 . 251)) nil (25787 61042 572811 500000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t ws-butler-chg chg face tree-sitter-hl-face:constructor)) . -249) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg face tree-sitter-hl-face:constructor)) . -250) (undo-tree-id328 . -1) (undo-tree-id329 . -1) 251) nil (25787 61042 572809 944000) 0 nil])
([nil nil ((249 . 250)) nil (25787 61042 572805 246000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t ws-butler-chg chg face tree-sitter-hl-face:constructor)) . -249) (undo-tree-id324 . -1) (undo-tree-id325 . -1) 250) nil (25787 61042 572803 856000) 0 nil])
([nil nil ((249 . 253)) nil (25787 61042 572799 722000) 0 nil])
([nil nil ((#("," 0 1 (fontified t ws-butler-chg chg)) . -241) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) 242) nil (25787 61042 572795 214000) 0 nil])
([nil nil ((291 . 296) (t 25787 61042 572017 668000)) nil (25787 61095 343696 88000) 0 nil])
([nil nil ((nil rear-nonsticky nil 499 . 500) (nil fontified nil 292 . 500) (292 . 500)) nil (25787 61095 343694 836000) 0 nil])
([nil nil ((#("    
    while True:
        output = proc.stdout.readline()
        if proc.poll() is not null:  # The process has finished.
            break
        if output:
            print(output.strip())
" 0 4 (fontified t ws-butler-chg chg) 4 5 (fontified t) 5 9 (fontified t) 9 14 (fontified t face tree-sitter-hl-face:keyword) 14 15 (fontified t) 15 19 (fontified t face tree-sitter-hl-face:constant\.builtin) 19 29 (fontified t) 29 35 (fontified t face tree-sitter-hl-face:variable) 35 36 (fontified t) 36 37 (fontified t face tree-sitter-hl-face:operator) 37 43 (fontified t) 43 49 (fontified t face tree-sitter-hl-face:property) 49 50 (fontified t) 50 58 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 58 59 (fontified t face (rainbow-delimiters-depth-1-face)) 59 60 (fontified t face (rainbow-delimiters-depth-1-face)) 60 69 (fontified t) 69 71 (fontified t face tree-sitter-hl-face:keyword) 71 77 (fontified t) 77 81 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 81 82 (fontified t face (rainbow-delimiters-depth-1-face)) 82 83 (fontified t face (rainbow-delimiters-depth-1-face)) 83 84 (fontified t) 84 86 (fontified t face tree-sitter-hl-face:operator) 86 87 (fontified t) 87 90 (fontified t face tree-sitter-hl-face:operator) 90 98 (fontified t) 98 125 (fontified t face tree-sitter-hl-face:comment) 125 138 (fontified t) 138 143 (fontified t face tree-sitter-hl-face:keyword) 143 152 (fontified t) 152 154 (fontified t face tree-sitter-hl-face:keyword) 154 175 (fontified t) 175 180 (fontified t face (tree-sitter-hl-face:function\.builtin tree-sitter-hl-face:function\.call)) 180 181 (fontified t face (rainbow-delimiters-depth-1-face)) 181 188 (fontified t) 188 193 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 193 194 (fontified t face (rainbow-delimiters-depth-2-face)) 194 195 (fontified t face (rainbow-delimiters-depth-2-face)) 195 196 (fontified t face (rainbow-delimiters-depth-1-face)) 196 197 (fontified t)) . -500) (undo-tree-id344 . -197) (undo-tree-id345 . -197) 697) nil (25787 61095 343692 901000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg chg fontified t rear-nonsticky t)) . -499) (undo-tree-id342 . -1) (undo-tree-id343 . -1) 500) nil (25787 61095 343688 640000) 0 nil])
([nil nil ((#("        shell=True,
" 0 1 (fontified t) 1 8 (fontified t) 8 9 (fontified t face tree-sitter-hl-face:label) 9 13 (fontified t face tree-sitter-hl-face:label) 13 14 (fontified t face tree-sitter-hl-face:operator) 14 18 (fontified t face tree-sitter-hl-face:constant\.builtin) 18 19 (fontified t) 19 20 (fontified t)) . -233) (undo-tree-id330 . -20) (undo-tree-id331 . -8) (undo-tree-id332 . -8) (undo-tree-id333 . -8) (undo-tree-id334 . -8) (undo-tree-id335 . -10) (undo-tree-id336 . -19) (undo-tree-id337 . -18) (undo-tree-id338 . -8) (undo-tree-id339 . -8) (undo-tree-id340 . -19) (undo-tree-id341 . -20) 253) nil (25787 61095 343681 629000) 0 nil])
([nil nil ((430 . 481) (#("            print(output.strip().decode('utf-8'))
" 0 12 (fontified t) 12 17 (fontified t face (tree-sitter-hl-face:function\.builtin tree-sitter-hl-face:function\.call)) 17 18 (fontified t face (rainbow-delimiters-depth-1-face)) 18 25 (fontified t) 25 30 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 30 31 (fontified t face (rainbow-delimiters-depth-2-face)) 31 32 (fontified t face (rainbow-delimiters-depth-2-face)) 32 33 (fontified t) 33 39 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 39 40 (fontified t face (rainbow-delimiters-depth-2-face)) 40 41 (fontified t face tree-sitter-hl-face:string) 41 46 (fontified t face tree-sitter-hl-face:string) 46 47 (fontified t face tree-sitter-hl-face:string) 47 48 (fontified t face (rainbow-delimiters-depth-2-face)) 48 49 (fontified t face (rainbow-delimiters-depth-1-face)) 49 50 (fontified t)) . -430) (undo-tree-id346 . -49) (undo-tree-id347 . -50) 241 (t 25787 61095 343604 593000)) nil (25787 61095 738609 959000) 0 nil])
([nil nil ((140 . 141) (t 25787 61095 735601 543000)) nil (25787 61178 651071 25000) 0 nil])
([nil nil ((nil rear-nonsticky nil 620 . 621) (nil fontified nil 141 . 621) (141 . 621)) nil (25787 61179 749175 550000) 0 nil])
([nil nil ((nil rear-nonsticky nil 233 . 234) (nil fontified nil 233 . 234) (nil fontified nil 232 . 233) (nil fontified nil 231 . 232) (nil fontified nil 230 . 231) (nil fontified nil 210 . 230) (nil fontified nil 209 . 210) (nil fontified nil 207 . 209) (nil fontified nil 206 . 207) (nil fontified nil 196 . 206) (nil fontified nil 194 . 196) (nil fontified nil 193 . 194) (nil fontified nil 192 . 193) (nil fontified nil 184 . 192) (184 . 234)) nil (25787 61202 1044 409000) 0 nil] [nil nil ((#("
def run_cpp():
    proc = subprocess.run(
        [\"./bin/LifNet\", \"./conf/config_EI.yml\"],
        stdout=subprocess.PIPE,
    )

    while True:
        output = proc.stdout.readline()
        if proc.poll() is not None:  # The process has finished.
            break
        if output:
            print(output.strip().decode(\"utf-8\"))


" 0 1 (fontified t) 1 4 (fontified t face tree-sitter-hl-face:keyword) 4 5 (fontified t) 5 12 (fontified t face tree-sitter-hl-face:function) 12 13 (fontified t face (rainbow-delimiters-depth-1-face)) 13 14 (fontified t face (rainbow-delimiters-depth-1-face)) 14 16 (fontified t) 16 20 (fontified t) 20 24 (fontified t face tree-sitter-hl-face:variable) 24 25 (fontified t) 25 26 (fontified t face tree-sitter-hl-face:operator) 26 38 (fontified t) 38 41 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 41 42 (fontified t face (rainbow-delimiters-depth-1-face)) 42 43 (fontified t) 43 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-2-face)) 52 53 (fontified t face tree-sitter-hl-face:string) 53 55 (fontified t face tree-sitter-hl-face:string) 55 65 (fontified t face tree-sitter-hl-face:string) 65 66 (fontified t face tree-sitter-hl-face:string) 66 68 (fontified t) 68 69 (fontified t face tree-sitter-hl-face:string) 69 89 (fontified t face tree-sitter-hl-face:string) 89 90 (fontified t face tree-sitter-hl-face:string) 90 91 (fontified t face (rainbow-delimiters-depth-2-face)) 91 92 (fontified t) 92 93 (fontified t) 93 94 (fontified t) 94 101 (fontified t) 101 107 (fontified t face tree-sitter-hl-face:label) 107 108 (fontified t face tree-sitter-hl-face:operator) 108 119 (fontified t) 119 123 (fontified t face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor tree-sitter-hl-face:property)) 123 125 (fontified t) 125 129 (fontified t) 129 130 (fontified t face (rainbow-delimiters-depth-1-face)) 130 131 (rear-nonsticky t fontified t) 131 132 (fontified t) 132 136 (fontified t) 136 141 (fontified t face tree-sitter-hl-face:keyword) 141 142 (fontified t) 142 146 (fontified t face tree-sitter-hl-face:constant\.builtin) 146 156 (fontified t) 156 162 (fontified t face tree-sitter-hl-face:variable) 162 163 (fontified t) 163 164 (fontified t face tree-sitter-hl-face:operator) 164 170 (fontified t) 170 176 (fontified t face tree-sitter-hl-face:property) 176 177 (fontified t) 177 185 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 185 186 (fontified t face (rainbow-delimiters-depth-1-face)) 186 187 (fontified t face (rainbow-delimiters-depth-1-face)) 187 196 (fontified t) 196 198 (fontified t face tree-sitter-hl-face:keyword) 198 204 (fontified t) 204 208 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 208 209 (fontified t face (rainbow-delimiters-depth-1-face)) 209 210 (fontified t face (rainbow-delimiters-depth-1-face)) 210 211 (fontified t) 211 213 (fontified t face tree-sitter-hl-face:operator) 213 214 (fontified t) 214 217 (fontified t face tree-sitter-hl-face:operator) 217 218 (fontified t) 218 222 (fontified t face tree-sitter-hl-face:constant\.builtin) 222 225 (fontified t) 225 252 (fontified t face tree-sitter-hl-face:comment) 252 265 (fontified t) 265 270 (fontified t face tree-sitter-hl-face:keyword) 270 279 (fontified t) 279 281 (fontified t face tree-sitter-hl-face:keyword) 281 289 (fontified t) 289 290 (fontified t) 290 302 (fontified t) 302 307 (fontified t face (tree-sitter-hl-face:function\.builtin tree-sitter-hl-face:function\.call)) 307 308 (fontified t face (rainbow-delimiters-depth-1-face)) 308 315 (fontified t) 315 320 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 320 321 (fontified t face (rainbow-delimiters-depth-2-face)) 321 322 (fontified t face (rainbow-delimiters-depth-2-face)) 322 323 (fontified t) 323 329 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 329 330 (fontified t face (rainbow-delimiters-depth-2-face)) 330 331 (fontified t face tree-sitter-hl-face:string) 331 336 (fontified t face tree-sitter-hl-face:string) 336 337 (fontified t face tree-sitter-hl-face:string) 337 338 (fontified t face (rainbow-delimiters-depth-2-face)) 338 339 (fontified t face (rainbow-delimiters-depth-1-face)) 339 341 (fontified t) 341 342 (fontified t)) . -621) (undo-tree-id768 . -16) (undo-tree-id769 . -131) (undo-tree-id770 . -125) (undo-tree-id771 . -125) (undo-tree-id772 . -125) (undo-tree-id773 . -125) (undo-tree-id774 . -125) (undo-tree-id775 . -125) (undo-tree-id776 . -125) (undo-tree-id777 . -93) (undo-tree-id778 . -93) (undo-tree-id779 . -101) (undo-tree-id780 . -93) (undo-tree-id781 . -93) (undo-tree-id782 . -101) (undo-tree-id783 . -93) (undo-tree-id784 . -93) (undo-tree-id785 . -93) (undo-tree-id786 . -93) (undo-tree-id787 . -93) (undo-tree-id788 . -93) (undo-tree-id789 . -93) (undo-tree-id790 . -112) (undo-tree-id791 . -93) (undo-tree-id792 . -112) (undo-tree-id793 . -112) (undo-tree-id794 . -112) (undo-tree-id795 . -112) (undo-tree-id796 . -112) (undo-tree-id797 . -112) (undo-tree-id798 . -93) (undo-tree-id799 . -132) (undo-tree-id800 . -132) (undo-tree-id801 . -290) (undo-tree-id802 . -101) (undo-tree-id803 . -112) (undo-tree-id804 . -101) (undo-tree-id805 . -93) (undo-tree-id806 . -101) (undo-tree-id807 . -101) (undo-tree-id808 . -101) (undo-tree-id809 . -101) (undo-tree-id810 . -101) (undo-tree-id811 . -101) (undo-tree-id812 . -101) (undo-tree-id813 . -342) (undo-tree-id814 . -101) (undo-tree-id815 . -101) (undo-tree-id816 . -101) (undo-tree-id817 . -342) 963) ((nil ws-butler-chg delete 963 . 964) (621 . 963)) (25787 61179 179294 561000) 0 nil])
([nil nil ((#("['./my_cpp_executable', 'arg1', 'arg2'], " 0 1 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-2-face)) 1 2 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string) 2 21 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string) 21 22 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string) 22 24 (ws-butler-chg chg fontified t) 24 25 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string) 25 29 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string) 29 30 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string) 30 32 (ws-butler-chg chg fontified t) 32 33 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string) 33 37 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string) 37 38 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string) 38 39 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-2-face)) 39 41 (ws-butler-chg chg fontified t)) . -234) (undo-tree-id946 . -41) (undo-tree-id947 . -1) (undo-tree-id948 . -41) 275) nil (25787 61202 1040 441000) 0 nil])
([nil nil ((#("run_cpp()
" 0 1 (fontified t ws-butler-chg delete face tree-sitter-hl-face:function\.call) 1 7 (fontified t face tree-sitter-hl-face:function\.call) 7 8 (fontified t face (rainbow-delimiters-depth-1-face)) 8 9 (fontified t face (rainbow-delimiters-depth-1-face)) 9 10 (rear-nonsticky t fontified t)) . -621) (undo-tree-id764 . -10) (undo-tree-id765 . -10) (undo-tree-id766 . -10) (undo-tree-id767 . -10) 631) ((621 . 631)) (25787 61178 721280 820000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -191) (undo-tree-id945 . -1) 192) nil (25787 61202 1036 282000) 0 nil])
([nil nil ((#("# def run_cpp():
#     # replace './my_cpp_executable' with your actual executable.

#     print(proc.stdout.decode())
" 0 1 (fontified t face tree-sitter-hl-face:comment) 1 2 (fontified t face tree-sitter-hl-face:comment) 2 5 (fontified t face tree-sitter-hl-face:comment) 5 6 (fontified t face tree-sitter-hl-face:comment) 6 13 (fontified t face tree-sitter-hl-face:comment) 13 14 (fontified t face tree-sitter-hl-face:comment) 14 15 (fontified t face tree-sitter-hl-face:comment) 15 16 (fontified t face tree-sitter-hl-face:comment) 16 17 (fontified t) 17 19 (fontified t face tree-sitter-hl-face:comment) 19 23 (fontified t face tree-sitter-hl-face:comment) 23 83 (fontified t face tree-sitter-hl-face:comment) 83 84 (fontified t) 84 85 (fontified t) 85 87 (fontified t face tree-sitter-hl-face:comment) 87 91 (fontified t face tree-sitter-hl-face:comment) 91 96 (fontified t face tree-sitter-hl-face:comment) 96 97 (fontified t face tree-sitter-hl-face:comment) 97 102 (fontified t face tree-sitter-hl-face:comment) 102 108 (fontified t face tree-sitter-hl-face:comment) 108 109 (fontified t face tree-sitter-hl-face:comment) 109 115 (fontified t face tree-sitter-hl-face:comment) 115 116 (fontified t face tree-sitter-hl-face:comment) 116 117 (fontified t face tree-sitter-hl-face:comment) 117 118 (fontified t face tree-sitter-hl-face:comment) 118 119 (fontified t)) . -20) (undo-tree-id639 . -84) (undo-tree-id640 . -84) (undo-tree-id641 . -84) (undo-tree-id642 . -84) (undo-tree-id643 . -84) (undo-tree-id644 . -84) (undo-tree-id645 . -84) (undo-tree-id646 . -84) (undo-tree-id647 . -84) (undo-tree-id648 . -84) (undo-tree-id649 . -84) (undo-tree-id650 . -84) (undo-tree-id651 . -84) (undo-tree-id652 . -84) (undo-tree-id653 . -84) (undo-tree-id654 . -84) (undo-tree-id655 . -84) (undo-tree-id656 . -84) (undo-tree-id657 . -84) (undo-tree-id658 . -84) (undo-tree-id659 . -84) (undo-tree-id660 . -84) (undo-tree-id661 . -84) (undo-tree-id662 . -84) (undo-tree-id663 . -84) (undo-tree-id664 . -84) (undo-tree-id665 . -119) (undo-tree-id666 . -119) (undo-tree-id667 . -119) (undo-tree-id668 . -17) (undo-tree-id669 . -119) (undo-tree-id670 . -17) (undo-tree-id671 . -17) (undo-tree-id672 . -17) (undo-tree-id673 . -17) (undo-tree-id674 . -17) (undo-tree-id675 . -17) (undo-tree-id676 . -17) (undo-tree-id677 . -17) (undo-tree-id678 . -17) (undo-tree-id679 . -84) (undo-tree-id680 . -17) (undo-tree-id681 . -84) (undo-tree-id682 . -84) (undo-tree-id683 . -84) (undo-tree-id684 . -84) (undo-tree-id685 . -84) (undo-tree-id686 . -84) (undo-tree-id687 . -84) (undo-tree-id688 . -84) (undo-tree-id689 . -84) (undo-tree-id690 . -84) (undo-tree-id691 . -84) (undo-tree-id692 . -84) (undo-tree-id693 . -84) (undo-tree-id694 . -84) (undo-tree-id695 . -84) (undo-tree-id696 . -84) (undo-tree-id697 . -84) (undo-tree-id698 . -84) (undo-tree-id699 . -84) (undo-tree-id700 . -84) (undo-tree-id701 . -84) (undo-tree-id702 . -85) (undo-tree-id703 . -84) (undo-tree-id704 . -85) (undo-tree-id705 . -85) (undo-tree-id706 . -85) (undo-tree-id707 . -85) (undo-tree-id708 . -85) (undo-tree-id709 . -85) (undo-tree-id710 . -85) (undo-tree-id711 . -85) (undo-tree-id712 . -85) (undo-tree-id713 . -85) (undo-tree-id714 . -85) (undo-tree-id715 . -85) (undo-tree-id716 . -85) (undo-tree-id717 . -85) (undo-tree-id718 . -85) (undo-tree-id719 . -85) (undo-tree-id720 . -85) (undo-tree-id721 . -85) (undo-tree-id722 . -85) (undo-tree-id723 . -85) (undo-tree-id724 . -85) (undo-tree-id725 . -119) (undo-tree-id726 . -119) (undo-tree-id727 . -85) (undo-tree-id728 . -119) (undo-tree-id729 . -119) (undo-tree-id730 . -119) (undo-tree-id731 . -119) (undo-tree-id732 . -119) (undo-tree-id733 . -119) (undo-tree-id734 . -119) (undo-tree-id735 . -119) (undo-tree-id736 . -119) (undo-tree-id737 . -119) (undo-tree-id738 . -119) (undo-tree-id739 . -119) (undo-tree-id740 . -119) (undo-tree-id741 . -119) (undo-tree-id742 . -119) (undo-tree-id743 . -119) (undo-tree-id744 . -119) (undo-tree-id745 . -119) (undo-tree-id746 . -119) (undo-tree-id747 . -119) (undo-tree-id748 . -119) (undo-tree-id749 . -119) (undo-tree-id750 . -119) (undo-tree-id751 . -119) (undo-tree-id752 . -119) (undo-tree-id753 . -119) (undo-tree-id754 . -119) (undo-tree-id755 . -119) (undo-tree-id756 . -119) (undo-tree-id757 . -119) (undo-tree-id758 . -119) (undo-tree-id759 . -119) (undo-tree-id760 . -119) (undo-tree-id761 . -119) (undo-tree-id762 . -119) (undo-tree-id763 . -119) 139) ((nil ws-butler-chg delete 139 . 140) (20 . 139)) (25787 61178 651984 545000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t)) . -184) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -185) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -186) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -187) (undo-tree-id941 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -188) (undo-tree-id942 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -189) (undo-tree-id943 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -190) (undo-tree-id944 . -1) 191) nil (25787 61202 1027 172000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -19) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (#("
" 0 1 (fontified t ws-butler-chg delete)) . -20) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . 1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) 21) ((20 . 21) (nil ws-butler-chg delete 20 . 21) (19 . 20)) (25787 61178 650911 601000) 0 nil])
([nil nil ((#("        " 0 8 (ws-butler-chg chg fontified t)) . 400) (undo-tree-id818 . -1) (undo-tree-id819 . -1) 184) nil (25787 61202 922 295000) 0 nil])
nil
([nil nil ((646 . 647) (635 . 636) (489 . 550) (#("            print(\"ERROR: \" + error.strip().decode('utf-8'))
" 0 12 (fontified nil) 12 17 (fontified nil face (tree-sitter-hl-face:function\.builtin tree-sitter-hl-face:function\.call)) 17 18 (fontified nil face (rainbow-delimiters-depth-1-face)) 18 19 (fontified nil face tree-sitter-hl-face:string) 19 26 (fontified nil face tree-sitter-hl-face:string) 26 27 (fontified nil face tree-sitter-hl-face:string) 27 28 (fontified nil) 28 29 (fontified nil face tree-sitter-hl-face:operator) 29 36 (fontified nil) 36 41 (fontified nil face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 41 42 (fontified nil face (rainbow-delimiters-depth-2-face)) 42 43 (fontified nil face (rainbow-delimiters-depth-2-face)) 43 44 (fontified nil) 44 50 (fontified nil face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 50 51 (fontified nil face (rainbow-delimiters-depth-2-face)) 51 52 (fontified nil face tree-sitter-hl-face:string) 52 57 (fontified nil face tree-sitter-hl-face:string) 57 58 (fontified nil face tree-sitter-hl-face:string) 58 59 (fontified nil face (rainbow-delimiters-depth-2-face)) 59 60 (fontified nil face (rainbow-delimiters-depth-1-face)) 60 61 (fontified nil)) . -489) (undo-tree-id949 . -61) (381 . 431) (#("            print(output.strip().decode('utf-8'))
" 0 12 (fontified nil) 12 17 (fontified nil face (tree-sitter-hl-face:function\.builtin tree-sitter-hl-face:function\.call)) 17 18 (fontified nil face (rainbow-delimiters-depth-1-face)) 18 25 (fontified nil) 25 30 (fontified nil face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 30 31 (fontified nil face (rainbow-delimiters-depth-2-face)) 31 32 (fontified nil face (rainbow-delimiters-depth-2-face)) 32 33 (fontified nil) 33 39 (fontified nil face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 39 40 (fontified nil face (rainbow-delimiters-depth-2-face)) 40 41 (fontified nil face tree-sitter-hl-face:string) 41 46 (fontified nil face tree-sitter-hl-face:string) 46 47 (fontified nil face tree-sitter-hl-face:string) 47 48 (fontified nil face (rainbow-delimiters-depth-2-face)) 48 49 (fontified nil face (rainbow-delimiters-depth-1-face)) 49 50 (fontified nil)) . -381) (undo-tree-id950 . -50) (undo-tree-id951 . -50) (undo-tree-id952 . -50) (undo-tree-id953 . -50) (undo-tree-id954 . -50) (undo-tree-id955 . -50) (156 . 305) (#("    proc = subprocess.Popen([\"./bin/LifNet\", \"./conf/config_EI.yml\"],
stdout=subprocess.PIPE, stderr=subprocess.PIPE)
" 0 4 (fontified t) 4 8 (fontified t face tree-sitter-hl-face:variable) 8 9 (fontified t) 9 10 (fontified t face tree-sitter-hl-face:operator) 10 22 (fontified t) 22 27 (fontified t face (tree-sitter-hl-face:constructor tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 27 28 (fontified t face (rainbow-delimiters-depth-1-face)) 28 29 (fontified t face (rainbow-delimiters-depth-2-face)) 29 30 (fontified t face tree-sitter-hl-face:string) 30 32 (fontified t face tree-sitter-hl-face:string) 32 42 (fontified t face tree-sitter-hl-face:string) 42 43 (fontified t face tree-sitter-hl-face:string) 43 45 (fontified t) 45 46 (fontified t face tree-sitter-hl-face:string) 46 66 (fontified t face tree-sitter-hl-face:string) 66 67 (fontified t face tree-sitter-hl-face:string) 67 68 (fontified t face (rainbow-delimiters-depth-2-face)) 68 69 (fontified t) 69 70 (fontified t rear-nonsticky t) 70 71 (fontified t face tree-sitter-hl-face:label) 71 76 (fontified t face tree-sitter-hl-face:label) 76 77 (fontified t face tree-sitter-hl-face:operator) 77 88 (fontified t) 88 92 (fontified t face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor tree-sitter-hl-face:property)) 92 94 (fontified t) 94 100 (fontified t face tree-sitter-hl-face:label) 100 101 (fontified t face tree-sitter-hl-face:operator) 101 112 (fontified t) 112 116 (fontified t face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor tree-sitter-hl-face:property)) 116 117 (fontified t face (rainbow-delimiters-depth-1-face)) 117 118 (fontified t)) . -156) (undo-tree-id956 . -70) (undo-tree-id957 . -28) (undo-tree-id958 . -28) (undo-tree-id959 . -70) (undo-tree-id960 . -70) (undo-tree-id961 . -28) (undo-tree-id962 . -70) (undo-tree-id963 . -28) (undo-tree-id964 . -28) (undo-tree-id965 . -28) (undo-tree-id966 . -70) (undo-tree-id967 . -76) (undo-tree-id968 . -11) (undo-tree-id969 . -21) (undo-tree-id970 . 90) (undo-tree-id971 . -29) (undo-tree-id972 . 51) (undo-tree-id973 . -68) (undo-tree-id974 . -28) (undo-tree-id975 . -28) (undo-tree-id976 . -70) (undo-tree-id977 . -76) (undo-tree-id978 . -118) (undo-tree-id979 . -28) 184 (t 25787 61201 998783 224000)) nil (25787 61202 535212 196000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -19) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (#("# def run_cpp():
#     # replace './my_cpp_executable' with your actual executable.

#     print(proc.stdout.decode())
" 0 1 (fontified t face tree-sitter-hl-face:comment) 1 2 (fontified t face tree-sitter-hl-face:comment) 2 5 (fontified t face tree-sitter-hl-face:comment) 5 6 (fontified t face tree-sitter-hl-face:comment) 6 13 (fontified t face tree-sitter-hl-face:comment) 13 14 (fontified t face tree-sitter-hl-face:comment) 14 15 (fontified t face tree-sitter-hl-face:comment) 15 16 (fontified t face tree-sitter-hl-face:comment) 16 17 (fontified t) 17 19 (fontified t face tree-sitter-hl-face:comment) 19 23 (fontified t face tree-sitter-hl-face:comment) 23 83 (fontified t face tree-sitter-hl-face:comment) 83 84 (fontified t) 84 85 (fontified t) 85 87 (fontified t face tree-sitter-hl-face:comment) 87 91 (fontified t face tree-sitter-hl-face:comment) 91 96 (fontified t face tree-sitter-hl-face:comment) 96 97 (fontified t face tree-sitter-hl-face:comment) 97 102 (fontified t face tree-sitter-hl-face:comment) 102 108 (fontified t face tree-sitter-hl-face:comment) 108 109 (fontified t face tree-sitter-hl-face:comment) 109 115 (fontified t face tree-sitter-hl-face:comment) 115 116 (fontified t face tree-sitter-hl-face:comment) 116 117 (fontified t face tree-sitter-hl-face:comment) 117 118 (fontified t face tree-sitter-hl-face:comment) 118 119 (fontified t)) . -20) (undo-tree-id1057 . -84) (undo-tree-id1058 . -84) (undo-tree-id1059 . -84) (undo-tree-id1060 . -84) (undo-tree-id1061 . -84) (undo-tree-id1062 . -84) (undo-tree-id1063 . -84) (undo-tree-id1064 . -84) (undo-tree-id1065 . -84) (undo-tree-id1066 . -84) (undo-tree-id1067 . -84) (undo-tree-id1068 . -84) (undo-tree-id1069 . -84) (undo-tree-id1070 . -84) (undo-tree-id1071 . -84) (undo-tree-id1072 . -84) (undo-tree-id1073 . -84) (undo-tree-id1074 . -84) (undo-tree-id1075 . -84) (undo-tree-id1076 . -84) (undo-tree-id1077 . -84) (undo-tree-id1078 . -84) (undo-tree-id1079 . -84) (undo-tree-id1080 . -84) (undo-tree-id1081 . -84) (undo-tree-id1082 . -84) (undo-tree-id1083 . -119) (undo-tree-id1084 . -119) (undo-tree-id1085 . -119) 139 (t 25787 61202 534779 137000)) nil (25787 61206 845473 791000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . -19) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . 1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) 20) nil (25787 61206 845364 910000) 0 nil])
([nil nil ((20 . 21) 19) nil (25787 61206 845317 227000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -525) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (#("
" 0 1 (fontified t)) . -526) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (#("
" 0 1 (fontified t)) . -527) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (#("def run_cpp():
    proc = subprocess.run(
        [\"./bin/LifNet\", \"./conf/config_EI.yml\"],
        stdout=subprocess.PIPE,
    )

    while True:
        output = proc.stdout.readline()
        if proc.poll() is not None:  # The process has finished.
            break
        if output:
            print(output.strip().decode(\"utf-8\"))

" 0 3 (fontified t face tree-sitter-hl-face:keyword) 3 4 (fontified t) 4 11 (fontified t face tree-sitter-hl-face:function) 11 12 (fontified t face (rainbow-delimiters-depth-1-face)) 12 13 (fontified t face (rainbow-delimiters-depth-1-face)) 13 15 (fontified t) 15 19 (fontified t) 19 23 (fontified t face tree-sitter-hl-face:variable) 23 24 (fontified t) 24 25 (fontified t face tree-sitter-hl-face:operator) 25 37 (fontified t) 37 40 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 40 41 (fontified t face (rainbow-delimiters-depth-1-face)) 41 42 (fontified t) 42 50 (fontified t) 50 51 (fontified t face (rainbow-delimiters-depth-2-face)) 51 52 (fontified t face tree-sitter-hl-face:string) 52 54 (fontified t face tree-sitter-hl-face:string) 54 64 (fontified t face tree-sitter-hl-face:string) 64 65 (fontified t face tree-sitter-hl-face:string) 65 67 (fontified t) 67 68 (fontified t face tree-sitter-hl-face:string) 68 88 (fontified t face tree-sitter-hl-face:string) 88 89 (fontified t face tree-sitter-hl-face:string) 89 90 (fontified t face (rainbow-delimiters-depth-2-face)) 90 91 (fontified t) 91 92 (fontified t) 92 93 (fontified t) 93 100 (fontified t) 100 106 (fontified t face tree-sitter-hl-face:label) 106 107 (fontified t face tree-sitter-hl-face:operator) 107 118 (fontified t) 118 122 (fontified t face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor tree-sitter-hl-face:property)) 122 124 (fontified t) 124 128 (fontified t) 128 129 (fontified t face (rainbow-delimiters-depth-1-face)) 129 130 (rear-nonsticky t fontified t) 130 131 (fontified t) 131 135 (fontified t) 135 140 (fontified t face tree-sitter-hl-face:keyword) 140 141 (fontified t) 141 145 (fontified t face tree-sitter-hl-face:constant\.builtin) 145 155 (fontified t) 155 161 (fontified t face tree-sitter-hl-face:variable) 161 162 (fontified t) 162 163 (fontified t face tree-sitter-hl-face:operator) 163 169 (fontified t) 169 175 (fontified t face tree-sitter-hl-face:property) 175 176 (fontified t) 176 184 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 184 185 (fontified t face (rainbow-delimiters-depth-1-face)) 185 186 (fontified t face (rainbow-delimiters-depth-1-face)) 186 195 (fontified t) 195 197 (fontified t face tree-sitter-hl-face:keyword) 197 203 (fontified t) 203 207 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 207 208 (fontified t face (rainbow-delimiters-depth-1-face)) 208 209 (fontified t face (rainbow-delimiters-depth-1-face)) 209 210 (fontified t) 210 212 (fontified t face tree-sitter-hl-face:operator) 212 213 (fontified t) 213 216 (fontified t face tree-sitter-hl-face:operator) 216 217 (fontified t) 217 221 (fontified t face tree-sitter-hl-face:constant\.builtin) 221 224 (fontified t) 224 251 (fontified t face tree-sitter-hl-face:comment) 251 264 (fontified t) 264 269 (fontified t face tree-sitter-hl-face:keyword) 269 278 (fontified t) 278 280 (fontified t face tree-sitter-hl-face:keyword) 280 288 (fontified t) 288 289 (fontified t) 289 301 (fontified t) 301 306 (fontified t face (tree-sitter-hl-face:function\.builtin tree-sitter-hl-face:function\.call)) 306 307 (fontified t face (rainbow-delimiters-depth-1-face)) 307 314 (fontified t) 314 319 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 319 320 (fontified t face (rainbow-delimiters-depth-2-face)) 320 321 (fontified t face (rainbow-delimiters-depth-2-face)) 321 322 (fontified t) 322 328 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 328 329 (fontified t face (rainbow-delimiters-depth-2-face)) 329 330 (fontified t face tree-sitter-hl-face:string) 330 335 (fontified t face tree-sitter-hl-face:string) 335 336 (fontified t face tree-sitter-hl-face:string) 336 337 (fontified t face (rainbow-delimiters-depth-2-face)) 337 338 (fontified t face (rainbow-delimiters-depth-1-face)) 338 340 (fontified t)) . 528) (undo-tree-id1516 . -340) (undo-tree-id1517 . -15) (undo-tree-id1518 . -124) (undo-tree-id1519 . -124) (undo-tree-id1520 . -124) (undo-tree-id1521 . -124) (undo-tree-id1522 . -124) (undo-tree-id1523 . -124) (undo-tree-id1524 . -92) (undo-tree-id1525 . -92) (undo-tree-id1526 . -100) (undo-tree-id1527 . -92) (undo-tree-id1528 . -92) (undo-tree-id1529 . -100) (undo-tree-id1530 . -92) (undo-tree-id1531 . -92) (undo-tree-id1532 . -92) (undo-tree-id1533 . -92) (undo-tree-id1534 . -92) (undo-tree-id1535 . -92) (undo-tree-id1536 . -92) (undo-tree-id1537 . -111) (undo-tree-id1538 . -92) (undo-tree-id1539 . -111) (undo-tree-id1540 . -111) (undo-tree-id1541 . -111) (undo-tree-id1542 . -111) (undo-tree-id1543 . -111) (undo-tree-id1544 . -111) (undo-tree-id1545 . -131) (undo-tree-id1546 . -131) (undo-tree-id1547 . -289) (undo-tree-id1548 . -100) (undo-tree-id1549 . -111) (undo-tree-id1550 . -100) (undo-tree-id1551 . -92) (undo-tree-id1552 . -100) (undo-tree-id1553 . -100) (undo-tree-id1554 . -100) (undo-tree-id1555 . -100) (undo-tree-id1556 . -100) (undo-tree-id1557 . -100) (undo-tree-id1558 . -100) (undo-tree-id1559 . -42) (undo-tree-id1560 . -3) (undo-tree-id1561 . -3) (undo-tree-id1562 . -26) (undo-tree-id1563 . -36) (undo-tree-id1564 . -198) (undo-tree-id1565 . -202) (undo-tree-id1566 . -176) (undo-tree-id1567 . -184) (undo-tree-id1568 . -203) (undo-tree-id1569 . -207) (undo-tree-id1570 . -340) (t 25787 61206 842746 305000)) nil (25787 61212 199371 509000) 0 nil])
([nil nil ((#("
run_cpp()" 0 1 (fontified t ws-butler-chg delete) 1 2 (fontified t face tree-sitter-hl-face:function\.call) 2 8 (fontified t face tree-sitter-hl-face:function\.call) 8 9 (fontified t face (rainbow-delimiters-depth-1-face)) 9 10 (fontified t face (rainbow-delimiters-depth-1-face))) . -525) (undo-tree-id1086 . -10) (undo-tree-id1087 . 10) (undo-tree-id1088 . 10) (undo-tree-id1089 . 10) (undo-tree-id1090 . 1) (undo-tree-id1091 . -10) (undo-tree-id1092 . 2) (undo-tree-id1093 . -9) (undo-tree-id1094 . -1) (undo-tree-id1095 . -10) (undo-tree-id1096 . -10) (undo-tree-id1097 . -10) (undo-tree-id1098 . -10) (undo-tree-id1099 . -10) (undo-tree-id1100 . -10) (undo-tree-id1101 . -10) (undo-tree-id1102 . -10) (undo-tree-id1103 . -10) (undo-tree-id1104 . -10) (undo-tree-id1105 . -10) (undo-tree-id1106 . -10) (undo-tree-id1107 . -10) (undo-tree-id1108 . -10) (undo-tree-id1109 . -10) (undo-tree-id1110 . -10) (undo-tree-id1111 . -10) (undo-tree-id1112 . -10) (undo-tree-id1113 . -10) (undo-tree-id1114 . -10) (undo-tree-id1115 . -10) (undo-tree-id1116 . -10) (undo-tree-id1117 . -10) (undo-tree-id1118 . -10) (undo-tree-id1119 . -10) (undo-tree-id1120 . -10) (undo-tree-id1121 . -10) (undo-tree-id1122 . -10) (undo-tree-id1123 . -10) (undo-tree-id1124 . -10) (undo-tree-id1125 . -10) (undo-tree-id1126 . -10) (undo-tree-id1127 . -10) (undo-tree-id1128 . -10) (undo-tree-id1129 . -10) (undo-tree-id1130 . -10) (undo-tree-id1131 . -10) (undo-tree-id1132 . -10) (undo-tree-id1133 . -10) (undo-tree-id1134 . -10) (undo-tree-id1135 . -10) (undo-tree-id1136 . -10) (undo-tree-id1137 . -10) (undo-tree-id1138 . -10) (undo-tree-id1139 . -10) (undo-tree-id1140 . -10) (undo-tree-id1141 . -10) (undo-tree-id1142 . -10) (undo-tree-id1143 . -10) (undo-tree-id1144 . -10) (undo-tree-id1145 . -10) (undo-tree-id1146 . -10) (undo-tree-id1147 . -10) (undo-tree-id1148 . -10) (undo-tree-id1149 . -10) (undo-tree-id1150 . -10) (undo-tree-id1151 . -10) (undo-tree-id1152 . -10) (undo-tree-id1153 . -10) (undo-tree-id1154 . -10) (undo-tree-id1155 . -10) (undo-tree-id1156 . -10) (undo-tree-id1157 . -10) (undo-tree-id1158 . -10) (undo-tree-id1159 . -10) (undo-tree-id1160 . -10) (undo-tree-id1161 . -10) (undo-tree-id1162 . -10) (undo-tree-id1163 . -10) (undo-tree-id1164 . -10) (undo-tree-id1165 . -10) (undo-tree-id1166 . -9) (undo-tree-id1167 . -10) 535) nil (25787 61212 199026 74000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -19) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) 20 (t 25787 61212 198705 519000)) nil (25787 61313 424933 187000) 0 nil])
([nil nil ((20 . 21) 19) nil (25787 61313 424886 736000) 0 nil])
([nil nil ((nil rear-nonsticky nil 442 . 443) (nil fontified nil 20 . 443) (20 . 443) (t 25787 61313 421941 319000)) nil (25787 61359 902362 999000) 0 nil])
([nil nil ((#("        [\"./bin/LifNet\", \"./conf/config_EI.yml\"],
" 0 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-2-face)) 9 10 (fontified t face tree-sitter-hl-face:string) 10 22 (fontified t face tree-sitter-hl-face:string) 22 23 (fontified t face tree-sitter-hl-face:string) 23 25 (fontified t) 25 26 (fontified t face tree-sitter-hl-face:string) 26 46 (fontified t face tree-sitter-hl-face:string) 46 47 (fontified t face tree-sitter-hl-face:string) 47 48 (fontified t face (rainbow-delimiters-depth-2-face)) 48 50 (fontified t)) . 488) (undo-tree-id1661 . -8) (undo-tree-id1662 . -50) (undo-tree-id1663 . -50) 538) nil (25787 61359 902361 155000) 0 nil])
([nil nil ((#("b" 0 1 (ws-butler-chg chg fontified t)) . -63) (undo-tree-id1638 . -1) (#("l" 0 1 (ws-butler-chg chg fontified t)) . -64) (undo-tree-id1639 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -65) (undo-tree-id1640 . -1) (#("'" 0 1 (ws-butler-chg chg fontified nil face tree-sitter-hl-face:string)) . -66) (undo-tree-id1641 . -1) (#("," 0 1 (ws-butler-chg chg fontified nil)) . -67) (undo-tree-id1642 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -68) (undo-tree-id1643 . -1) (#("'" 0 1 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string)) . -69) (undo-tree-id1644 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t)) . -70) (undo-tree-id1645 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t)) . -71) (undo-tree-id1646 . -1) (#("g" 0 1 (ws-butler-chg chg fontified t)) . -72) (undo-tree-id1647 . -1) (#("1" 0 1 (ws-butler-chg chg fontified t)) . -73) (undo-tree-id1648 . -1) (#("'" 0 1 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string)) . -74) (undo-tree-id1649 . -1) (#("," 0 1 (ws-butler-chg chg fontified t)) . -75) (undo-tree-id1650 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -76) (undo-tree-id1651 . -1) (#("'" 0 1 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string)) . -77) (undo-tree-id1652 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t)) . -78) (undo-tree-id1653 . -1) (#("r" 0 1 (ws-butler-chg chg fontified t)) . -79) (undo-tree-id1654 . -1) (#("g" 0 1 (ws-butler-chg chg fontified t)) . -80) (undo-tree-id1655 . -1) (#("2" 0 1 (ws-butler-chg chg fontified t)) . -81) (undo-tree-id1656 . -1) (#("'" 0 1 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string)) . -82) (undo-tree-id1657 . -1) (#("]" 0 1 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-1-face))) . -83) (undo-tree-id1658 . -1) (undo-tree-id1659 . 1) (undo-tree-id1660 . -1) 84) nil (25787 61359 902353 624000) 0 nil])
([nil nil ((#("[" 0 1 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-1-face))) . -45) (undo-tree-id1620 . -1) (#("'" 0 1 (ws-butler-chg chg fontified t face tree-sitter-hl-face:string)) . -46) (undo-tree-id1621 . -1) (#("." 0 1 (ws-butler-chg chg fontified t)) . -47) (undo-tree-id1622 . -1) (#("/" 0 1 (ws-butler-chg chg fontified t face tree-sitter-hl-face:operator)) . -48) (undo-tree-id1623 . -1) (#("m" 0 1 (ws-butler-chg chg fontified t)) . -49) (undo-tree-id1624 . -1) (#("y" 0 1 (ws-butler-chg chg fontified t)) . -50) (undo-tree-id1625 . -1) (#("_" 0 1 (ws-butler-chg chg fontified t)) . -51) (undo-tree-id1626 . -1) (#("c" 0 1 (ws-butler-chg chg fontified t)) . -52) (undo-tree-id1627 . -1) (#("p" 0 1 (ws-butler-chg chg fontified t)) . -53) (undo-tree-id1628 . -1) (#("p" 0 1 (ws-butler-chg chg fontified t)) . -54) (undo-tree-id1629 . -1) (#("_" 0 1 (ws-butler-chg chg fontified t)) . -55) (undo-tree-id1630 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -56) (undo-tree-id1631 . -1) (#("x" 0 1 (ws-butler-chg chg fontified t)) . -57) (undo-tree-id1632 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t)) . -58) (undo-tree-id1633 . -1) (#("c" 0 1 (ws-butler-chg chg fontified t)) . -59) (undo-tree-id1634 . -1) (#("u" 0 1 (ws-butler-chg chg fontified t)) . -60) (undo-tree-id1635 . -1) (#("t" 0 1 (ws-butler-chg chg fontified t)) . -61) (undo-tree-id1636 . -1) (#("a" 0 1 (ws-butler-chg chg fontified t)) . -62) (undo-tree-id1637 . -1) 63) nil (25787 61359 902323 908000) 0 nil])
([nil nil ((nil rear-nonsticky nil 94 . 95) (nil fontified nil 93 . 95) (nil fontified nil 92 . 93) (nil fontified nil 91 . 92) (nil fontified nil 71 . 91) (nil fontified nil 70 . 71) (nil fontified nil 68 . 70) (nil fontified nil 67 . 68) (nil fontified nil 55 . 67) (nil fontified nil 54 . 55) (nil fontified nil 53 . 54) (nil fontified nil 45 . 53) (45 . 95)) nil (25787 61359 902303 532000) 0 nil])
([nil nil ((#("," 0 1 (ws-butler-chg chg fontified t)) . -93) (undo-tree-id1619 . -1) 94) nil (25787 61359 902299 879000) 0 nil])
([nil nil ((#("=" 0 1 (ws-butler-chg chg fontified t face tree-sitter-hl-face:operator)) . -43) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -44) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -45) (undo-tree-id1611 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -46) (undo-tree-id1612 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -47) (undo-tree-id1613 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -48) (undo-tree-id1614 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -49) (undo-tree-id1615 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -50) (undo-tree-id1616 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -51) (undo-tree-id1617 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -52) (undo-tree-id1618 . -1) 53) nil (25787 61359 902295 967000) 0 nil])
([nil nil ((43 . 45)) nil (25787 61359 902280 407000) 0 nil])
([nil nil ((#("
" 0 1 (ws-butler-chg delete fontified t rear-nonsticky t)) . -85) (undo-tree-id1606 . -1) 86) nil (25787 61359 902278 57000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 297) (undo-tree-id1605 . -1) (20 . 21) 85) nil (25787 61359 902271 73000) 0 nil])
([nil nil ((442 . 443) 85 (t 25787 61359 905594 198000)) nil (25787 61360 311832 223000) 0 nil])
([nil nil ((#("def run_cpp():
    proc = subprocess.Popen(
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    while True:
        output = proc.stdout.readline()
        if output:
            print(output.strip().decode(\"utf-8\"))

        error = proc.stderr.readline()
        if error:
            print(\"ERROR: \" + error.strip().decode(\"utf-8\"))

        if proc.poll() is not None:  # The process has finished.
            break


" 0 3 (fontified t face tree-sitter-hl-face:keyword) 3 4 (fontified t) 4 11 (fontified t face tree-sitter-hl-face:function) 11 12 (fontified t face (rainbow-delimiters-depth-1-face)) 12 13 (fontified t face (rainbow-delimiters-depth-1-face)) 13 15 (fontified t) 15 19 (fontified t) 19 23 (fontified t face tree-sitter-hl-face:variable) 23 24 (fontified t) 24 25 (fontified t face tree-sitter-hl-face:operator) 25 37 (fontified t) 37 42 (fontified t face (tree-sitter-hl-face:constructor tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 42 43 (fontified t face (rainbow-delimiters-depth-1-face)) 43 44 (fontified t) 44 45 (fontified t) 45 52 (fontified t) 52 58 (fontified t face tree-sitter-hl-face:label) 58 59 (fontified t face tree-sitter-hl-face:operator) 59 70 (fontified t) 70 74 (fontified t face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor tree-sitter-hl-face:property)) 74 76 (fontified t) 76 84 (fontified t) 84 90 (fontified t face tree-sitter-hl-face:label) 90 91 (fontified t face tree-sitter-hl-face:operator) 91 102 (fontified t) 102 106 (fontified t face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor tree-sitter-hl-face:property)) 106 112 (fontified t) 112 113 (fontified t face (rainbow-delimiters-depth-1-face)) 113 114 (fontified t) 114 115 (fontified t) 115 119 (fontified t) 119 124 (fontified t face tree-sitter-hl-face:keyword) 124 125 (fontified t) 125 129 (fontified t face tree-sitter-hl-face:constant\.builtin) 129 139 (fontified t) 139 145 (fontified t face tree-sitter-hl-face:variable) 145 146 (fontified t) 146 147 (fontified t face tree-sitter-hl-face:operator) 147 153 (fontified t) 153 159 (fontified t face tree-sitter-hl-face:property) 159 160 (fontified t) 160 168 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 168 169 (fontified t face (rainbow-delimiters-depth-1-face)) 169 170 (fontified t face (rainbow-delimiters-depth-1-face)) 170 179 (fontified t) 179 181 (fontified t face tree-sitter-hl-face:keyword) 181 190 (fontified t) 190 202 (fontified t) 202 207 (fontified t face (tree-sitter-hl-face:function\.builtin tree-sitter-hl-face:function\.call)) 207 208 (fontified t face (rainbow-delimiters-depth-1-face)) 208 215 (fontified t) 215 220 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 220 221 (fontified t face (rainbow-delimiters-depth-2-face)) 221 222 (fontified t face (rainbow-delimiters-depth-2-face)) 222 223 (fontified t) 223 229 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 229 230 (fontified t face (rainbow-delimiters-depth-2-face)) 230 231 (fontified t face tree-sitter-hl-face:string) 231 236 (fontified t face tree-sitter-hl-face:string) 236 237 (fontified t face tree-sitter-hl-face:string) 237 238 (fontified t face (rainbow-delimiters-depth-2-face)) 238 239 (fontified t face (rainbow-delimiters-depth-1-face)) 239 240 (fontified t) 240 241 (fontified t) 241 249 (fontified t) 249 254 (fontified t face tree-sitter-hl-face:variable) 254 255 (fontified t) 255 256 (fontified t face tree-sitter-hl-face:operator) 256 262 (fontified t) 262 268 (fontified t face tree-sitter-hl-face:property) 268 269 (fontified t) 269 277 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 277 278 (fontified t face (rainbow-delimiters-depth-1-face)) 278 279 (fontified t face (rainbow-delimiters-depth-1-face)) 279 288 (fontified t) 288 290 (fontified t face tree-sitter-hl-face:keyword) 290 298 (fontified t) 298 310 (fontified t) 310 315 (fontified t face (tree-sitter-hl-face:function\.builtin tree-sitter-hl-face:function\.call)) 315 316 (fontified t face (rainbow-delimiters-depth-1-face)) 316 317 (fontified t face tree-sitter-hl-face:string) 317 324 (fontified t face tree-sitter-hl-face:string) 324 325 (fontified t face tree-sitter-hl-face:string) 325 326 (fontified t) 326 327 (fontified t face tree-sitter-hl-face:operator) 327 334 (fontified t) 334 339 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 339 340 (fontified t face (rainbow-delimiters-depth-2-face)) 340 341 (fontified t face (rainbow-delimiters-depth-2-face)) 341 342 (fontified t) 342 348 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 348 349 (fontified t face (rainbow-delimiters-depth-2-face)) 349 350 (fontified t face tree-sitter-hl-face:string) 350 355 (fontified t face tree-sitter-hl-face:string) 355 356 (fontified t face tree-sitter-hl-face:string) 356 357 (fontified t face (rainbow-delimiters-depth-2-face)) 357 358 (fontified t face (rainbow-delimiters-depth-1-face)) 358 359 (fontified t) 359 360 (fontified t) 360 368 (fontified t) 368 370 (fontified t face tree-sitter-hl-face:keyword) 370 376 (fontified t) 376 380 (fontified t face (tree-sitter-hl-face:method\.call tree-sitter-hl-face:property)) 380 381 (fontified t face (rainbow-delimiters-depth-1-face)) 381 382 (fontified t face (rainbow-delimiters-depth-1-face)) 382 383 (fontified t) 383 385 (fontified t face tree-sitter-hl-face:operator) 385 386 (fontified t) 386 389 (fontified t face tree-sitter-hl-face:operator) 389 390 (fontified t) 390 394 (fontified t face tree-sitter-hl-face:constant\.builtin) 394 397 (fontified t) 397 424 (fontified t face tree-sitter-hl-face:comment) 424 437 (fontified t) 437 442 (fontified t face tree-sitter-hl-face:keyword) 442 444 (fontified t) 444 445 (fontified t)) . 443) (undo-tree-id1664 . -444) (undo-tree-id1665 . -130) (undo-tree-id1666 . -15) (undo-tree-id1667 . -15) (undo-tree-id1668 . -15) (undo-tree-id1669 . -15) (undo-tree-id1670 . -15) (undo-tree-id1671 . -15) (undo-tree-id1672 . -44) (undo-tree-id1673 . -241) (undo-tree-id1674 . -130) (undo-tree-id1675 . -130) (undo-tree-id1676 . -130) (undo-tree-id1677 . -146) (undo-tree-id1678 . -146) (undo-tree-id1679 . -108) (undo-tree-id1680 . -44) (undo-tree-id1681 . -3) (undo-tree-id1682 . -3) (undo-tree-id1683 . -3) (undo-tree-id1684 . -26) (undo-tree-id1685 . -36) (undo-tree-id1686 . -26) (undo-tree-id1687 . -36) (undo-tree-id1688 . -26) (undo-tree-id1689 . -113) (undo-tree-id1690 . -160) (undo-tree-id1691 . -168) (undo-tree-id1692 . -269) (undo-tree-id1693 . -277) (undo-tree-id1694 . -444) (undo-tree-id1695 . -445) (undo-tree-id1696 . -444) (undo-tree-id1697 . -444) (undo-tree-id1698 . -444) (undo-tree-id1699 . -444) (undo-tree-id1700 . -444) (undo-tree-id1701 . -444) (undo-tree-id1702 . -444) (undo-tree-id1703 . -443) (undo-tree-id1704 . -444) (undo-tree-id1705 . -443) (undo-tree-id1706 . -443) (undo-tree-id1707 . -443) (undo-tree-id1708 . -443) (undo-tree-id1709 . -443) (undo-tree-id1710 . -443) (undo-tree-id1711 . -443) (undo-tree-id1712 . -443) (undo-tree-id1713 . -443) (undo-tree-id1714 . -443) (undo-tree-id1715 . -443) (undo-tree-id1716 . -443) (undo-tree-id1717 . -443) (undo-tree-id1718 . -443) (undo-tree-id1719 . -443) (undo-tree-id1720 . -443) (undo-tree-id1721 . -443) (undo-tree-id1722 . -443) (undo-tree-id1723 . -443) (undo-tree-id1724 . -443) (undo-tree-id1725 . -443) (undo-tree-id1726 . -443) (undo-tree-id1727 . -443) (undo-tree-id1728 . -443) (undo-tree-id1729 . -443) (undo-tree-id1730 . -443) (undo-tree-id1731 . -443) (undo-tree-id1732 . -443) (undo-tree-id1733 . -443) (undo-tree-id1734 . -443) (undo-tree-id1735 . -443) (undo-tree-id1736 . -443) (undo-tree-id1737 . -443) (undo-tree-id1738 . -443) (undo-tree-id1739 . -443) (undo-tree-id1740 . -425) (undo-tree-id1741 . -443) (undo-tree-id1742 . -425) (undo-tree-id1743 . -425) (undo-tree-id1744 . -425) (undo-tree-id1745 . -425) (undo-tree-id1746 . -425) (undo-tree-id1747 . -425) (undo-tree-id1748 . -425) (undo-tree-id1749 . -425) (undo-tree-id1750 . -425) (undo-tree-id1751 . -425) (undo-tree-id1752 . -425) (undo-tree-id1753 . -425) (undo-tree-id1754 . -425) (undo-tree-id1755 . -425) (undo-tree-id1756 . -360) (undo-tree-id1757 . -425) (undo-tree-id1758 . -360) (undo-tree-id1759 . -360) (undo-tree-id1760 . -360) (undo-tree-id1761 . -360) (undo-tree-id1762 . -360) (undo-tree-id1763 . -360) (undo-tree-id1764 . -360) (undo-tree-id1765 . -360) (undo-tree-id1766 . -360) (undo-tree-id1767 . -360) (undo-tree-id1768 . -360) (undo-tree-id1769 . -360) (undo-tree-id1770 . -360) (undo-tree-id1771 . -360) (undo-tree-id1772 . -359) (undo-tree-id1773 . -360) (undo-tree-id1774 . -359) (undo-tree-id1775 . -359) (undo-tree-id1776 . -359) (undo-tree-id1777 . -359) (undo-tree-id1778 . -359) (undo-tree-id1779 . -359) (undo-tree-id1780 . -359) (undo-tree-id1781 . -359) (undo-tree-id1782 . -359) (undo-tree-id1783 . -359) (undo-tree-id1784 . -359) (undo-tree-id1785 . -359) (undo-tree-id1786 . -359) (undo-tree-id1787 . -359) (undo-tree-id1788 . -298) (undo-tree-id1789 . -359) (undo-tree-id1790 . -298) (undo-tree-id1791 . -298) (undo-tree-id1792 . -298) (undo-tree-id1793 . -298) (undo-tree-id1794 . -298) (undo-tree-id1795 . -298) (undo-tree-id1796 . -298) (undo-tree-id1797 . -298) (undo-tree-id1798 . -298) (undo-tree-id1799 . -298) (undo-tree-id1800 . -298) (undo-tree-id1801 . -298) (undo-tree-id1802 . -298) (undo-tree-id1803 . -298) (undo-tree-id1804 . -280) (undo-tree-id1805 . -298) (undo-tree-id1806 . -280) (undo-tree-id1807 . -280) (undo-tree-id1808 . -280) (undo-tree-id1809 . -280) (undo-tree-id1810 . -280) (undo-tree-id1811 . -280) (undo-tree-id1812 . -280) (undo-tree-id1813 . -280) (undo-tree-id1814 . -280) (undo-tree-id1815 . -280) (undo-tree-id1816 . -280) (undo-tree-id1817 . -280) (undo-tree-id1818 . -280) (undo-tree-id1819 . -280) (undo-tree-id1820 . -241) (undo-tree-id1821 . -280) (undo-tree-id1822 . -241) (undo-tree-id1823 . -241) (undo-tree-id1824 . -241) (undo-tree-id1825 . -241) (undo-tree-id1826 . -241) (undo-tree-id1827 . -241) (undo-tree-id1828 . -241) (undo-tree-id1829 . -241) (undo-tree-id1830 . -241) (undo-tree-id1831 . -241) (undo-tree-id1832 . -241) (undo-tree-id1833 . -241) (undo-tree-id1834 . -241) (undo-tree-id1835 . -241) (undo-tree-id1836 . -240) (undo-tree-id1837 . -241) (undo-tree-id1838 . -240) (undo-tree-id1839 . -240) (undo-tree-id1840 . -240) (undo-tree-id1841 . -240) (undo-tree-id1842 . -240) (undo-tree-id1843 . -240) (undo-tree-id1844 . -240) (undo-tree-id1845 . -240) (undo-tree-id1846 . -240) (undo-tree-id1847 . -240) (undo-tree-id1848 . -240) (undo-tree-id1849 . -240) (undo-tree-id1850 . -240) (undo-tree-id1851 . -240) (undo-tree-id1852 . -190) (undo-tree-id1853 . -240) (undo-tree-id1854 . -190) (undo-tree-id1855 . -190) (undo-tree-id1856 . -190) (undo-tree-id1857 . -190) (undo-tree-id1858 . -190) (undo-tree-id1859 . -190) (undo-tree-id1860 . -190) (undo-tree-id1861 . -190) (undo-tree-id1862 . -190) (undo-tree-id1863 . -190) (undo-tree-id1864 . -190) (undo-tree-id1865 . -190) (undo-tree-id1866 . -190) (undo-tree-id1867 . -190) (undo-tree-id1868 . -171) (undo-tree-id1869 . -190) (undo-tree-id1870 . -171) (undo-tree-id1871 . -171) (undo-tree-id1872 . -171) (undo-tree-id1873 . -171) (undo-tree-id1874 . -171) (undo-tree-id1875 . -171) (undo-tree-id1876 . -171) (undo-tree-id1877 . -171) (undo-tree-id1878 . -171) (undo-tree-id1879 . -171) (undo-tree-id1880 . -171) (undo-tree-id1881 . -171) (undo-tree-id1882 . -171) (undo-tree-id1883 . -171) (undo-tree-id1884 . -131) (undo-tree-id1885 . -171) (undo-tree-id1886 . -131) (undo-tree-id1887 . -131) (undo-tree-id1888 . -131) (undo-tree-id1889 . -131) (undo-tree-id1890 . -131) (undo-tree-id1891 . -131) (undo-tree-id1892 . -131) (undo-tree-id1893 . -131) (undo-tree-id1894 . -131) (undo-tree-id1895 . -131) (undo-tree-id1896 . -131) (undo-tree-id1897 . -131) (undo-tree-id1898 . -131) (undo-tree-id1899 . -131) (undo-tree-id1900 . -115) (undo-tree-id1901 . -131) (undo-tree-id1902 . -115) (undo-tree-id1903 . -115) (undo-tree-id1904 . -115) (undo-tree-id1905 . -115) (undo-tree-id1906 . -115) (undo-tree-id1907 . -115) (undo-tree-id1908 . -115) (undo-tree-id1909 . -115) (undo-tree-id1910 . -115) (undo-tree-id1911 . -115) (undo-tree-id1912 . -115) (undo-tree-id1913 . -115) (undo-tree-id1914 . -115) (undo-tree-id1915 . -115) (undo-tree-id1916 . -114) (undo-tree-id1917 . -115) (undo-tree-id1918 . -114) (undo-tree-id1919 . -114) (undo-tree-id1920 . -114) (undo-tree-id1921 . -114) (undo-tree-id1922 . -114) (undo-tree-id1923 . -114) (undo-tree-id1924 . -114) (undo-tree-id1925 . -114) (undo-tree-id1926 . -114) (undo-tree-id1927 . -114) (undo-tree-id1928 . -114) (undo-tree-id1929 . -114) (undo-tree-id1930 . -114) (undo-tree-id1931 . -114) (undo-tree-id1932 . -108) (undo-tree-id1933 . -114) (undo-tree-id1934 . -108) (undo-tree-id1935 . -108) (undo-tree-id1936 . -108) (undo-tree-id1937 . -108) (undo-tree-id1938 . -108) (undo-tree-id1939 . -108) (undo-tree-id1940 . -108) (undo-tree-id1941 . -108) (undo-tree-id1942 . -108) (undo-tree-id1943 . -108) (undo-tree-id1944 . -108) (undo-tree-id1945 . -108) (undo-tree-id1946 . -108) (undo-tree-id1947 . -108) (undo-tree-id1948 . -76) (undo-tree-id1949 . -108) (undo-tree-id1950 . -76) (undo-tree-id1951 . -76) (undo-tree-id1952 . -76) (undo-tree-id1953 . -76) (undo-tree-id1954 . -76) (undo-tree-id1955 . -76) (undo-tree-id1956 . -76) (undo-tree-id1957 . -44) (undo-tree-id1958 . -76) (undo-tree-id1959 . -44) (undo-tree-id1960 . -44) (undo-tree-id1961 . -44) (undo-tree-id1962 . -44) (undo-tree-id1963 . -44) (undo-tree-id1964 . -44) (undo-tree-id1965 . -44) (undo-tree-id1966 . -15) (undo-tree-id1967 . -44) (undo-tree-id1968 . -15) (undo-tree-id1969 . -15) (undo-tree-id1970 . -15) (undo-tree-id1971 . -15) (undo-tree-id1972 . -15) (undo-tree-id1973 . -15) (undo-tree-id1974 . -15) (undo-tree-id1975 . -15) (undo-tree-id1976 . -15) (undo-tree-id1977 . -15) (undo-tree-id1978 . -15) (undo-tree-id1979 . -15) (undo-tree-id1980 . -15) (undo-tree-id1981 . -15) (undo-tree-id1982 . -15) (undo-tree-id1983 . -15) (undo-tree-id1984 . -15) (undo-tree-id1985 . -15) (undo-tree-id1986 . -15) (undo-tree-id1987 . -15) (undo-tree-id1988 . -15) (undo-tree-id1989 . -15) (undo-tree-id1990 . -15) (undo-tree-id1991 . -15) (undo-tree-id1992 . -15) (undo-tree-id1993 . -15) (undo-tree-id1994 . -15) (undo-tree-id1995 . -15) (undo-tree-id1996 . -15) (undo-tree-id1997 . -445) (undo-tree-id1998 . -444) (t 25787 61360 313591 162000)) nil (25787 61365 859927 49000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -440) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) 441 (t 25787 61365 861549 876000)) nil (25787 61368 772157 477000) 0 nil])
([nil current ((442 . 443) 440 (t 25787 61368 773528 220000)) nil (25787 61369 164568 462000) 0 nil])
nil
