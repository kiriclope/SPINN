
*** Can you save the previous matrix and plot it using python

To plot the matrix in Python, you can use the following code:

#+begin_src  python
 import numpy as np
import matplotlib.pyplot as plt

# Load matrix from file
C = np.loadtxt('Cmatrix.txt')

# Display matrix
plt.imshow(C)
plt.colorbar()
plt.show()
#+end_src

#+RESULTS:
: None

This code loads the matrix from the file =Cmatrix.txt= using =numpy.loadtxt()=, and then displays it using =matplotlib.imshow()=. The =plt.colorbar()= call adds a colorbar to the plot to help interpret the colors. Finally, =plt.show()= shows the plot in a separate window.

*** Can you write a function to then read and plot the matrix with python

Certainly! Here's an example function to read the dense matrix from a text file and plot it using Python:

#+begin_src python
  import numpy as np
  import matplotlib.pyplot as plt

  def plotDenseMatrix(filename):
      # Load matrix from file
      matrix = np.loadtxt(filename)

      # Display matrix
      plt.imshow(matrix)
      plt.colorbar()
      plt.show()

  plotDenseMatrix('dense.txt')
#+end_src

#+RESULTS:
: None

This function takes a file name as input, and uses =numpy.loadtxt()= to load the matrix data into a NumPy array. It then displays the matrix using =matplotlib.imshow()=, along with a color bar to help interpret the colors.

*** I want to take the dot product of this sparse matrix with a vector. Given that my matrix is now in CSR format what shoud I do?

To compute the dot product of a sparse matrix in CSR format with a dense vector, you can use the following algorithm:

1. Initialize an output vector =y= with zeros.
2. For each row =i= in the matrix:
    a. Set =y[i]= to the dot product of the row and the input vector.

Here's an implementation of this algorithm in C++:

#+begin_src C++ :tangle ~/bebopalula/lif_cpp/new/sparse_mat.cpp

  void dotProdCSR(const std::vector<int>& rowptr, const std::vector<int>& indices, const std::vector<int>& data, const std::vector<double>& x, std::vector<double>& y) {
      // Iterate over each row of the matrix
      for (int i = 0; i < rowptr.size() - 1; i++) {
          // Compute the dot product of the i-th row and the input vector
          double sum = 0.0;
          for (int j = rowptr[i]; j < rowptr[i+1]; j++) {
              sum += data[j] * x[indices[j]];
          }
          y[i] = sum;
      }
  }
#+end_src

#+RESULTS:

This function takes as input the row pointers =rowptr=, column indices =indices=, and data =data= vectors for the sparse matrix, plus the input vector =x= and an output vector =y=. The function then applies the algorithm described above to compute the dot product of the matrix and the vector.


#+begin_src python

  import numpy as np
  import matplotlib.pyplot as plt

  def plotAverageHistogram(filename):
        # Load rate data from file
        data = np.loadtxt(filename)

        # print(data[:10,:10])
        # data = data.reshape(int(data.shape[0] / 5000), 5000)
        # Compute mean rate over population (i.e., average over time axis)
        pop_mean = np.mean(data[1:,:int(data.shape[1]*.75)], axis=1)
        time_mean = np.mean(data[1:,:int(data.shape[1]*.75)], axis=0)

        # Create two subplots: one for the mean rate over time, the other for the histogram of mean rates
        fig, (ax0, ax1, ax2) = plt.subplots(nrows=3)

        # Plot the mean rate over time in the top subplot
        # ax0.plot(pop_mean)
        ax0.imshow(data[:,:int(data.shape[1]*.75)].T, origin='lower', aspect='auto', cmap='jet', interpolation='lanczos', vmax=10)
        # ax0.imshow(data[:,:int(data.shape[1])].T, origin='lower', aspect='auto', cmap='gray', interpolation='nearest'
        #            , vmin=0, vmax=1)
        # ax0.set_xlabel('Time')
        # ax0.set_ylabel('Mean Rate')

        # Plot the histogram of mean rates in the bottom subplot
        ax1.hist(time_mean, bins='auto')
        ax1.set_xlabel('Neurons')
        ax1.set_ylabel('Spike Count')

        ax2.plot(pop_mean)
        ax2.set_xlabel('time')
        ax2.set_ylabel('Spike Count')

        # Show the plot
        plt.show()

  plotAverageHistogram('./simul/A_stp.txt')

#+end_src

#+RESULTS:
: None

#+begin_src python

  import numpy as np
  import matplotlib.pyplot as plt

  def plotAverageHistogram(filename):
        # Load rate data from file
        data = np.loadtxt(filename)

        # print(data.shape)
        # data = data.reshape(int(data.shape[0] / 5000), 5000)
        # Compute mean rate over population (i.e., average over time axis)
        pop_mean = np.mean(data[1:,:int(data.shape[1] * .75)], axis=1)
        time_mean = np.mean(data[250:,:int(data.shape[1] * .75)], axis=0)

        # Create two subplots: one for the mean rate over time, the other for the histogram of mean rates
        fig, (ax0, ax1, ax2) = plt.subplots(nrows=3)

        # Plot the mean rate over time in the top subplot
        ax0.plot(pop_mean)
        # ax0.imshow(data.T, origin='lower', aspect='auto', cmap='jet')
        ax0.set_xlabel('Time')
        ax0.set_ylabel('Pop Rate (Hz)')

        # Plot the histogram of mean rates in the bottom subplot
        ax1.hist(time_mean, bins='auto')
        ax1.set_xlabel('Mean Rates (Hz)')
        ax1.set_ylabel('Count')

        ax2.plot(time_mean)
        ax2.set_xlabel('Neuron')
        ax2.set_ylabel('Mean Rates')

        # Show the plot
        plt.show()

  plotAverageHistogram('./simul/A_stp.txt')

#+end_src

#+RESULTS:
: None
