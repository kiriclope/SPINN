(undo-tree-save-format-version . 1)
"9038cf1b5e3f79389c8a39d1a4831b35011adc80"
[nil nil nil nil (25787 60173 155389 414000) 0 nil]
([nil nil ((301 . 303)) nil (25787 60174 517950 42000) 0 nil] [nil nil ((301 . 303) (t 25774 46237 807772 367000)) ((#("  " 0 2 (fontified nil ws-butler-chg chg)) . 301)) (25787 60172 894171 190000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t ws-butler-chg chg)) . 301) (undo-tree-id385 . -2) (undo-tree-id386 . -2) (undo-tree-id387 . -2) (undo-tree-id388 . -2) (undo-tree-id389 . -2) (undo-tree-id390 . -2) (undo-tree-id391 . -2) (undo-tree-id392 . -2) (undo-tree-id393 . -2) (undo-tree-id394 . -2) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -2) (undo-tree-id398 . -2) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -2) (undo-tree-id402 . -2) (undo-tree-id403 . -2) (undo-tree-id404 . -2) (undo-tree-id405 . -2) (undo-tree-id406 . -2) (undo-tree-id407 . -2) (undo-tree-id408 . -2) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -2) (undo-tree-id415 . -2) (undo-tree-id416 . -2) (undo-tree-id417 . -2) (undo-tree-id418 . -2) (undo-tree-id419 . -2) 303) nil (25787 60174 517944 439000) 0 nil])
([nil nil ((912 . 914)) ((#("  " 0 2 (fontified t ws-butler-chg chg)) . 912) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -2) (undo-tree-id364 . -2) (undo-tree-id365 . -2) (undo-tree-id366 . -2) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2)) (25787 60172 454327 955000) 0 nil])
([nil nil ((301 . 303) 303 (t 25787 60174 516166 147000)) nil (25787 60210 642361 427000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t ws-butler-chg chg)) . 910) (undo-tree-id0 . -2) (undo-tree-id2 . -2) (undo-tree-id4 . -2) (undo-tree-id6 . -2) (undo-tree-id8 . -2) (undo-tree-id10 . -2) (undo-tree-id12 . -2) (undo-tree-id14 . -2) (undo-tree-id16 . -2) (undo-tree-id18 . -2) (undo-tree-id20 . -2) (undo-tree-id22 . -2) (undo-tree-id24 . -2) (undo-tree-id26 . -2) (undo-tree-id28 . -2) (undo-tree-id30 . -2) (undo-tree-id32 . -2) (undo-tree-id34 . -2) (undo-tree-id36 . -2) (undo-tree-id38 . -2) (undo-tree-id40 . -2) (undo-tree-id42 . -2) (undo-tree-id44 . -2) (undo-tree-id46 . -2) (undo-tree-id48 . -2) (undo-tree-id50 . -2) (undo-tree-id52 . -2) (undo-tree-id54 . -2) (undo-tree-id56 . -2) (undo-tree-id58 . -2) (undo-tree-id60 . -2) (undo-tree-id62 . -2) (undo-tree-id64 . -2) (undo-tree-id66 . -2) (undo-tree-id68 . -2) (undo-tree-id70 . -2) (undo-tree-id72 . -2) (undo-tree-id74 . -2) (undo-tree-id76 . -2) (undo-tree-id78 . -2) (undo-tree-id80 . -2) (undo-tree-id82 . -2) (undo-tree-id84 . -2) (#("  " 0 2 (fontified t ws-butler-chg chg)) . 301) (undo-tree-id87 . -1) (undo-tree-id89 . -1) (undo-tree-id91 . -1) (undo-tree-id93 . -1) (undo-tree-id95 . -1) (undo-tree-id97 . -1) (undo-tree-id99 . -1) (undo-tree-id101 . -1) (undo-tree-id103 . -1) (undo-tree-id105 . -1) (undo-tree-id107 . -1) (undo-tree-id109 . -1) (undo-tree-id111 . -1) (undo-tree-id113 . -1) (undo-tree-id115 . -1) (undo-tree-id117 . -1) (undo-tree-id119 . -1) (undo-tree-id121 . -1) (undo-tree-id123 . -1) (undo-tree-id125 . -1) (undo-tree-id127 . -1) (undo-tree-id129 . -1) (undo-tree-id131 . -1) (undo-tree-id133 . -1) (undo-tree-id135 . -1) (undo-tree-id137 . -1) (undo-tree-id139 . -1) (undo-tree-id141 . -1) (undo-tree-id143 . -1) (undo-tree-id145 . -1) (undo-tree-id147 . -1) (undo-tree-id149 . -1) (undo-tree-id151 . -1) (undo-tree-id153 . -1) (undo-tree-id155 . -1) (undo-tree-id157 . -1) (undo-tree-id159 . -1) (undo-tree-id161 . -1) (undo-tree-id163 . -1) (undo-tree-id165 . -1) (undo-tree-id167 . -1) (undo-tree-id169 . -1) (undo-tree-id171 . -1) (undo-tree-id173 . -1) (undo-tree-id175 . -1) (undo-tree-id177 . -1) (undo-tree-id179 . -1) (undo-tree-id181 . -1) (undo-tree-id183 . -2) (undo-tree-id185 . -2) (undo-tree-id187 . -2) (undo-tree-id189 . -2) (undo-tree-id191 . -2) (undo-tree-id193 . -2) (undo-tree-id195 . -2) (undo-tree-id197 . -2) (undo-tree-id199 . -2) (undo-tree-id201 . -2) (undo-tree-id203 . -2) (undo-tree-id205 . -2) (undo-tree-id207 . -2) (undo-tree-id209 . -2) (undo-tree-id211 . -2) (undo-tree-id213 . -2) (undo-tree-id215 . -2) (undo-tree-id217 . -2) 914) ((301 . 303) (910 . 912)) (25787 60172 113215 566000) 0 nil])
([nil nil ((nil rear-nonsticky nil 392 . 393) (nil fontified nil 392 . 393) (nil fontified nil 391 . 392) (nil fontified nil 390 . 391) (nil fontified nil 380 . 390) (nil fontified nil 379 . 380) (nil fontified nil 370 . 379) (nil fontified nil 369 . 370) (nil fontified nil 368 . 369) (nil fontified nil 367 . 368) (367 . 393) (t 25787 60174 516166 147000)) nil (25787 60262 875426 869000) 0 nil] [nil nil ((apply -3 304 370 undo--wrap-and-run-primitive-undo 304 370 ((306 . 309) 341)) (t 25787 60174 516166 147000)) ((apply 3 304 367 undo--wrap-and-run-primitive-undo 304 367 ((#("// " 0 1 (c-is-sws t fontified t ws-butler-chg chg face font-lock-comment-delimiter-face c-in-sws t) 1 3 (fontified t ws-butler-chg chg face font-lock-comment-delimiter-face c-in-sws t)) . 306) 370))) (25787 60210 332184 195000) 0 nil])
([nil nil ((910 . 912)) ((#("  " 0 2 (ws-butler-chg chg fontified t)) . 910) (undo-tree-id360 . -2)) (25787 60171 716397 897000) 0 nil])
([nil nil ((apply -6 304 399 undo--wrap-and-run-primitive-undo 304 399 ((346 . 349) (306 . 309) 367))) nil (25787 60262 875423 601000) 0 nil])
([nil nil ((nil rear-nonsticky nil 395 . 396) (nil fontified nil 394 . 396) (nil fontified nil 393 . 394) (nil fontified nil 383 . 393) (nil fontified nil 382 . 383) (nil fontified nil 373 . 382) (nil fontified nil 372 . 373) (nil fontified nil 370 . 372) (370 . 396)) ((#("  loadConfig(configname);
" 0 1 (ws-butler-chg chg fontified nil) 1 2 (ws-butler-chg chg fontified nil) 2 3 (ws-butler-chg chg fontified nil) 3 12 (ws-butler-chg chg fontified nil) 12 13 (ws-butler-chg chg fontified nil face (rainbow-delimiters-depth-2-face)) 13 23 (ws-butler-chg chg fontified nil) 23 24 (fontified nil face (rainbow-delimiters-depth-2-face)) 24 25 (ws-butler-chg chg fontified nil) 25 26 (ws-butler-chg chg fontified nil rear-nonsticky nil)) . 370) (undo-tree-id830 . -13) (undo-tree-id831 . -13) (undo-tree-id832 . -13) (undo-tree-id833 . -13) (undo-tree-id834 . -13) (undo-tree-id835 . -13) (undo-tree-id836 . -13) (undo-tree-id837 . -13) (undo-tree-id838 . -13) (undo-tree-id839 . -13) (undo-tree-id840 . -13) (undo-tree-id841 . -13) (undo-tree-id842 . -13) (undo-tree-id843 . -13) (undo-tree-id844 . -13) (undo-tree-id845 . -13) (undo-tree-id846 . -13) (undo-tree-id847 . -13) (undo-tree-id848 . -13) (undo-tree-id849 . -13) (undo-tree-id850 . -13) (undo-tree-id851 . -13) (undo-tree-id852 . -13) (undo-tree-id853 . -13) (undo-tree-id854 . -13) (undo-tree-id855 . -13) (undo-tree-id856 . -13) (undo-tree-id857 . -13) (undo-tree-id858 . -13) (undo-tree-id859 . -13) (undo-tree-id860 . -13) (undo-tree-id861 . -13) (undo-tree-id862 . -13) (undo-tree-id863 . -13) (undo-tree-id864 . -13) (undo-tree-id865 . -13) (undo-tree-id866 . -13) (undo-tree-id867 . -13) (undo-tree-id868 . -13) (undo-tree-id869 . -13) (undo-tree-id870 . -13) (undo-tree-id871 . -13) (undo-tree-id872 . -13) (undo-tree-id873 . -13) (undo-tree-id874 . -13) (undo-tree-id875 . -13) (undo-tree-id876 . -13) (undo-tree-id877 . -13) (undo-tree-id878 . -13) (undo-tree-id879 . -13) (undo-tree-id880 . -13) (undo-tree-id881 . -13) (undo-tree-id882 . -13) (undo-tree-id883 . -13) (undo-tree-id884 . -13) (undo-tree-id885 . -13) (undo-tree-id886 . -13) (undo-tree-id887 . -13) (undo-tree-id888 . -13) (undo-tree-id889 . -13) (undo-tree-id890 . -13) (undo-tree-id891 . -13) (undo-tree-id892 . -13) (undo-tree-id893 . -13) (undo-tree-id894 . -13) (undo-tree-id895 . -13) (undo-tree-id896 . -13) (undo-tree-id897 . -13) (undo-tree-id898 . -13) (undo-tree-id899 . -13) (undo-tree-id900 . -13) (undo-tree-id901 . -13) (undo-tree-id902 . -13) (undo-tree-id903 . -13) (undo-tree-id904 . -13) (undo-tree-id905 . -13) (undo-tree-id906 . -13) (undo-tree-id907 . -13) (undo-tree-id908 . -13) (undo-tree-id909 . -13) (undo-tree-id910 . -13) (undo-tree-id911 . -13) (undo-tree-id912 . -13) (undo-tree-id913 . -13) (undo-tree-id914 . -13) (undo-tree-id915 . -13) (undo-tree-id916 . -13) (undo-tree-id917 . -13) (undo-tree-id918 . -13) (undo-tree-id919 . -13) (undo-tree-id920 . -13) (undo-tree-id921 . -13) (undo-tree-id922 . -13) (undo-tree-id923 . -13) (undo-tree-id924 . -13) (undo-tree-id925 . -13) (undo-tree-id926 . -13) (undo-tree-id927 . -13) (undo-tree-id928 . -13) (undo-tree-id929 . -13) (undo-tree-id930 . -13) (undo-tree-id931 . -13) (undo-tree-id932 . -13) (undo-tree-id933 . -13) (undo-tree-id934 . -13) (undo-tree-id935 . -13) (undo-tree-id936 . -13) (undo-tree-id937 . -13) (undo-tree-id938 . -13) (undo-tree-id939 . -13) (undo-tree-id940 . -13) (undo-tree-id941 . -13) (undo-tree-id942 . -13) (undo-tree-id943 . -13) (undo-tree-id944 . -13) (undo-tree-id945 . -13) (undo-tree-id946 . -13) (undo-tree-id947 . -13) (undo-tree-id948 . -13) (undo-tree-id949 . -13) (undo-tree-id950 . -13) (undo-tree-id951 . -13) (undo-tree-id952 . -13) (undo-tree-id953 . -13) (undo-tree-id954 . -13) (undo-tree-id955 . -13) (undo-tree-id956 . -13) (undo-tree-id957 . -13) (undo-tree-id958 . -13) (undo-tree-id959 . -13) (undo-tree-id960 . -13) (undo-tree-id961 . -13) (undo-tree-id962 . -13) (undo-tree-id963 . -13) (undo-tree-id964 . -13) (undo-tree-id965 . -13) (undo-tree-id966 . -13) (undo-tree-id967 . -13) (undo-tree-id968 . -13) (undo-tree-id969 . -13) (undo-tree-id970 . -13) (undo-tree-id971 . -13) (undo-tree-id972 . -13) (undo-tree-id973 . -13) (undo-tree-id974 . -13) (undo-tree-id975 . -13) (undo-tree-id976 . -13) (undo-tree-id977 . -13) (undo-tree-id978 . -13) (undo-tree-id979 . -13) (undo-tree-id980 . -13) (undo-tree-id981 . -13) (undo-tree-id982 . -13) (undo-tree-id983 . -13) (undo-tree-id984 . -13) (undo-tree-id985 . -13) (undo-tree-id986 . -13) (undo-tree-id987 . -13) (undo-tree-id988 . -13) (undo-tree-id989 . -13) (undo-tree-id990 . -13) (undo-tree-id991 . -13) (undo-tree-id992 . -13) (undo-tree-id993 . -13) (undo-tree-id994 . -13) (undo-tree-id995 . -13) (undo-tree-id996 . -13) (undo-tree-id997 . -13) (undo-tree-id998 . -13) (undo-tree-id999 . -13) (undo-tree-id1000 . -13) (undo-tree-id1001 . -13) (undo-tree-id1002 . -13) (undo-tree-id1003 . -13) (undo-tree-id1004 . -13) (undo-tree-id1005 . -13) (undo-tree-id1006 . -13) (undo-tree-id1007 . -13) (undo-tree-id1008 . -13) (undo-tree-id1009 . -13) (undo-tree-id1010 . -13) (undo-tree-id1011 . -13) (nil rear-nonsticky t 395 . 396)) (25787 60209 829105 227000) 0 nil])
([nil nil ((301 . 303)) ((#("  " 0 2 (ws-butler-chg chg fontified t)) . 301)) (25787 60171 357918 387000) 0 nil])
([nil nil ((399 . 401)) nil (25787 60262 875422 926000) 0 nil])
([nil nil ((apply -3 344 399 undo--wrap-and-run-primitive-undo 344 399 ((346 . 349) 370))) ((apply 3 344 396 undo--wrap-and-run-primitive-undo 344 396 ((#("// " 0 1 (fontified t ws-butler-chg chg face font-lock-comment-delimiter-face c-is-sws t) 1 3 (fontified t ws-butler-chg chg face font-lock-comment-delimiter-face c-in-sws t)) . 346) 386))) (25787 60209 327129 748000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified t)) . 910) (undo-tree-id358 . -2) (#("  " 0 2 (ws-butler-chg chg fontified t)) . 301)) ((301 . 303) (910 . 912)) (25787 60171 126562 818000) 0 nil])
([nil nil ((apply 6 304 367 undo--wrap-and-run-primitive-undo 304 367 ((#("// " 0 3 (fontified t ws-butler-chg chg face font-lock-comment-delimiter-face c-in-sws t)) . -343) (#("// " 0 1 (c-is-sws t fontified t ws-butler-chg chg face font-lock-comment-delimiter-face c-in-sws t) 1 3 (fontified t ws-butler-chg chg face font-lock-comment-delimiter-face c-in-sws t)) . -306) 373))) nil (25787 60262 875421 739000) 0 nil])
([nil nil ((#("configname" 0 10 (ws-butler-chg chg fontified t)) . 386)) ((386 . 396)) (25787 60209 150035 710000) 0 nil])
([nil nil ((#("#include <iostream>
#include <iomanip>
#include <chrono>
#include <string>
" 0 1 (fontified t c-in-sws t c-is-sws t face font-lock-preprocessor-face) 1 8 (fontified t c-in-sws t face font-lock-preprocessor-face) 8 9 (fontified t c-in-sws t) 9 10 (fontified t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (4 . 62)) 10 18 (fontified t c-in-sws t face font-lock-string-face) 18 19 (fontified t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (5 . 60)) 19 20 (fontified t c-in-sws t) 20 21 (fontified t c-in-sws t c-is-sws t face font-lock-preprocessor-face) 21 28 (fontified t c-in-sws t face font-lock-preprocessor-face) 28 29 (fontified t c-in-sws t) 29 30 (fontified t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (4 . 62)) 30 37 (fontified t c-in-sws t face font-lock-string-face) 37 38 (fontified t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (5 . 60)) 38 39 (fontified t c-in-sws t) 39 40 (fontified t c-in-sws t c-is-sws t face font-lock-preprocessor-face) 40 47 (fontified t c-in-sws t face font-lock-preprocessor-face) 47 48 (fontified t c-in-sws t) 48 49 (fontified t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (4 . 62)) 49 55 (fontified t c-in-sws t face font-lock-string-face) 55 56 (fontified t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (5 . 60)) 56 57 (fontified t c-in-sws t) 57 58 (fontified t c-in-sws t c-is-sws t face font-lock-preprocessor-face) 58 65 (fontified t c-in-sws t face font-lock-preprocessor-face) 65 66 (fontified t c-in-sws t) 66 67 (fontified t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (4 . 62)) 67 73 (fontified t c-in-sws t face font-lock-string-face) 73 74 (fontified t c-in-sws t face (rainbow-delimiters-depth-1-face font-lock-string-face) syntax-table (5 . 60)) 74 75 (fontified t c-in-sws t)) . 1) (undo-tree-id359 . -19) (nil ws-butler-chg nil 76 . 77)) ((nil ws-butler-chg nil 76 . 77) (nil ws-butler-chg delete 76 . 77) (1 . 76)) (25787 60170 399576 529000) 0 nil])
([nil nil ((340 . 343)) nil (25787 60262 875420 744000) 0 nil])
([nil nil ((387 . 389) (387 . 388) (nil syntax-table nil 389 . 390) (nil syntax-table (1) 386 . 387) (386 . 387) (#("\"" 0 1 (ws-butler-chg chg fontified nil face (rainbow-delimiters-depth-2-face))) . -386) (nil syntax-table nil 389 . 390) (nil syntax-table (1) 386 . 387) (386 . 387)) ((#("\"" 0 1 (ws-butler-chg chg fontified nil face (rainbow-delimiters-depth-2-face))) . 386) (nil syntax-table nil 389 . 390) (nil syntax-table (1) 386 . 387) (nil syntax-table (1) 386 . 387) (nil syntax-table nil 389 . 390) (nil ws-butler-chg delete 387 . 388) (386 . 387) (#("\"" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . 386) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (nil syntax-table nil 389 . 390) (nil syntax-table (1) 386 . 387) (nil syntax-table (1) 386 . 387) (nil syntax-table nil 389 . 390) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 387) (#(".." 0 1 (fontified t ws-butler-chg chg face font-lock-string-face) 1 2 (fontified t ws-butler-chg chg face font-lock-string-face)) . 387) (undo-tree-id718 . -2) (undo-tree-id719 . -2) (undo-tree-id720 . -2) (undo-tree-id721 . -2) (undo-tree-id722 . -2) (undo-tree-id723 . -2) (undo-tree-id724 . -2) (undo-tree-id725 . -2) (undo-tree-id726 . -2) (undo-tree-id727 . -2) (undo-tree-id728 . -2) (undo-tree-id729 . -2) (undo-tree-id730 . -2) (undo-tree-id731 . -2) (undo-tree-id732 . -2) (undo-tree-id733 . -2) (undo-tree-id734 . -2) (undo-tree-id735 . -2) (undo-tree-id736 . -2) (undo-tree-id737 . -2) (undo-tree-id738 . -2) (undo-tree-id739 . -2) (undo-tree-id740 . -2) (undo-tree-id741 . -2) (undo-tree-id742 . -2) (undo-tree-id743 . -2) (undo-tree-id744 . -2) (undo-tree-id745 . -2) (undo-tree-id746 . -2) (undo-tree-id747 . -2) (undo-tree-id748 . -2) (undo-tree-id749 . -2) (undo-tree-id750 . -2) (undo-tree-id751 . -2) (undo-tree-id752 . -2) (undo-tree-id753 . -2) (undo-tree-id754 . -2) (undo-tree-id755 . -2) (undo-tree-id756 . -2) (undo-tree-id757 . -2) (undo-tree-id758 . -2) (undo-tree-id759 . -2) (undo-tree-id760 . -2) (undo-tree-id761 . -2) (undo-tree-id762 . -2) (undo-tree-id763 . -2) (undo-tree-id764 . -2) (undo-tree-id765 . -2) (undo-tree-id766 . -2) (undo-tree-id767 . -2) (undo-tree-id768 . -2) (undo-tree-id769 . -2) (undo-tree-id770 . -2) (undo-tree-id771 . -2) (undo-tree-id772 . -2) (undo-tree-id773 . -2) (undo-tree-id774 . -2) (undo-tree-id775 . -2) (undo-tree-id776 . -2) (undo-tree-id777 . -2) (undo-tree-id778 . -2) (undo-tree-id779 . -2) (undo-tree-id780 . -2) (undo-tree-id781 . -2) (undo-tree-id782 . -2) (undo-tree-id783 . -2) (undo-tree-id784 . -2) (undo-tree-id785 . -2) (undo-tree-id786 . -2) (undo-tree-id787 . -2) (undo-tree-id788 . -2) (undo-tree-id789 . -2) (undo-tree-id790 . -2) (undo-tree-id791 . -2) (undo-tree-id792 . -2) (undo-tree-id793 . -2) (undo-tree-id794 . -2) (undo-tree-id795 . -2) (undo-tree-id796 . -2) (undo-tree-id797 . -2) (undo-tree-id798 . -2) (undo-tree-id799 . -2) (undo-tree-id800 . -2) (undo-tree-id801 . -2) (undo-tree-id802 . -2) (undo-tree-id803 . -2) (undo-tree-id804 . -2) (undo-tree-id805 . -2) (undo-tree-id806 . -2) (undo-tree-id807 . -2) (undo-tree-id808 . -2) (undo-tree-id809 . -2) (undo-tree-id810 . -2) (undo-tree-id811 . -2) (undo-tree-id812 . -2) (undo-tree-id813 . -2) (undo-tree-id814 . -2) (undo-tree-id815 . -2) (undo-tree-id816 . -2) (undo-tree-id817 . -2) (undo-tree-id818 . -2) (undo-tree-id819 . -2) (undo-tree-id820 . -2) (undo-tree-id821 . -2) (undo-tree-id822 . -2) (undo-tree-id823 . -2) (undo-tree-id824 . -2) (undo-tree-id825 . -2) (undo-tree-id826 . -2) (undo-tree-id827 . -2) (undo-tree-id828 . -2) (undo-tree-id829 . -2)) (25787 60208 827297 820000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg delete)) . -1) (undo-tree-id221 . -1) (undo-tree-id223 . -1) (undo-tree-id225 . -1) (undo-tree-id227 . -1) (undo-tree-id229 . -1) (undo-tree-id231 . -1) (undo-tree-id233 . -1) (undo-tree-id235 . -1) (undo-tree-id237 . -1) (undo-tree-id239 . -1) (undo-tree-id241 . -1) (undo-tree-id243 . -1) (undo-tree-id245 . -1) (undo-tree-id247 . -1) (undo-tree-id249 . -1) (undo-tree-id251 . -1) (undo-tree-id253 . -1) (undo-tree-id255 . -1) 2) ((1 . 2) (t 25787 59792 863229 380000)) (25787 59792 867053 413000) 0 nil])
([nil nil ((343 . 346)) nil (25787 60262 875419 269000) 0 nil])
([nil nil ((389 . 390)) ((#("/" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . 389) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1)) (25787 60208 421911 371000) 0 nil])
nil
([nil nil ((341 . 342) (#("  " 0 2 (fontified nil ws-butler-chg chg)) . 341) (346 . 347)) nil (25787 60262 875418 54000) 0 nil])
([nil nil ((390 . 396)) ((#("config" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face) 1 2 (fontified t ws-butler-chg chg face font-lock-string-face) 2 3 (fontified t ws-butler-chg chg face font-lock-string-face) 3 4 (fontified t ws-butler-chg chg face font-lock-string-face) 4 5 (fontified t ws-butler-chg chg face font-lock-string-face) 5 6 (fontified t ws-butler-chg chg face font-lock-string-face)) . 390) (undo-tree-id454 . -6) (undo-tree-id455 . -3) (undo-tree-id456 . -3) (undo-tree-id457 . -3) (undo-tree-id458 . -3) (undo-tree-id459 . -3) (undo-tree-id460 . -3) (undo-tree-id461 . -3) (undo-tree-id462 . -3) (undo-tree-id463 . -3) (undo-tree-id464 . -3) (undo-tree-id465 . -3) (undo-tree-id466 . -3) (undo-tree-id467 . -3) (undo-tree-id468 . -3) (undo-tree-id469 . -3) (undo-tree-id470 . -6) (undo-tree-id471 . -6) (undo-tree-id472 . -6) (undo-tree-id473 . -6) (undo-tree-id474 . -6) (undo-tree-id475 . -6) (undo-tree-id476 . -6) (undo-tree-id477 . -6) (undo-tree-id478 . -6) (undo-tree-id479 . -6) (undo-tree-id480 . -6) (undo-tree-id481 . -6) (undo-tree-id482 . -6) (undo-tree-id483 . -6) (undo-tree-id484 . -6) (undo-tree-id485 . -6) (undo-tree-id486 . -6) (undo-tree-id487 . -6) (undo-tree-id488 . -6) (undo-tree-id489 . -6) (undo-tree-id490 . -6) (undo-tree-id491 . -6) (undo-tree-id492 . -6) (undo-tree-id493 . -6) (undo-tree-id494 . -6) (undo-tree-id495 . -6) (undo-tree-id496 . -6) (undo-tree-id497 . -6) (undo-tree-id498 . -6) (undo-tree-id499 . -6) (undo-tree-id500 . -6) (undo-tree-id501 . -6) (undo-tree-id502 . -6) (undo-tree-id503 . -6) (undo-tree-id504 . -6) (undo-tree-id505 . -6) (undo-tree-id506 . -6) (undo-tree-id507 . -6) (undo-tree-id508 . -6) (undo-tree-id509 . -6) (undo-tree-id510 . -6) (undo-tree-id511 . -6) (undo-tree-id512 . -6) (undo-tree-id513 . -6) (undo-tree-id514 . -6) (undo-tree-id515 . -6) (undo-tree-id516 . -6)) (25787 60208 86980 107000) 0 nil])
([nil nil ((346 . 347)) nil (25787 60262 875416 722000) 0 nil])
([nil nil ((396 . 399)) ((#("_EI" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face) 1 2 (fontified t ws-butler-chg chg face font-lock-string-face) 2 3 (fontified t ws-butler-chg chg face font-lock-string-face)) . 396) (undo-tree-id429 . -3) (undo-tree-id430 . -3) (undo-tree-id431 . -3) (undo-tree-id432 . -3) (undo-tree-id433 . -3) (undo-tree-id434 . -3) (undo-tree-id435 . -3) (undo-tree-id436 . -3) (undo-tree-id437 . -3) (undo-tree-id438 . -3) (undo-tree-id439 . -3) (undo-tree-id440 . -3) (undo-tree-id441 . -3) (undo-tree-id442 . -3) (undo-tree-id443 . -3) (undo-tree-id444 . -3) (undo-tree-id445 . -3) (undo-tree-id446 . -3) (undo-tree-id447 . -3) (undo-tree-id448 . -3) (undo-tree-id449 . -3) (undo-tree-id450 . -3) (undo-tree-id451 . -3) (undo-tree-id452 . -3) (undo-tree-id453 . -3)) (25787 60207 881996 128000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t ws-butler-chg chg c-type c-decl-id-start face font-lock-type-face)) . -346) (undo-tree-id1013 . -1) 347) nil (25787 60262 875415 503000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -393) (undo-tree-id420 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -394) (undo-tree-id421 . -1) (#("g" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -395) (undo-tree-id422 . -1) (#("_" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -396) (undo-tree-id423 . -1) (#("E" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -397) (undo-tree-id424 . -1) (#("I" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -398) (undo-tree-id425 . -1) 399) ((394 . 399) (nil ws-butler-chg delete 394 . 395) (393 . 394)) (25787 60207 791946 129000) 0 nil])
([nil nil ((346 . 350)) nil (25787 60262 875413 288000) 0 nil])
([nil nil ((393 . 394)) ((#("f" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . 393) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1)) (25787 60207 790854 994000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 359 359 nil nil nil nil #s(yas--field 2 364 366 nil nil nil nil nil)) #s(yas--field 2 364 366 nil nil nil nil nil)) #s(yas--exit 359 #s(yas--field 1 359 359 nil nil nil nil #s(yas--field 2 364 366 nil nil nil nil nil))) 0 nil #s(yas--field 1 359 359 nil nil nil nil #s(yas--field 2 364 366 nil nil nil nil nil)) nil nil)) (346 . 369) (#("cout" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face) 1 2 (fontified t ws-butler-chg chg face font-lock-type-face) 2 3 (fontified t ws-butler-chg chg face font-lock-type-face) 3 4 (fontified t ws-butler-chg chg c-type c-decl-id-start face font-lock-type-face)) . 346) (undo-tree-id1012 . -4) 350) nil (25787 60262 875411 716000) 0 nil])
nil
([nil nil ((apply yas--snippet-revive 346 369 #s(yas--snippet nil (#s(yas--field 1 359 359 nil nil nil nil #s(yas--field 2 364 366 nil nil nil nil nil)) #s(yas--field 2 364 366 nil nil nil nil nil)) #s(yas--exit 359 #s(yas--field 1 359 359 nil nil nil nil #s(yas--field 2 364 366 nil nil nil nil nil))) 0 nil #s(yas--field 1 359 359 nil nil nil nil #s(yas--field 2 364 366 nil nil nil nil nil)) nil nil))) nil (25787 60262 875402 596000) 0 nil])
([nil nil ((341 . 342) (#(" " 0 1 (fontified t ws-butler-chg chg)) . 341)) nil (25787 60262 875401 686000) 0 nil])
([nil nil ((#("std" 0 1 (fontified t ws-butler-chg delete face font-lock-constant-face) 1 2 (fontified t ws-butler-chg chg face font-lock-constant-face) 2 3 (fontified t ws-butler-chg chg face font-lock-constant-face)) . 342)) nil (25787 60262 875400 579000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t ws-butler-chg delete)) . 342)) nil (25787 60262 875399 682000) 0 nil])
([nil nil ((355 . 365)) nil (25787 60262 875398 725000) 0 nil])
([nil nil ((341 . 343) (#(" " 0 1 (fontified t ws-butler-chg chg)) . 341)) nil (25787 60262 875396 995000) 0 nil])
([nil nil ((#("  " 0 2 (ws-butler-chg chg fontified t)) . 427) (#("  " 0 2 (ws-butler-chg chg fontified t)) . 301) 343) nil (25787 60262 875390 723000) 0 nil])
([nil nil ((#("  loadConfig(configname);
" 0 1 (c-is-sws t c-in-sws t fontified t) 1 2 (c-is-sws t c-in-sws t fontified t) 2 3 (c-is-sws t fontified t) 3 12 (fontified t) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-2-face)) 24 25 (fontified t) 25 26 (rear-nonsticky t fontified t)) . -401) (undo-tree-id1049 . -26) (undo-tree-id1050 . -26) (undo-tree-id1051 . -26) (undo-tree-id1052 . -26) (undo-tree-id1053 . -26) (undo-tree-id1054 . -26) (undo-tree-id1055 . -26) (undo-tree-id1056 . -26) (undo-tree-id1057 . -26) (undo-tree-id1058 . -26) (undo-tree-id1059 . -26) (undo-tree-id1060 . -26) (undo-tree-id1061 . -26) (undo-tree-id1062 . -26) (undo-tree-id1063 . -26) (undo-tree-id1064 . -26) (undo-tree-id1065 . -26) (undo-tree-id1066 . -26) (undo-tree-id1067 . -26) (undo-tree-id1068 . -26) (undo-tree-id1069 . -26) (undo-tree-id1070 . -26) (undo-tree-id1071 . -26) (undo-tree-id1072 . -26) (undo-tree-id1073 . -26) (undo-tree-id1074 . -26) (undo-tree-id1075 . -26) (undo-tree-id1076 . -26) (undo-tree-id1077 . -26) (undo-tree-id1078 . -26) (undo-tree-id1079 . -26) (undo-tree-id1080 . -26) (undo-tree-id1081 . -26) (undo-tree-id1082 . -26) (undo-tree-id1083 . -26) (undo-tree-id1084 . -26) (undo-tree-id1085 . -26) (undo-tree-id1086 . -26) (undo-tree-id1087 . -26) (undo-tree-id1088 . -26) (undo-tree-id1089 . -26) (undo-tree-id1090 . -26) (undo-tree-id1091 . -26) (undo-tree-id1092 . -26) (undo-tree-id1093 . -26) (undo-tree-id1094 . -26) (undo-tree-id1095 . -26) (undo-tree-id1096 . -26) (undo-tree-id1097 . -26) (undo-tree-id1098 . -26) (undo-tree-id1099 . -26) (undo-tree-id1100 . -26) (undo-tree-id1101 . -26) (undo-tree-id1102 . -26) (undo-tree-id1103 . -26) (undo-tree-id1104 . -26) (undo-tree-id1105 . -26) (undo-tree-id1106 . -26) (undo-tree-id1107 . -26) (undo-tree-id1108 . -26) (undo-tree-id1109 . -26) (undo-tree-id1110 . -26) (undo-tree-id1111 . -26) (undo-tree-id1112 . -26) (undo-tree-id1113 . -26) (undo-tree-id1114 . -26) (undo-tree-id1115 . -26) (undo-tree-id1116 . -26) (undo-tree-id1117 . -26) (undo-tree-id1118 . -26) (undo-tree-id1119 . -26) (undo-tree-id1120 . -26) (undo-tree-id1121 . -26) (undo-tree-id1122 . -26) (undo-tree-id1123 . -26) (undo-tree-id1124 . -26) (undo-tree-id1125 . -26) (undo-tree-id1126 . -26) (undo-tree-id1127 . -26) (undo-tree-id1128 . -26) (undo-tree-id1129 . -26) (undo-tree-id1130 . -26) (undo-tree-id1131 . -26) (undo-tree-id1132 . -26) (undo-tree-id1133 . -26) (undo-tree-id1134 . -26) (undo-tree-id1135 . -26) (undo-tree-id1136 . -26) (undo-tree-id1137 . -26) (undo-tree-id1138 . -26) (undo-tree-id1139 . -26) (undo-tree-id1140 . -26) (undo-tree-id1141 . -26) (undo-tree-id1142 . -26) (undo-tree-id1143 . -26) (undo-tree-id1144 . -26) (undo-tree-id1145 . -26) (undo-tree-id1146 . -26) (undo-tree-id1147 . -26) (undo-tree-id1148 . -26) (undo-tree-id1149 . -26) (undo-tree-id1150 . -26) (undo-tree-id1151 . -26) (undo-tree-id1152 . -26) 427 (t 25787 60262 875140 667000)) nil (25787 60266 415012 903000) 0 nil])
([nil nil ((401 . 403)) nil (25787 60266 414915 341000) 0 nil])
([nil current ((#("  " 0 2 (fontified t ws-butler-chg chg)) . 401) (undo-tree-id1014 . -2) (undo-tree-id1015 . -2) (undo-tree-id1016 . -2) (undo-tree-id1017 . -2) (undo-tree-id1018 . -2) (undo-tree-id1019 . -2) (undo-tree-id1020 . -2) (undo-tree-id1021 . -2) (undo-tree-id1022 . -2) (undo-tree-id1023 . -2) (undo-tree-id1024 . -2) (undo-tree-id1025 . -2) (undo-tree-id1026 . -2) (undo-tree-id1027 . -2) (undo-tree-id1028 . -2) (undo-tree-id1029 . -2) (undo-tree-id1030 . -2) (undo-tree-id1031 . -2) (undo-tree-id1032 . -2) (undo-tree-id1033 . -2) (undo-tree-id1034 . -2) (undo-tree-id1035 . -2) (undo-tree-id1036 . -2) (undo-tree-id1037 . -2) (undo-tree-id1038 . -2) (undo-tree-id1039 . -2) (undo-tree-id1040 . -2) (undo-tree-id1041 . -2) (undo-tree-id1042 . -2) (undo-tree-id1043 . -2) (undo-tree-id1044 . -2) (undo-tree-id1045 . -2) (undo-tree-id1046 . -2) (undo-tree-id1047 . -2) (undo-tree-id1048 . -2) 403) nil (25787 60266 414908 970000) 0 nil])
nil
