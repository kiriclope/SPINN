#+STARTUP: fold
#+TITLE: Cholinergic neuromodulation of prefrontal attractor dynamics controls performance in spatial WM
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual_data :kernel dual_data


* Notebook Settings
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/models/lif_cpp/notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

* Imports
#+begin_src ipython
  import sys
  sys.path.insert(0, '/home/leon/models/lif_cpp')  
  REPO_PATH = "/home/leon/models/lif_cpp"

  import subprocess
  import pandas as pd
  from time import sleep
  from yaml import safe_load
  from scipy.stats import circmean
  from joblib import Parallel, delayed

  from run_model import run_cpp, update_conf, restore_conf
  from analysis.decode import decode_bump, circcvl  
#+end_src

#+RESULTS:

* Helpers
#+begin_src ipython
  def get_precision(x):
      return x - circmean(x)
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_data(session='/'):
    # Open the file in binary mode and read the data
    with open('/home/leon/models/lif_cpp/data/simul/'+ session + '/rates.txt', 'rb') as f:
      data = np.fromfile(f, dtype=np.float32)
    # Now 'data' is a numpy array containing your data
    return data.reshape(-1, 40000).T
 #+end_src
 
 #+RESULTS:

#+begin_src ipython
  def get_rate(name, ini, phi):
       session = "/%s_phi_%d_ini_%d/" % (name, phi, ini)
       rate = get_data(session)
       return rate[:30000]

  def get_rates_ini_phi(name, ini_list, phi_list):
       rates = Parallel(n_jobs=-1)(delayed(get_rate)(name, ini, phi) for ini in ini_list for phi in phi_list)
       rates = np.array(rates)
       rates = rates.reshape(len(ini_list), len(phi_list), 30000, -1)
       return rates

    # def get_rates_ini_phi(name, ini_list, phi_list):
    #    rates = []
    #    for ini in ini_list:
    #       for phi in phi_list:
    #          session = "/%s_phi_%d_ini_%d/" % (name, phi, ini)
    #          rate = get_data(session)
    #          rates.append(rate[:30000])

    #    rates = np.array(rates)
    #    rates = rates.reshape(len(ini_list), len(phi_list), 30000, -1)
    #    return rates
#+end_src

#+RESULTS:

#+begin_src ipython  
  def get_df_ini_phi(rates):
      n_trials, n_phi, n_neurons, n_times = rates.shape

      # Create indices
      trials_ind, phi_ind, neurons_ind, times_ind = np.indices((n_trials, n_phi, n_neurons, n_times))

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten(),
          'rates': rates.flatten()
      })

      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data_ini_phi(name, ini_list, phi_list):
      rates = get_rates_ini_phi(name, ini_list, phi_list)
      df = get_df_ini_phi(rates)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_code(df):
      df_code = df.groupby(['time', 'trial', 'phi'])['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code = df_code.drop(columns=['rates'])
      
      end_point = df_code[df_code.time==df_code.time.iloc[-1]]
      end_point = end_point.drop(columns=['time'])
      print(end_point.head())  
      return df_code, end_point  
#+end_src

#+RESULTS:

#+begin_src ipython
  def run_ini_phi(name, ini_list, phi_list, Ie=.004):
    for ini in ini_list:
        for phi in phi_list:
            session = "%s_phi_%d_ini_%d" % (name, phi, ini)
            data_path = REPO_PATH + '/data/simul/' + session
            update_conf(REPO_PATH + '/conf/config_EI', 'DATA_PATH', data_path)
            update_conf(REPO_PATH + '/conf/config_EI', 'PHI_STIM', float(phi), axis=0)
            update_conf(REPO_PATH + '/conf/config_EI', 'Iext', float(Ie), axis=0)
            
            sleep(.2)
            run_cpp(session)
            sleep(.2)

            subprocess.run([REPO_PATH + '/src/mem_usage.sh'])
            subprocess.run([REPO_PATH + '/src/cpu_usage.sh'])

    restore_conf(REPO_PATH + '/conf/config_EI.yml')
#+end_src

#+RESULTS:

* Multiple Trials
*** Simulation
**** Parameters
#+begin_src ipython
  ini_list = np.arange(0, 50)
  phi_list = np.linspace(0, 315, 8)
#+end_src

#+RESULTS:

**** Control

#+begin_src ipython
  run_ini_phi('EI', ini_list, phi_list, Ie=0.004)
#+end_src

#+RESULTS:
: File moved successfully!

**** NB ON
#+begin_src ipython
  run_ini_phi('EI_on', ini_list, phi_list, Ie=0.0045)
#+end_src
#+RESULTS:
:  CPU_USAGE > 90.0 %, sleeping for a while ...
: File moved successfully!

*** Analysis
#+begin_src ipython
  df = load_data_ini_phi('EI', ini_list, phi_list)
  df_code, end_point = get_code(df)
#+end_src

#+RESULTS:
:       trial  phi        m0        m1     phase
: 7200      0    0  3.409733  2.225020  0.170233
: 7201      0    1  3.454667  2.237920  5.637768
: 7202      0    2  3.400667  2.114004  4.709411
: 7203      0    3  3.325467  2.120749  3.815238
: 7204      0    4  3.396800  2.253675  3.118514

#+begin_src ipython
  df_on = load_data_ini_phi('EI_on', ini_list, phi_list)
  df_code_on, end_point_on = get_code(df_on)
#+end_src

#+RESULTS:
:       trial  phi        m0        m1     phase
: 7200      0    0  5.276000  1.133127  0.156087
: 7201      0    1  5.275200  0.987646  5.690710
: 7202      0    2  5.396667  0.907474  4.738047
: 7203      0    3  5.351333  1.050085  3.804462
: 7204      0    4  5.200400  1.033460  3.125820

*** Phases 
#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  # sns.lineplot(data=df_code, x='time', y=df_code['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], hue='phi', alpha=0.25)

  # sns.lineplot(data=df_code_on, x='time', y=df_code_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], hue='phi', alpha=0.25)

  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\phi$ (°)')
  ax[0].set_xticks([0, 1, 2, 3, 4])
  ax[0].set_yticks([0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi, legend=False, ax=ax[1], bins=200, kde=False, stat='density')
  sns.histplot(data=end_point_on, x=end_point_on['phase']*180/np.pi, legend=False, ax=ax[1], bins=200, kde=False, stat='density')

  ax[1].set_xlabel('$\phi$ (°)')
  ax[1].set_ylabel('$Count$')
  ax[1].set_xticks([0, 90, 180, 270, 360])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/dc69c98a6f5dcbb174efc90df76db26b20ebd193.png]]

*** Endpoint Errors

#+begin_src ipython

  end_point['accuracy'] = (end_point.phase - end_point['phi'] / 180 * np.pi) % (2 * np.pi)
  end_point['precision'] = end_point.groupby('phi')['phase'].apply(get_precision)

  end_point_on['accuracy'] = (end_point_on.phase - end_point_on['phi'] / 180 * np.pi) % (2 * np.pi)
  end_point_on['precision'] = end_point_on.groupby('phi')['phase'].apply(get_precision)

  print(end_point.head())

#+end_src

#+RESULTS:
#+begin_example
        trial  phi        m0        m1     phase  accuracy  precision
  7200      0    0  3.409733  2.225020  0.170233  0.170233   0.059851
  7201      0    1  3.454667  2.237920  5.637768  5.620315   0.010080
  7202      0    2  3.400667  2.114004  4.709411  4.674505  -0.001375
  7203      0    3  3.325467  2.120749  3.815238  3.762878  -0.027849
  7204      0    4  3.396800  2.253675  3.118514  3.048701   0.001258
  /tmp/ipykernel_2026003/216822297.py:2: FutureWarning: Not prepending group keys to the result index of transform-like apply. In the future, the group keys will be included in the index, regardless of whether the applied function returns a like-indexed object.
  To preserve the previous behavior, use

  	>>> .groupby(..., group_keys=False)

  To adopt the future behavior and silence this warning, use 

  	>>> .groupby(..., group_keys=True)
    end_point['precision'] = end_point.groupby('phi')['phase'].apply(get_precision)
  /tmp/ipykernel_2026003/216822297.py:5: FutureWarning: Not prepending group keys to the result index of transform-like apply. In the future, the group keys will be included in the index, regardless of whether the applied function returns a like-indexed object.
  To preserve the previous behavior, use

  	>>> .groupby(..., group_keys=False)

  To adopt the future behavior and silence this warning, use 

  	>>> .groupby(..., group_keys=True)
    end_point_on['precision'] = end_point_on.groupby('phi')['phase'].apply(get_precision)
#+end_example

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density')
  sns.histplot(data=end_point_on, x=end_point_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density')
  ax[0].set_xlabel('$\phi$(°)')
  ax[0].set_ylabel('Density')
  ax[0].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density')
  sns.histplot(data=end_point_on, x=end_point_on['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density')
  ax[1].set_xlabel('$\phi - \phi_{stim}$ (°)')
  ax[1].set_ylabel('Density')
  ax[1].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=False, stat='density', element='step', alpha=0)
  sns.histplot(data=end_point_on, x=end_point_on['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=False, stat='density', element='step', alpha=0.)
  ax[2].set_xlabel('$\phi - <\phi>_{trials}$ (°)')
  ax[2].set_ylabel('Density')
  ax[2].set_xlim([-10, 10])

  plt.show()  
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/724bfd7ba5c0f501a89626dbabc912ceed09c5b7.png]]

#+begin_src ipython

#+end_src

#+RESULTS:
