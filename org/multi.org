#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual_data :kernel dual_data

* Notebook Settings
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/models/lif_cpp/notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

* Imports
#+begin_src ipython
  import sys
  sys.path.insert(0, '/home/leon/models/lif_cpp')  
  REPO_PATH = "/home/leon/models/lif_cpp"

  import subprocess
  import pandas as pd
  from time import sleep
  from yaml import safe_load
  from scipy.stats import circmean
  from joblib import Parallel, delayed

  from run_model import run_cpp, update_conf, restore_conf
  from analysis.decode import decode_bump, circcvl  
#+end_src

#+RESULTS:

* Helpers
#+begin_src ipython
  def get_precision(x):
      return x - circmean(x)
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_data(session='/'):
    # Open the file in binary mode and read the data
    with open('/home/leon/models/lif_cpp/data/simul/'+ session + '/rates.txt', 'rb') as f:
      data = np.fromfile(f, dtype=np.float32)
    # Now 'data' is a numpy array containing your data
    return data.reshape(-1, 40000).T
 #+end_src
 
 #+RESULTS:
 
#+begin_src ipython
  def get_rate(name, ini, phi):
       session = "/%s_phi_%d_ini_%d/" % (name, phi, ini)
       rate = get_data(session)
       return rate[:32000]

  def get_rates_ini_phi(name, ini_list, phi_list):
       rates = Parallel(n_jobs=-1)(delayed(get_rate)(name, ini, phi) for ini in ini_list for phi in phi_list)
       rates = np.array(rates)
       rates = rates.reshape(len(ini_list), len(phi_list), 32000, -1)
       return rates
#+end_src

#+RESULTS:

#+begin_src ipython  
  def get_df_ini_phi(rates):
      n_trials, n_phi, n_neurons, n_times = rates.shape

      # Create indices
      trials_ind, phi_ind, neurons_ind, times_ind = np.indices((n_trials, n_phi, n_neurons, n_times))

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten(),
          'rates': rates.flatten()
      })

      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data_ini_phi(name, ini_list, phi_list):
      rates = get_rates_ini_phi(name, ini_list, phi_list)
      df = get_df_ini_phi(rates)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_code(df):
      df_code = df.groupby(['time', 'trial', 'phi'])['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code = df_code.drop(columns=['rates'])
      
      end_point = df_code[df_code.time==df_code.time.iloc[-1]]
      end_point = end_point.drop(columns=['time'])
      print(end_point.head())  
      return df_code, end_point  
#+end_src

#+RESULTS:

#+begin_src ipython
  def run_ini_phi(name, ini_list, phi_list, Ie=.004):
      restore_conf(REPO_PATH + '/conf/config_ODR.yml',
                   REPO_PATH + '/conf/config_ODR.yml.bak')

      conf_path = REPO_PATH + '/conf/config_ODR.yml'

      for ini in ini_list:
          for phi in phi_list:
              session = "%s_phi_%d_ini_%d" % (name, phi, ini)
              data_path = REPO_PATH + '/data/simul/' + session
              update_conf(REPO_PATH + '/conf/config_ODR', 'DATA_PATH', data_path)
              update_conf(REPO_PATH + '/conf/config_ODR', 'PHI_STIM', float(phi), axis=0)
              update_conf(REPO_PATH + '/conf/config_ODR', 'Iext', float(Ie), axis=0)

              sleep(.2)
              run_cpp(session, conf_path=conf_path)
              sleep(.2)

              subprocess.run([REPO_PATH + '/src/mem_usage.sh'])
              subprocess.run([REPO_PATH + '/src/cpu_usage.sh'])

      restore_conf(REPO_PATH + '/conf/config_ODR.yml.bak',
                   REPO_PATH + '/conf/config_ODR.yml')

#+end_src

#+RESULTS:

* Multiple Trials
*** Simulation
**** Parameters
#+begin_src ipython
  ini_list = np.arange(0, 10)
  phi_list = np.linspace(0, 315, 8)
  phi_list = [180]
#+end_src

#+RESULTS:

**** Control

#+begin_src ipython
  run_ini_phi('odr_off', ini_list, phi_list, Ie=0.004)
#+end_src

#+RESULTS:

**** NB ON

#+begin_src ipython
  run_ini_phi('odr_on', ini_list, phi_list, Ie=0.00475)
#+end_src

#+RESULTS:
: File moved successfully!
: File moved successfully!

*** Analysis
#+begin_src ipython
  df = load_data_ini_phi('odr_off', ini_list, phi_list)
  df_code, end_point = get_code(df)
#+end_src

#+RESULTS:
:      trial  phi        m0        m1     phase
: 220      0    0  1.864000  1.837642  3.133255
: 221      1    0  1.908750  1.964464  3.127569
: 222      2    0  1.928750  1.974537  3.103554
: 223      3    0  1.900625  1.972731  3.131289
: 224      4    0  1.865500  1.929146  3.087307

#+begin_src ipython
  df_on = load_data_ini_phi('odr_on', ini_list, phi_list)
  df_code_on, end_point_on = get_code(df_on)
#+end_src

#+RESULTS:
:      trial  phi        m0        m1     phase
: 220      0    0  3.117125  1.949695  3.069643
: 221      1    0  3.094125  1.936536  3.100715
: 222      2    0  3.233500  2.139784  3.124378
: 223      3    0  3.128250  1.985270  3.131441
: 224      4    0  3.191500  2.044426  3.054118

*** Phases 
#+begin_src ipython
  import warnings

  # Ignore FutureWarning
  warnings.simplefilter(action='ignore', category=FutureWarning)

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(data=df_code, x='time', y=df_code['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], hue='phi', alpha=0.25)
  
  sns.lineplot(data=df_code_on, x='time', y=df_code_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], hue='phi', alpha=0.25)

  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\phi$ (Â°)')
  # ax[0].set_xticks([0, 1, 2, 3, 4, 5])
  ax[0].set_yticks([0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi, legend=False, ax=ax[1], bins=200, kde=False, stat='density')

  sns.histplot(data=end_point_on, x=end_point_on['phase']*180/np.pi, legend=False, ax=ax[1], bins=200, kde=False, stat='density')

  ax[1].set_xlabel('$\phi$ (Â°)')
  ax[1].set_ylabel('$Count$')
  ax[1].set_xticks([0, 90, 180, 270, 360])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/86697fdbce42d759abebe295d9932317cfdb1069.png]]

*** Endpoint Errors

#+begin_src ipython

  end_point['accuracy'] = (end_point.phase - end_point['phi'] / 180 * np.pi) % (2 * np.pi)
  end_point['precision'] = end_point.groupby('phi')['phase'].apply(get_precision)

  end_point_on['accuracy'] = (end_point_on.phase - end_point_on['phi'] / 180 * np.pi) % (2 * np.pi)
  end_point_on['precision'] = end_point_on.groupby('phi')['phase'].apply(get_precision)

  print(end_point.head())

#+end_src

#+RESULTS:
#+begin_example
        trial  phi        m0        m1     phase  accuracy  precision
  7200      0    0  3.409733  2.225020  0.170233  0.170233   0.059851
  7201      0    1  3.454667  2.237920  5.637768  5.620315   0.010080
  7202      0    2  3.400667  2.114004  4.709411  4.674505  -0.001375
  7203      0    3  3.325467  2.120749  3.815238  3.762878  -0.027849
  7204      0    4  3.396800  2.253675  3.118514  3.048701   0.001258
  /tmp/ipykernel_2026003/216822297.py:2: FutureWarning: Not prepending group keys to the result index of transform-like apply. In the future, the group keys will be included in the index, regardless of whether the applied function returns a like-indexed object.
  To preserve the previous behavior, use>
  
  
  
  >> .groupby(..., group_keys=False)

  To adopt the future behavior and silence this warning, use 

  	>>> .groupby(..., group_keys=True)
    end_point['precision'] = end_point.groupby('phi')['phase'].apply(get_precision)
  /tmp/ipykernel_2026003/216822297.py:5: FutureWarning: Not prepending group keys to the result index of transform-like apply. In the future, the group keys will be included in the index, regardless of whether the applied function returns a like-indexed object.
  To preserve the previous behavior, use

  	>>> .groupby(..., group_keys=False)

  To adopt the future behavior and silence this warning, use 

  	>>> .groupby(..., group_keys=True)
    end_point_on['precision'] = end_point_on.groupby('phi')['phase'].apply(get_precision)
#+end_example

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density')
  sns.histplot(data=end_point_on, x=end_point_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density')
  ax[0].set_xlabel('$\phi$(Â°)')
  ax[0].set_ylabel('Density')
  ax[0].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density')
  sns.histplot(data=end_point_on, x=end_point_on['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density')
  ax[1].set_xlabel('$\phi - \phi_{stim}$ (Â°)')
  ax[1].set_ylabel('Density')
  ax[1].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=False, stat='density', element='step', alpha=0)
  sns.histplot(data=end_point_on, x=end_point_on['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=False, stat='density', element='step', alpha=0.)
  ax[2].set_xlabel('$\phi - <\phi>_{trials}$ (Â°)')
  ax[2].set_ylabel('Density')
  ax[2].set_xlim([-10, 10])

  plt.show()  
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
  [0;31m---------------------------------------------------------------------------[0m
  [0;31mKeyError[0m                                  Traceback (most recent call last)
  File [0;32m~/mambaforge/envs/dual_data/lib/python3.8/site-packages/pandas/core/indexes/base.py:3802[0m, in [0;36mIndex.get_loc[0;34m(self, key, method, tolerance)[0m
  [1;32m   3801[0m [38;5;28;01mtry[39;00m:
  [0;32m-> 3802[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_engine[49m[38;5;241;43m.[39;49m[43mget_loc[49m[43m([49m[43mcasted_key[49m[43m)[49m
  [1;32m   3803[0m [38;5;28;01mexcept[39;00m [38;5;167;01mKeyError[39;00m [38;5;28;01mas[39;00m err:

  File [0;32m~/mambaforge/envs/dual_data/lib/python3.8/site-packages/pandas/_libs/index.pyx:138[0m, in [0;36mpandas._libs.index.IndexEngine.get_loc[0;34m()[0m

  File [0;32m~/mambaforge/envs/dual_data/lib/python3.8/site-packages/pandas/_libs/index.pyx:165[0m, in [0;36mpandas._libs.index.IndexEngine.get_loc[0;34m()[0m

  File [0;32mpandas/_libs/hashtable_class_helper.pxi:5745[0m, in [0;36mpandas._libs.hashtable.PyObjectHashTable.get_item[0;34m()[0m

  File [0;32mpandas/_libs/hashtable_class_helper.pxi:5753[0m, in [0;36mpandas._libs.hashtable.PyObjectHashTable.get_item[0;34m()[0m

  [0;31mKeyError[0m: 'accuracy'

  The above exception was the direct cause of the following exception:

  [0;31mKeyError[0m                                  Traceback (most recent call last)
  Cell [0;32mIn[20], line 9[0m
  [1;32m      6[0m ax[[38;5;241m0[39m][38;5;241m.[39mset_ylabel([38;5;124m'[39m[38;5;124mDensity[39m[38;5;124m'[39m)
  [1;32m      7[0m ax[[38;5;241m0[39m][38;5;241m.[39mset_xticks([[38;5;241m0[39m, [38;5;241m90[39m, [38;5;241m180[39m, [38;5;241m270[39m, [38;5;241m360[39m])
  [0;32m----> 9[0m sns[38;5;241m.[39mhistplot(data[38;5;241m=[39mend_point, x[38;5;241m=[39m[43mend_point[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43maccuracy[39;49m[38;5;124;43m'[39;49m[43m][49m[38;5;241m*[39m[38;5;241m180[39m[38;5;241m/[39mnp[38;5;241m.[39mpi, legend[38;5;241m=[39m[38;5;28;01mFalse[39;00m, lw[38;5;241m=[39m[38;5;241m2[39m, ax[38;5;241m=[39max[[38;5;241m1[39m], kde[38;5;241m=[39m[38;5;28;01mFalse[39;00m, bins[38;5;241m=[39m[38;5;241m200[39m, stat[38;5;241m=[39m[38;5;124m'[39m[38;5;124mdensity[39m[38;5;124m'[39m)
  [1;32m     10[0m sns[38;5;241m.[39mhistplot(data[38;5;241m=[39mend_point_on, x[38;5;241m=[39mend_point_on[[38;5;124m'[39m[38;5;124maccuracy[39m[38;5;124m'[39m][38;5;241m*[39m[38;5;241m180[39m[38;5;241m/[39mnp[38;5;241m.[39mpi, legend[38;5;241m=[39m[38;5;28;01mFalse[39;00m, lw[38;5;241m=[39m[38;5;241m2[39m, ax[38;5;241m=[39max[[38;5;241m1[39m], kde[38;5;241m=[39m[38;5;28;01mFalse[39;00m, bins[38;5;241m=[39m[38;5;241m200[39m, stat[38;5;241m=[39m[38;5;124m'[39m[38;5;124mdensity[39m[38;5;124m'[39m)
  [1;32m     11[0m ax[[38;5;241m1[39m][38;5;241m.[39mset_xlabel([38;5;124m'[39m[38;5;124m$[39m[38;5;124m\[39m[38;5;124mphi - [39m[38;5;124m\[39m[38;5;124mphi_[39m[38;5;132;01m{stim}[39;00m[38;5;124m$ (Â°)[39m[38;5;124m'[39m)

  File [0;32m~/mambaforge/envs/dual_data/lib/python3.8/site-packages/pandas/core/frame.py:3807[0m, in [0;36mDataFrame.__getitem__[0;34m(self, key)[0m
  [1;32m   3805[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mcolumns[38;5;241m.[39mnlevels [38;5;241m>[39m [38;5;241m1[39m:
  [1;32m   3806[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_getitem_multilevel(key)
  [0;32m-> 3807[0m indexer [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mcolumns[49m[38;5;241;43m.[39;49m[43mget_loc[49m[43m([49m[43mkey[49m[43m)[49m
  [1;32m   3808[0m [38;5;28;01mif[39;00m is_integer(indexer):
  [1;32m   3809[0m     indexer [38;5;241m=[39m [indexer]

  File [0;32m~/mambaforge/envs/dual_data/lib/python3.8/site-packages/pandas/core/indexes/base.py:3804[0m, in [0;36mIndex.get_loc[0;34m(self, key, method, tolerance)[0m
  [1;32m   3802[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_engine[38;5;241m.[39mget_loc(casted_key)
  [1;32m   3803[0m [38;5;28;01mexcept[39;00m [38;5;167;01mKeyError[39;00m [38;5;28;01mas[39;00m err:
  [0;32m-> 3804[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(key) [38;5;28;01mfrom[39;00m [38;5;21;01merr[39;00m
  [1;32m   3805[0m [38;5;28;01mexcept[39;00m [38;5;167;01mTypeError[39;00m:
  [1;32m   3806[0m     [38;5;66;03m# If we have a listlike key, _check_indexing_error will raise[39;00m
  [1;32m   3807[0m     [38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise[39;00m
  [1;32m   3808[0m     [38;5;66;03m#  the TypeError.[39;00m
  [1;32m   3809[0m     [38;5;28mself[39m[38;5;241m.[39m_check_indexing_error(key)

  [0;31mKeyError[0m: 'accuracy'
#+end_example
[[file:./.ob-jupyter/6435c83b6e7a0c27d2f2aae58aac5d24411f4556.png]]
:END:

#+begin_src ipython

#+end_src

#+RESULTS:
