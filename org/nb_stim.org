#+TITLE: Cholinergic neuromodulation of prefrontal attractor dynamics controls performance in spatial WM
#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual_data :kernel dual_data

* Settings
** autoreload
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload

# Out[1]:
** project root
#+begin_src ipython
  import os
  import sys

  sys.path.insert(0, '../')
  current_dir = os.path.dirname(os.path.abspath('__file__'))
  # Get parent directory (= the project root)
  project_root = os.path.join(current_dir, '..')
  # Append to system path
  sys.path.append(project_root)

  print("Python exe")
  print(sys.executable)

#+end_src

#+RESULTS:
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python
** imports and setting up matplotlib
#+begin_src ipython
  import numpy as np
  import matplotlib
  import matplotlib.pyplot as plt
  import seaborn as sns
  import pandas as pd
  import pickle as pkl

  sns.set_context("poster")
  sns.set_style("ticks")
  plt.rc("axes.spines", top=False, right=False)
  fig_path = '../figs/perf'
  golden_ratio = (5**.5 - 1) / 2
  width = 6
  height = width * golden_ratio

  matplotlib.rcParams['figure.figsize'] = [width, height]

  matplotlib.rcParams['lines.markersize'] = 5
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:

#+begin_src ipython
  print('a test figure')
  plt.figure()
  plt.plot([1,2,3,4], '-o')
  plt.xlabel('x')
  # plt.show()

  plt.figure()
  plt.plot([1,2,3,4], '-o')
  plt.xlabel('x')
  # plt.show()

  1+1

#+end_src

#+RESULTS:
:RESULTS:
: a test figure
: 2
[[file:./.ob-jupyter/9f2f984b132c293e11342d9f682c1e582f2cc013.png]]
[[file:./.ob-jupyter/9f2f984b132c293e11342d9f682c1e582f2cc013.png]]
:END:

* Continuous rate model
** imports
** Tuning
** Diffusivity
** Distraction
* Spiking network model
** imports
#+begin_src ipython
from run_model import run_cpp, update_conf
#+end_src

#+RESULTS:

** single trial
*** compile
#+begin_src sh
  cd ..
  make
#+end_src

#+RESULTS:
| g++ | -Wall | -lyaml-cpp   | -std=c++17       | -pthread          | -Ofast        | -s         | -c    | src/sparse_mat.cpp  | -o         | obj/sparse_mat.o  |
| g++ | -Wall | -lyaml-cpp   | -std=c++17       | -pthread          | -Ofast        | -s         | -c    | src/lif_network.cpp | -o         | obj/lif_network.o |
| g++ | -Wall | -lyaml-cpp   | -std=c++17       | -pthread          | -Ofast        | -s         | -c    | src/globals.cpp     | -o         | obj/globals.o     |
| g++ | -o    | ./bin/LifNet | obj/sparse_mat.o | obj/lif_network.o | obj/globals.o | obj/main.o | -Wall | -lyaml-cpp          | -std=c++17 | -pthread          |

*** run
#+begin_src ipython
  # pass screen session_name to run_cpp
  run_cpp('single_trial')
#+end_src

#+RESULTS:
*** results
#+begin_src ipython
  from yaml import safe_load
  config = safe_load(open("../conf/config_EI.yml", "r"))
  # print(config)

  time = (np.arange(config['T_STEADY'], config['DURATION'], config['T_WINDOW'])[1:] - config['T_STEADY']) / 1000.0
  print(time.shape)

#+end_src

#+RESULTS:
: (119,)

#+begin_src ipython

  # Open the file in binary mode and read the data
  with open('../data/simul/rates.txt', 'rb') as f:
      data = np.fromfile(f, dtype=np.float32)

  # Now 'data' is a numpy array containing your data
  data = data.reshape(-1, 40000).T
  print('data', data.shape)
  plt.imshow(data, aspect='auto', vmin=0, vmax=10, cmap='jet', extent=[0, 40, 0, data.shape[0]], origin='lower')
  # plt.xlim([0, data.shape[0]])

  print(np.mean(data[:30000]), np.mean(data[10000:]))

#+end_src

#+RESULTS:
:RESULTS:
: data (40000, 120)
: 1.35865 4.3643847
[[file:./.ob-jupyter/a0ade0e4569ccf08b67f3d94e063dc665b69d139.png]]
:END:

#+begin_src ipython
  from analysis.bump import decode_bump, circcvl

  times = time[:data.shape[1]]
  rates_E = data[:30000, 1:]
  print(rates_E.shape)
  m0, m1, phi = decode_bump(rates_E, axis=0)

  fig, ax = plt.subplots(1, 3, figsize=(2*width, height))
  ax[0].plot(times, m0)
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\mathcal{F}^0$')
  # ax[0].set_yticks([0, 1, ])
  ax[0].set_ylim([0, 5])

  ax[1].plot(times, m1/m0)
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('$\mathcal{F}^1 / \mathcal{F}^0$')
  ax[1].set_yticks([0, 0.5, 1, 1.5])
  # ax[1].set_ylim([0, 1])

  ax[2].plot(times, phi * 180 / np.pi)
  ax[2].set_xlabel('Time (s)')
  ax[2].set_ylabel('$\phi$')
  ax[2].set_yticks([0, 90, 180, 270, 360])
  plt.tight_layout()
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (30000, 119)
[[file:./.ob-jupyter/01b7d4f93141734b58bf095defac6c5d60ee489d.png]]
:END:

#+begin_src ipython
  smooth_E = circcvl(rates_E, windowSize=1500, axis=0)
  theta = np.linspace(0, 360, rates_E.shape[0])
  plt.plot(theta, smooth_E[:, -2])

  plt.xlabel('Prefered Location (Â°)')
  plt.ylabel('Rate (Hz)')
  plt.xticks([0, 90, 180, 270, 360]);

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/32909088814fe8f9bdf112c73ea03fe73df82c78.png]]


#+BEGIN_SRC ipython

#+END_SRC

#+RESULTS:

** Diffusion analysis
*** run
#+begin_src ipython

  phi_list = np.linspace(0, 2*np.pi, 8)
  init_list = np.arange(1, 10, 1)

  for init in init_list:
      for i_phi in range(len(phi_list)):
          phi = phi_list[i_phi]

          session = "phi_%d_init_%d" % (i_phi, init)
          data_path = '../data/simul/' + session
          update_conf('../conf/config_EI', 'DATA_PATH', data_path)
          update_conf('../conf/config_EI', 'PHI_STIM', float(phi), axis=0)

          run_cpp(session)


#+end_src
