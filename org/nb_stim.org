#+TITLE: Cholinergic neuromodulation of prefrontal attractor dynamics controls performance in spatial WM
#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual_data :kernel dual_data

* Settings
** autoreload
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload

# Out[1]:
** project root
#+begin_src ipython
  import os
  import sys

  sys.path.insert(0, '../')
  current_dir = os.path.dirname(os.path.abspath('__file__'))
  # Get parent directory (= the project root)
  project_root = os.path.join(current_dir, '..')
  # Append to system path
  sys.path.append(project_root)

  print("Python exe")
  print(sys.executable)

#+end_src

#+RESULTS:
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python
** imports and setting up matplotlib
#+begin_src ipython
  import numpy as np
  import matplotlib
  import matplotlib.pyplot as plt
  import seaborn as sns
  import pandas as pd
  import pickle as pkl

  sns.set_context("poster")
  sns.set_style("ticks")
  plt.rc("axes.spines", top=False, right=False)
  fig_path = '../figs/perf'
  golden_ratio = (5**.5 - 1) / 2
  width = 6
  height = width * golden_ratio

  matplotlib.rcParams['figure.figsize'] = [width, height]

  matplotlib.rcParams['lines.markersize'] = 5
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:

#+begin_src ipython
  print('a test figure')
  plt.figure()
  plt.plot([1,2,3,4], '-o')
  plt.xlabel('x')
  # plt.show()

  plt.figure()
  plt.plot([1,2,3,4], '-o')
  plt.xlabel('x')
  # plt.show()

  1+1

#+end_src

#+RESULTS:
:RESULTS:
: a test figure
: 2
[[file:./.ob-jupyter/9f2f984b132c293e11342d9f682c1e582f2cc013.png]]
[[file:./.ob-jupyter/9f2f984b132c293e11342d9f682c1e582f2cc013.png]]
:END:

* Continuous rate model
** imports
** Tuning
** Diffusivity
** Distraction
* Spiking network model
** imports
#+begin_src ipython
  from run_model import run_cpp, update_conf, restore_conf
  from time import sleep
#+end_src

#+RESULTS:

** single trial
*** compile
#+begin_src sh
  cd ..
  make
#+end_src

#+RESULTS:
| g++ | -Wall | -lyaml-cpp   | -std=c++17       | -pthread          | -Ofast        | -s         | -c    | src/sparse_mat.cpp  | -o         | obj/sparse_mat.o  |
| g++ | -Wall | -lyaml-cpp   | -std=c++17       | -pthread          | -Ofast        | -s         | -c    | src/lif_network.cpp | -o         | obj/lif_network.o |
| g++ | -Wall | -lyaml-cpp   | -std=c++17       | -pthread          | -Ofast        | -s         | -c    | src/globals.cpp     | -o         | obj/globals.o     |
| g++ | -o    | ./bin/LifNet | obj/sparse_mat.o | obj/lif_network.o | obj/globals.o | obj/main.o | -Wall | -lyaml-cpp          | -std=c++17 | -pthread          |

*** run
#+begin_src ipython
  # pass screen session_name to run_cpp
  run_cpp('single_trial')
#+end_src

#+RESULTS:
*** results
#+begin_src ipython
  from yaml import safe_load
  config = safe_load(open("../conf/config_EI.yml", "r"))
  
  times = np.arange(config['T_STEADY'], config['DURATION'], config['T_WINDOW'])[1:]
  times -= config['T_STEADY']
  times /= 1000.0

  print(times.shape)
#+end_src

#+RESULTS:
: (79,)

#+begin_src ipython
  def get_data(session='/'):
    # Open the file in binary mode and read the data
    with open('../data/simul'+ session + 'rates.txt', 'rb') as f:
      data = np.fromfile(f, dtype=np.float32)

    # Now 'data' is a numpy array containing your data
    return data.reshape(-1, 40000).T
 #+end_src

 #+RESULTS:


#+begin_src ipython
  data = get_data()
  print('data', data.shape)
  plt.imshow(data[:,1:], aspect='auto', vmin=0, vmax=10, cmap='jet', extent=[0, 40, 0, data.shape[0]], origin='lower')
  # plt.xlim([0, data.shape[0]])
  print(np.mean(data[:30000]), np.mean(data[10000:]))
#+end_src

#+RESULTS:
:RESULTS:
: data (40000, 60)
: 1.6208 5.2778134
[[file:./.ob-jupyter/3146b7254bf45150c1d512b0dec397c2fd36563c.png]]
:END:

#+begin_src ipython
  from analysis.bump import decode_bump, circcvl
  data = get_data()

  rates_E = data[:30000, :]
  print(rates_E.shape)
  m0, m1, phi = decode_bump(rates_E, axis=0)
  
  fig, ax = plt.subplots(1, 3, figsize=(2*width, height))
  ax[0].plot(times[:data.shape[1]], m0)
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\mathcal{F}^0$')
  # ax[0].set_yticks([0, 1, ])
  # ax[0].set_ylim([0, 5])

  ax[1].plot(times[:data.shape[1]], m1/m0)
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('$\mathcal{F}^1 / \mathcal{F}^0$')
  ax[1].set_yticks([0, 0.5, 1, 1.5])
  # ax[1].set_ylim([0, 1])

  ax[2].plot(times[:data.shape[1]], phi * 180 / np.pi)
  ax[2].set_xlabel('Time (s)')
  ax[2].set_ylabel('$\phi$')
  ax[2].set_yticks([0, 90, 180, 270, 360])
  plt.tight_layout()
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (30000, 60)
[[file:./.ob-jupyter/6838b27d765153694559120fba4d5919bc90a7ce.png]]
:END:

#+begin_src ipython
  smooth_E = circcvl(rates_E, windowSize=300, axis=0)
  theta = np.linspace(0, 360, rates_E.shape[0])
  plt.plot(theta, smooth_E[:, -2])

  plt.xlabel('Prefered Location (Â°)')
  plt.ylabel('Rate (Hz)')
  plt.xticks([0, 90, 180, 270, 360]);
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/c69d5016d3a7c0fada7116ad231826199fe2c693.png]]


#+BEGIN_SRC ipython

#+END_SRC

#+RESULTS:
** Phase space exploration
#+begin_src ipython
  Jee_list = np.arange(10, 20, 1)
  Ie_list = np.arange(5, 10, .5)
  
  for Jee in Jee_list:
      for Ie in Ie_list:

          session = "Ie_%.1f_Jee_%.1f" % (Ie, Jee) 
          data_path = '/home/leon/models/lif_cpp/data/simul/' + session
          update_conf('../conf/config_EI', 'DATA_PATH', data_path)
          update_conf('../conf/config_EI', 'Iext', float(Ie/1000.0), axis=0)
          update_conf('../conf/config_EI', 'Jab', float(Jee), axis=0)

          sleep(.2)
          run_cpp(session)
          sleep(.2)

  sleep(1)
  restore_conf('../conf/config_EI.yml')

#+end_src

#+RESULTS:
: File moved successfully!

*** analysis
#+begin_src ipython
  %matplotlib qt

  Jee_list = np.arange(15, 25, 1)
  Ie_list = np.arange(0, 5, .5)

  rates = []
  for Ie in Ie_list[:-1]:
      ini = []
      for Jee in Jee_list:

          session = "/Ie_%.1f_Jee_%.1f/" % (Ie, Jee)
          try:
              r = get_data(session)
              m0, m1, phi = decode_bump(r[:30000], axis=0)
              print(session)
              plt.plot(m1)
              input()
              ini.append(m0)
          except:
              pass
      rates.append(np.array(ini))


#+end_src

#+RESULTS:
: 1d4f77f8-7146-4201-9764-c19d4c81d515

#+begin_src ipython
  print(Ie_list)
  print(Jee_list)
  rates = np.array(rates)
  print(rates.shape)
  plt.imshow(rates[:,:, -1].T, aspect='auto', vmin=0, vmax=5, cmap='jet', origin='lower')
#+end_src

#+RESULTS:
:RESULTS:
: [0.  0.5 1.  1.5 2.  2.5 3.  3.5 4.  4.5]
: [15 16 17 18 19 20 21 22 23 24]
: (9, 10, 79)
: <matplotlib.image.AxesImage at 0x7f0c3ba1d5e0>
[[file:./.ob-jupyter/bb9187f27f5dd100af5fc4e05fe8797e0928d9ac.png]]
:END:

#+begin_src ipython
  plt.plot(rates[-2, 4])
  plt.show()
  print(Ie_list[-2], Jee_list[4])
  print(Ie_list[4], Jee_list[-2])
  
#+end_src
#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/e328553a8f6548fc32bd4a3a3e1a0e282ca6ec62.png]]
: 4.0 19
: 2.0 23
:END:

** Diffusion analysis
*** run
#+begin_src ipython
  phi_list = np.linspace(0, 315, 8)
  init_list = np.arange(1, 11, 1)

  for init in init_list:
      for i_phi in range(len(phi_list)):
          phi = phi_list[i_phi]

          session = "phi_%d_init_%d" % (phi, init)
          data_path = '/home/leon/models/lif_cpp/data/simul/' + session
          update_conf('../conf/config_EI', 'DATA_PATH', data_path)
          update_conf('../conf/config_EI', 'PHI_STIM', float(phi), axis=0)

          run_cpp(session)
          sleep(.2)

  sleep(1)
  restore_conf('../conf/config_EI.yml')

#+end_src

#+RESULTS:
: File moved successfully!

*** analysis

#+begin_src ipython
  phi_list = np.linspace(45, 315, 7)
  init_list = np.arange(1, 11, 1)

  rates = []
  for i_phi in range(len(phi_list)):
      phi = phi_list[i_phi]
      ini = []
      for init in init_list:
          session = "/nb_on/phi_%d_init_%d/" % (phi, init)
          try:
              r = get_data(session)              
              ini.append(r)
          except:
              pass
      rates.append(np.array(ini))
#+end_src

#+RESULTS:

#+begin_src ipython
  phases = []
  for i_phi in range(len(phi_list)):
      ini = []
      for init in range(len(init_list)):
          rates_E = rates[i_phi][init][:30000, :]
          m0, m1, phi = decode_bump(rates_E, axis=0)
          ini.append(phi)
          plt.plot(times, phi * 180 / np.pi, alpha=0.25)
      phases.append(ini)

  plt.xlabel('Time (s)')
  plt.ylabel('$\phi$')
  plt.yticks([0, 90, 180, 270, 360])
  plt.show()

  phases = np.array(phases)

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/aa5d29e5fbfbf764f53362cbd0a11f3ea90a9a12.png]]

#+begin_src ipython
  from scipy.stats import circmean
  print(phases.shape)
  cmean = np.mean(phases, axis=1)
  dtheta = np.vstack(phases - cmean[:,np.newaxis,:]).T * 180 / np.pi
  # dtheta = np.vstack(phases).T * 180 / np.pi
  print(dtheta.shape)
  plt.hist(dtheta[-1], bins='auto')
  plt.xlim([-20, 20])
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (7, 10, 79)
: (79, 70)
[[file:./.ob-jupyter/ff4fcb8492b7104b9b29a5a462588c8c01270e68.png]]
:END:
