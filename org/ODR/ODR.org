#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session odr :kernel dual_data

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/models/lif_cpp/notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

* Compilation
#+begin_src sh
  cd $HOME/models/lif_cpp
  make clean
  make 
#+end_src

#+RESULTS:
| rm  | -rf   | ./obj/*.o    | ./bin/LifNet  |                   |               |                  |                  |             |                      |                           |               |                |                     |             |                      |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/globals.cpp     | -o          | obj/globals.o        |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/lif_network.cpp | -o          | obj/lif_network.o    |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/main.cpp        | -o          | obj/main.o           |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/sparse_mat.cpp  | -o          | obj/sparse_mat.o     |                           |            |
| g++ | -o    | ./bin/LifNet | obj/globals.o | obj/lif_network.o | obj/main.o    | obj/sparse_mat.o | -Wall            | -std=c++17  | -Ofast               | -s                        | -march=native | -funroll-loops | -ftree-vectorize    | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp |

* Imports

#+begin_src ipython
  import warnings
  # Ignore FutureWarning
  warnings.simplefilter(action='ignore', category=FutureWarning)
  
  import sys
  sys.path.insert(0, '/home/leon/models/lif_cpp')  
  REPO_PATH = "/home/leon/models/lif_cpp"

  import subprocess
  import pandas as pd
  from time import sleep
  from yaml import safe_load
  from scipy.stats import circmean
  from run_model import run_cpp, update_conf, restore_conf
  from analysis.decode import decode_bump, circcvl  
#+end_src

#+RESULTS:

* Helpers

#+begin_src ipython
  from joblib import Parallel, delayed
  import numpy as np

  def work(name, X_str, ini, phi, X):
      try:
          session = "/%s_%s_%.2f_phi_%d_ini_%d/" % (name, X_str, X, phi, ini)
          rate = get_data(session)
          return rate[:32000, -1]
      except:
          return None

  def get_rates_X_parallel(name, X_list, ini_list, phi_list, X_str='Jee', n_jobs=-1):
      # Create a parallel instance using n_jobs
      parallel = Parallel(n_jobs=n_jobs)

      # Use delayed to set up a list of tasks
      tasks = (delayed(work)(name, X_str, ini, phi, X) for ini in ini_list for phi in phi_list for X in X_list)

      # Execute the tasks in parallel
      rates_data = parallel(tasks)

      # Removing None values resulted from exceptions and build the rates array
      # rates_data = list(filter(None, rates_data))
      rates = np.array(rates_data)
      print(rates.shape)
      rates = rates.reshape(len(ini_list), len(phi_list), len(X_list), 32000, -1)
      return rates
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_data(session='/'):
    # Open the file in binary mode and read the data
    with open('/home/leon/models/lif_cpp/data/simul/'+ session + '/rates.txt', 'rb') as f:
      data = np.fromfile(f, dtype=np.float32)
    # Now 'data' is a numpy array containing your data
    return data.reshape(-1, 40000).T
 #+end_src

#+RESULTS:

#+begin_src ipython
  def get_rates_X(name, X_list, ini_list, phi_list, X_str='Jee'):
     rates = []
     for ini in ini_list:
        for phi in phi_list:
           for X in X_list:
              try:
                 session = "/%s_%s_%.2f_phi_%d_ini_%d/" % (name, X_str, X, phi, ini)
                 rate = get_data(session)
                 rates.append(rate[:32000])
              except:
                 pass
              
     rates = np.array(rates)
     rates = rates.reshape(len(ini_list), len(phi_list), len(X_list), 32000, -1)
     return rates
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_ini_X(rates, X_list, X_str='Jee'):
      n_trials, n_phi, n_X, n_neurons, n_times = rates.shape

      # Create indices
      # trials_ind, phi_ind, X_ind, neurons_ind, times_ind = np.indices((n_trials, n_phi, n_X, n_neurons, n_times))

      trials_ind, phi_ind, X_ind, neurons_ind, times_ind = np.meshgrid(
          np.arange(n_trials),
          np.arange(n_phi),
          np.arange(n_X),
          np.arange(n_neurons),
          np.arange(n_times),
          indexing='ij'
      )
      
      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          X_str : X_ind.flatten() * (X_list[-1] - X_list[0]) / (X_list.shape[0] -1)+ X_list[0],
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten() * 0.05,
          'rates': rates.flatten()
      })

      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data(name, X_list, ini_list, phi_list, X_str='Jee'):
      rates = get_rates_X_parallel(name, X_list, ini_list, phi_list, X_str)
      print(rates.shape)
      df = get_df_ini_X(rates, X_list, X_str)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_code(df, X_str='Jee'):
      df_code = df.groupby(['time', 'trial', 'phi', X_str])['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code = df_code.drop(columns=['rates'])
      
      end_point = df_code[df_code.time==df_code.time.iloc[-1]]
      end_point = end_point.drop(columns=['time'])
      print(end_point.head())  
      return df_code, end_point 
#+end_src

#+RESULTS:

#+begin_src ipython
  def run_loop_Ie(conf_name, name, Ie_list, ini_list, phi_list):
      restore_conf(REPO_PATH + '/conf/' + conf_name + '.yml',
                   REPO_PATH + '/conf/' + conf_name + '.yml.bak')

      conf_path = REPO_PATH + '/conf/'+ conf_name + '.yml'

      for ini in ini_list:
          for phi in phi_list:
              for Ie in Ie_list:
                  session = "%s_Ie_%.2f_phi_%d_ini_%d" % (name, Ie, phi, ini)
                  data_path = REPO_PATH + '/data/simul/' + session
                  update_conf(REPO_PATH + '/conf/'+ conf_name, 'DATA_PATH', data_path)
                  update_conf(REPO_PATH + '/conf/' + conf_name, 'Iext', float(Ie/1000.0), axis=0)
                  update_conf(REPO_PATH + '/conf/' + conf_name, 'PHI_STIM', float(phi), axis=0)

                  sleep(.2)
                  run_cpp(session, conf_path=conf_path)
                  sleep(.2)

                  subprocess.run([REPO_PATH + '/src/mem_usage.sh'])
                  subprocess.run([REPO_PATH + '/src/cpu_usage.sh'])

      restore_conf(REPO_PATH + '/conf/' + conf_name + '.yml.bak',
                   REPO_PATH + '/conf/' + conf_name + '.yml')
#+end_src

#+RESULTS:

#+begin_src ipython
  def run_loop_X(conf_name, name, X_str, X_list, ini_list, phi_list, axis=0):
      restore_conf(REPO_PATH + '/conf/' + conf_name + '.yml',
                   REPO_PATH + '/conf/' + conf_name + '.yml.bak')

      conf_path = REPO_PATH + '/conf/'+ conf_name + '.yml'

      for ini in ini_list:
          for phi in phi_list:
              for X in X_list:
                  session = "%s_%s_%.2f_phi_%d_ini_%d" % (name, X_str, X, phi, ini)
                  data_path = REPO_PATH + '/data/simul/' + session
                  update_conf(REPO_PATH + '/conf/'+ conf_name, 'DATA_PATH', data_path)
                  update_conf(REPO_PATH + '/conf/' + conf_name, X_str, float(X), axis=axis)
                  update_conf(REPO_PATH + '/conf/' + conf_name, 'PHI_STIM', float(phi), axis=0)
                  
                  sleep(.2)
                  run_cpp(session, conf_path=conf_path)
                  sleep(.2)

                  subprocess.run([REPO_PATH + '/src/mem_usage.sh'])
                  subprocess.run([REPO_PATH + '/src/cpu_usage.sh'])

      restore_conf(REPO_PATH + '/conf/' + conf_name + '.yml.bak',
                   REPO_PATH + '/conf/' + conf_name + '.yml')
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_precision(x):

      cmean =  (x - circmean(x, low=-np.pi, high=np.pi)) % (2* np.pi) - np.pi

      cmean[cmean > np.pi/2] -= np.pi
      cmean[cmean < -np.pi/2] += np.pi
      
      return cmean
#+end_src

#+RESULTS:

* Phase Space
*** Varying M0
**** Parameters

#+begin_src ipython
50 * 8
#+end_src

#+RESULTS:
: 400

#+begin_src ipython
  name = 'odr'
  conf_name = 'config_ODR'
  M0_list = np.linspace(0.5, 1.5, 21)
  print(M0_list)
  ini_list = np.arange(0, 30)
  phi_list = np.linspace(0, 315, 8)
  # phi_list = [180]
#+end_src

#+RESULTS:
: [0.5  0.55 0.6  0.65 0.7  0.75 0.8  0.85 0.9  0.95 1.   1.05 1.1  1.15
:  1.2  1.25 1.3  1.35 1.4  1.45 1.5 ]

**** Simulation

#+begin_src ipython
  config = safe_load(open("/home/leon/models/lif_cpp/conf/config_ODR.yml", "r"))

  Iext = np.array(config['Iext'])
  Jab = np.array(config['Jab'])

  BALANCE = ((Iext[0] / Jab[0]) / (Iext[1] / Jab[2])) > ((Jab[1] / Jab[0]) / (Jab[3] / Jab[2]))
  print('Balance', BALANCE)

  BALANCE = (Iext[0] / Iext[1]) > (Jab[1] / Jab[3])
  print(BALANCE)

  rates = -np.dot(np.linalg.inv(Jab.reshape((2 ,2))), Iext)
  print('rates', rates)

  J = Jab[1] * Jab[2] / (Jab[0] * Jab[3])
  Q = (Jab[3] * Jab[1] * Iext[0] - Iext[1]) / Jab[2]

  print('stp G', J)
  print('stp Q', Q)
#+end_src

#+RESULTS:
: Balance True
: True
: rates [-0.16313933  0.76268861]
: stp G 0.09999999999999999
: stp Q 3.818253968253968

#+begin_src ipython
  run_loop_X(conf_name, name, 'M0', M0_list, ini_list, phi_list, axis=None)
#+end_src

#+RESULTS:
: File moved successfully!

**** Analysis
***** Load Data

#+begin_src ipython
  df = load_data(name, M0_list, ini_list, phi_list, 'M0')
  df_code, end_point = get_df_code(df, 'M0')

  end_point['accuracy'] = (end_point.phase - end_point['phi'] / 180 * np.pi) % (2 * np.pi)
  end_point['precision'] = end_point.groupby(['phi', 'M0'], group_keys=False)['phase'].apply(get_precision)
  
  df_smooth = df.groupby(['time', 'trial', 'phi', 'M0'])['rates'].apply(circcvl).reset_index()

#+end_src

#+RESULTS:
: (5040, 32000)
: (30, 8, 21, 32000, 1)
:    trial  phi    M0        m0        m1     phase
: 0      0    0  0.50  0.136375  0.013675  6.233314
: 1      0    0  0.55  0.189250  0.019984  0.455509
: 2      0    0  0.60  0.233500  0.023771  0.200822
: 3      0    0  0.65  0.293500  0.014075  6.128433
: 4      0    0  0.70  0.355375  0.036817  6.254847

***** Tuning Profile

#+begin_src ipython
  idx_off = np.round(M0_list[15],3)
  idx_on = M0_list[17]
  print('parameters', idx_off, idx_on)
#+end_src

#+RESULTS:
: parameters 1.25 1.35

#+begin_src ipython
  N_E = 32000

  df_point = end_point[end_point.M0==idx_off]
  df_point_on = end_point[end_point.M0==idx_on]

  fig, ax = plt.subplots(1, 3, figsize=[2.25*width, height])

  sns.lineplot(end_point, x='M0', y='m0', ax=ax[0], legend=False, marker='o', lw=0, hue='trial')
  ax[0].set_xlabel('FF Input')
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')

  sns.lineplot(end_point, x='M0', y=end_point['m1']/end_point['m0'], ax=ax[1], legend=False, marker='o', color='k')
  sns.lineplot(end_point, x=idx_off, y=df_point['m1']/ df_point['m0'], ax=ax[1], legend=False, marker='o', ms=10, color='b') 
  sns.lineplot(end_point, x=idx_on, y=df_point_on['m1'] / df_point_on['m0'], ax=ax[1], legend=False, marker='o', ms=10, color='r')

  ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[1].set_xlabel('FF Input (Hz)')
  # ax[0].set_ylim([0.4, 1])


  point = df_smooth[df_smooth.M0==idx_off].reset_index() 
  m0, m1, phase = decode_bump(point.rates[0])
  point = np.roll(point.rates[0], int(( phase / 2.0 / np.pi - 0.5) * point.rates[0].shape[0]))

  point_on = df_smooth[df_smooth.M0==idx_on].reset_index()  
  m0, m1, phase = decode_bump(point_on.rates[0])
  point_on = np.roll(point_on.rates[0], int((phase / 2.0 / np.pi - 0.5) * point_on.rates[0].shape[0]))

  ax[2].plot(point, color='b')
  ax[2].plot(point_on, color='r')

  ax[2].set_xticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[2].set_ylabel('Firing Rate (Hz)')
  ax[2].set_xlabel('Pref. Location (°)')

  plt.savefig(name + '_tuning.svg', dpi=300)

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/05c3722f055cd72bce01629adbbc7051cde6ddf5.png]]

***** Diffusion

#+begin_src ipython
  point = end_point[end_point.M0==idx_off]
  point_on = end_point[end_point.M0==idx_on]

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='M0', y=end_point.precision.abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0])

  sns.lineplot(x=idx_off, y=point['precision'].abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color='b')
  sns.lineplot(x=idx_on, y=point_on['precision'].abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color='r')

  ax[0].set_xlabel('FF Input (Hz)')
  ax[0].set_ylabel('Diffusivity (°)')

  ax1 = ax[0].twinx()
  sns.lineplot(end_point, x='M0', y=end_point['m1']/end_point['m0'], ax=ax1, legend=False, ls='--', color='k', alpha=0.5, marker='o')

  sns.lineplot(end_point, x=idx_off, y=point['m1']/point['m0'], legend=False, marker='o', ax=ax1, ms=10, color='b')
  sns.lineplot(end_point, x=idx_on, y=point_on['m1']/point_on['m0'], legend=False, marker='o', ax=ax1, ms=10, color='r')

  ax1.set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax1.spines['right'].set_visible(True)

  bins = 'auto'
  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0,color = 'b')
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0., color='r')
  ax[1].set_xlabel('Angular Deviation (°)')
  ax[1].set_ylabel('Density')
  ax[1].set_xlim([-20, 20])

  plt.savefig(name + '_diffusion.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/21f777cdea8906894092355ae3f26b201cedd066.png]]

#+begin_src ipython
  idx_off = Ie_list[3]
  idx_on = Ie_list[6]

  print(idx_off, idx_on)
  point = end_point[end_point.Ie==idx_off]
  point_on = end_point[end_point.Ie==idx_on]
#+end_src

#+RESULTS:
: 1.95 2.4

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  sns.histplot(data=point, x=point['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density', color='b', alpha=0, element='step')
  sns.histplot(data=point_on, x=point_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density', color='r', alpha=0, element='step')
  ax[0].set_xlabel('$\phi$(°)')
  ax[0].set_ylabel('Density')
  ax[0].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=point, x=point['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density', color='b')
  sns.histplot(data=point_on, x=point_on['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density', color='r')
  ax[1].set_xlabel('$\phi - \phi_{stim}$ (°)')
  ax[1].set_ylabel('Density')
  ax[1].set_xticks([0, 90, 180, 270, 360])

  bins = 8
  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[2], bins=bins, kde=True, stat='density', element='step', alpha=0,color = 'b')
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[2], bins=bins, kde=True, stat='density', element='step', alpha=0., color='r')
  ax[2].set_xlabel('$\phi - <\phi>_{trials}$ (°)')
  ax[2].set_ylabel('Density')
  # ax[2].set_xlim([-20, 20])

  plt.show()  
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/be8fcf6e4dc351c3b42667538300c5fac5b9c03f.png]]

*** Varying Ie
**** Parameters

#+begin_src ipython
  name = 'odr'
  conf_name = 'config_ODR'
  Ie_list = np.linspace(1.5, 3., 11)
  print(Ie_list)
  ini_list = np.arange(0, 10)
  phi_list = np.linspace(0, 315, 8)
  # phi_list = [180]
#+end_src

#+RESULTS:
: [1.5  1.65 1.8  1.95 2.1  2.25 2.4  2.55 2.7  2.85 3.  ]

**** Simulation

#+begin_src ipython
  config = safe_load(open("/home/leon/models/lif_cpp/conf/config_ODR.yml", "r"))

  Iext = np.array(config['Iext'])  
  Jab = np.array(config['Jab'])

  BALANCE = ((Iext[0] / Jab[0]) / (Iext[1] / Jab[2])) > ((Jab[1] / Jab[0]) / (Jab[3] / Jab[2]))
  print('Balance', BALANCE)

  BALANCE = (Iext[0] / Iext[1]) > (Jab[1] / Jab[3])
  print(BALANCE)

  rates = -np.dot(np.linalg.inv(Jab.reshape((2 ,2))), Iext)
  print('rates', rates)

  J = Jab[1] * Jab[2] / (Jab[0] * Jab[3])
  Q = (Jab[3] * Jab[1] * Iext[0] - Iext[1]) / Jab[2]

  print('stp G', J)
  print('stp Q', Q)
#+end_src

#+RESULTS:
: Balance True
: True
: rates [-0.0001466   0.00077298]
: stp G 0.09999999999999999
: stp Q 0.003547048611111112

#+begin_src ipython
  run_loop_Ie(conf_name, name, Ie_list, ini_list, phi_list)
#+end_src

#+RESULTS:

**** Analysis
***** Load Data

#+begin_src ipython
  df = load_data(name, Ie_list, ini_list, phi_list, 'Ie')
  df_code, end_point = get_df_code(df, 'Ie')

  end_point['accuracy'] = (end_point.phase - end_point['phi'] / 180 * np.pi) % (2 * np.pi)
  end_point['precision'] = end_point.groupby(['phi', 'Ie'], group_keys=False)['phase'].apply(get_precision)

  df_smooth = df.groupby(['time', 'trial', 'phi', 'Ie'])['rates'].apply(circcvl).reset_index()

#+end_src

#+RESULTS:
: (880, 32000)
: (10, 8, 11, 32000, 1)
:    trial  phi    Ie        m0        m1     phase
: 0      0    0  1.50  0.050125  0.000760  4.243557
: 1      0    0  1.65  0.107875  0.004333  0.804243
: 2      0    0  1.80  0.192500  0.021356  6.033647
: 3      0    0  1.95  0.308375  0.026665  0.343202
: 4      0    0  2.10  0.495125  0.050246  0.239546

***** Tuning Profile

#+begin_src ipython
  idx_off = Ie_list[6]
  idx_on = Ie_list[8]
  print('parameters', idx_off, idx_on)
#+end_src

#+RESULTS:
: parameters 2.4 2.7

#+begin_src ipython
2.7/2.4
#+end_src

#+RESULTS:
: 1.1250000000000002

#+begin_src ipython
  N_E = 32000

  df_point = end_point[end_point.Ie==idx_off]
  df_point_on = end_point[end_point.Ie==idx_on]

  fig, ax = plt.subplots(1, 3, figsize=[2.25*width, height])

  sns.lineplot(end_point, x='Ie', y='m0', ax=ax[0], legend=False, marker='o', lw=0, hue='trial')
  ax[0].set_xlabel('FF Input')
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')

  sns.lineplot(end_point, x='Ie', y=end_point['m1']/end_point['m0'], ax=ax[1], legend=False, marker='o', color='k')
  sns.lineplot(end_point, x=idx_off, y=df_point['m1']/ df_point['m0'], ax=ax[1], legend=False, marker='o', ms=10, color='b') 
  sns.lineplot(end_point, x=idx_on, y=df_point_on['m1'] / df_point_on['m0'], ax=ax[1], legend=False, marker='o', ms=10, color='r')

  ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[1].set_xlabel('FF Input (Hz)')
  # ax[0].set_ylim([0.4, 1])

  point = df_smooth[df_smooth.Ie==idx_off].reset_index()
  m0, m1, phase = decode_bump(point.rates[4])
  point = np.roll(point.rates[4], int(( phase / 2.0 / np.pi - 0.5) * point.rates[4].shape[0]))

  point_on = df_smooth[df_smooth.Ie==idx_on].reset_index()  
  m0, m1, phase = decode_bump(point_on.rates[4])
  point_on = np.roll(point_on.rates[4], int((phase / 2.0 / np.pi - 0.5) * point_on.rates[4].shape[0]))

  ax[2].plot(point, color='b')
  ax[2].plot(point_on, color='r')

  ax[2].set_xticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[2].set_ylabel('Firing Rate (Hz)')
  ax[2].set_xlabel('Pref. Location (°)')

  plt.savefig(name + '_tuning.svg', dpi=300)

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/740ee53453f3ca6c8f809ef7ac20d54066459601.png]]

***** Diffusion

#+begin_src ipython
  point = end_point[end_point.Ie==idx_off]
  point_on = end_point[end_point.Ie==idx_on]

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='Ie', y=end_point.precision.abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0])

  sns.lineplot(x=idx_off, y=point['precision'].abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color='b')
  sns.lineplot(x=idx_on, y=point_on['precision'].abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color='r')

  ax[0].set_xlabel('FF Input (Hz)')
  ax[0].set_ylabel('Diffusivity (°)')

  ax1 = ax[0].twinx()
  sns.lineplot(end_point, x='Ie', y=end_point['m1']/end_point['m0'], ax=ax1, legend=False, ls='--', color='k', alpha=0.5, marker='o')

  sns.lineplot(end_point, x=idx_off, y=point['m1']/point['m0'], legend=False, marker='o', ax=ax1, ms=10, color='b')
  sns.lineplot(end_point, x=idx_on, y=point_on['m1']/point_on['m0'], legend=False, marker='o', ax=ax1, ms=10, color='r')

  ax1.set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax1.spines['right'].set_visible(True)

  bins = 'auto'
  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0,color = 'b')
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0., color='r')
  ax[1].set_xlabel('Angular Deviation (°)')
  ax[1].set_ylabel('Density')
  # ax[1].set_xlim([-20, 20])

  plt.savefig(name + '_diffusion.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e5dc31cada4779fa1d19aafae3595d0d3a76b4cc.png]]

#+begin_src ipython
  idx_off = Ie_list[3]
  idx_on = Ie_list[6]

  print(idx_off, idx_on)
  point = end_point[end_point.Ie==idx_off]
  point_on = end_point[end_point.Ie==idx_on]
#+end_src

#+RESULTS:
: 1.95 2.4

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  sns.histplot(data=point, x=point['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density', color='b', alpha=0, element='step')
  sns.histplot(data=point_on, x=point_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density', color='r', alpha=0, element='step')
  ax[0].set_xlabel('$\phi$(°)')
  ax[0].set_ylabel('Density')
  ax[0].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=point, x=point['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density', color='b')
  sns.histplot(data=point_on, x=point_on['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density', color='r')
  ax[1].set_xlabel('$\phi - \phi_{stim}$ (°)')
  ax[1].set_ylabel('Density')
  ax[1].set_xticks([0, 90, 180, 270, 360])

  bins = 8
  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[2], bins=bins, kde=True, stat='density', element='step', alpha=0,color = 'b')
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[2], bins=bins, kde=True, stat='density', element='step', alpha=0., color='r')
  ax[2].set_xlabel('$\phi - <\phi>_{trials}$ (°)')
  ax[2].set_ylabel('Density')
  # ax[2].set_xlim([-20, 20])

  plt.show()  
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/be8fcf6e4dc351c3b42667538300c5fac5b9c03f.png]]

*** Varying Jee
**** Parameters

#+begin_src ipython
  Jee_list = np.linspace(7, 10, 11)
  ini_list = np.arange(0, 10)
  phi_list = np.linspace(0, 315, 8)
  # phi_list = [180]
#+end_src

#+RESULTS:

**** Simulation

#+begin_src ipython
  def run_loop_Jee(name, Jee_list, ini_list, phi_list):

      for ini in ini_list:
          for phi in phi_list:
              for Jee in Jee_list:
                  session = "%s_Jee_%.2f_phi_%d_ini_%d" % (name, Jee, phi, ini)
                  data_path = REPO_PATH + '/data/simul/' + session
                  update_conf(REPO_PATH + '/conf/config_ODR', 'DATA_PATH', data_path)
                  update_conf(REPO_PATH + '/conf/config_ODR', 'Jab', float(Jee), axis=0)
                  update_conf(REPO_PATH + '/conf/config_ODR', 'PHI_STIM', float(phi), axis=0)

                  sleep(.2)
                  run_cpp(session)
                  sleep(.2)
                  
                  subprocess.run([REPO_PATH + '/src/mem_usage.sh'])
                  subprocess.run([REPO_PATH + '/src/cpu_usage.sh'])

      restore_conf(REPO_PATH + '/conf/config_EI.yml')
#+end_src

#+RESULTS:

#+begin_src ipython
  name = 'EI'
  run_loop_Jee(name, Jee_list, ini_list, phi_list)
#+end_src

#+RESULTS:
: File moved successfully!

**** Analysis
***** Load Data

#+begin_src ipython
  df = load_data(name, Jee_list, ini_list, phi_list, 'Jee')
  print(df.head())
#+end_src

#+RESULTS:
:    trial  phi  Jee  neuron  time  rates
: 0      0    0    0       0     0    4.0
: 1      0    0    0       0     1    4.0
: 2      0    0    0       0     2    4.0
: 3      0    0    0       0     3    8.0
: 4      0    0    0       0     4    0.0

#+begin_src ipython
  df_code, end_point = get_df_code(df, 'Jee')
#+end_src

#+RESULTS:
:        trial  phi  Jee        m0        m1     phase
: 11660      0    0    0  0.263600  0.004021  3.766620
: 11661      0    0    1  0.265333  0.007139  1.962238
: 11662      0    0    2  0.270000  0.009053  2.494349
: 11663      0    0    3  0.286533  0.010270  4.420489
: 11664      0    0    4  0.290133  0.005266  1.065609

***** Plot Data

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  # sns.lineplot(end_point, x='Jee', y='m0', ax=ax[0], legend=False, marker='o')
  sns.lineplot(end_point, x='Jee', y='m0', ax=ax[0], legend=False, marker='o', lw=0, hue='trial')
  ax[0].set_xlabel('$J_{EE}$')
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
  ax[0].set_xticks(np.linspace(0, len(Jee_list), 5), np.round(np.linspace(Jee_list[0], Jee_list[-1], 5), 2))

  # sns.lineplot(end_point, x='Jee', y=end_point['m1'], ax=ax[1], legend=False)
  # ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')

  sns.lineplot(end_point, x='Jee', y=end_point['m1']/end_point['m0'], ax=ax[1], legend=False, marker='o', hue='trial', lw=0)
  ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[1].set_xlabel('$J_{EE}$')
  ax[1].set_xticks(np.linspace(0, len(Jee_list)-1, 5), np.round(np.linspace(Jee_list[0], Jee_list[-1], 5), 2))

  plt.show()
#+end_src
#+RESULTS:
[[file:./.ob-jupyter/5eb1062945926247a0beb44f68930237a2bcc88e.png]]

#+begin_src ipython

#+end_src

#+RESULTS:


#+begin_src ipython
  df_smooth = df.groupby(['time', 'trial', 'phi', 'Jee'])['rates'].apply(circcvl).reset_index()
#+end_src

#+RESULTS:

#+begin_src ipython
  endpoint = df_smooth[df_smooth.time==df_smooth.time.iloc[-1]]
  endpoint = endpoint.drop(columns=['time']).reset_index()
#+end_src

#+RESULTS:

#+begin_src ipython
  end0 = endpoint[endpoint.Jee==3].reset_index()
  end1 = endpoint[endpoint.Jee==4].reset_index()

  plt.plot(end0.rates[4])
  plt.plot(end1.rates[4])
  plt.show()
#+end_src

