#+STARTUP: fold
#+TITLE: Low Rank
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session multi_lr :kernel dual_data

* Notebook Settings
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/models/lif_cpp/notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

* Imports
#+begin_src ipython
  import sys
  sys.path.insert(0, '/home/leon/models/lif_cpp')  
  REPO_PATH = "/home/leon/models/lif_cpp"

  import subprocess
  import pandas as pd
  from time import sleep
  from yaml import safe_load
  from scipy.stats import circmean
  from joblib import Parallel, delayed

  from run_model import run_cpp, update_conf, restore_conf
  from analysis.decode import decode_bump, circcvl  
#+end_src

#+RESULTS:

* Helpers
#+begin_src ipython
  def get_precision(x):
      return x - circmean(x)
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_data(session='/'):
    # Open the file in binary mode and read the data
    with open('/home/leon/models/lif_cpp/data/simul/'+ session + '/rates.txt', 'rb') as f:
      data = np.fromfile(f, dtype=np.float32)
    # Now 'data' is a numpy array containing your data
    data = data.reshape(-1, 40000).T    
    return data
 #+end_src
 
 #+RESULTS:
 
Low rank
#+begin_src ipython
  def get_index():
      ksi_1 = np.fromfile('../data/matrix/ksi_1.txt', dtype=np.float32)
      ksi_2 = np.fromfile('../data/matrix/ksi_2.txt', dtype=np.float32)
      
      theta = np.arctan2(ksi_2 / np.linalg.norm(ksi_2), ksi_1 / np.linalg.norm(ksi_1))
      theta = gram_schmidt(ksi_1, ksi_2)

      index_order = theta.argsort()

      return index_order
#+end_src

#+RESULTS:

#+begin_src ipython
  def gram_schmidt(a, b):
      e1 = a / np.linalg.norm(a)
      v = b - np.dot(b, e1) * e1      
      # Normalize the vectors (make them unit vectors)
      # e1 = u / np.linalg.norm(u)
      e2 = v / np.linalg.norm(v)

      theta = np.arctan2(e2, e1)
      return theta
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_rate(name, ini, phi):
       session = "/%s_phi_%d_ini_%d/" % (name, phi, ini)
       rate = get_data(session)
       return rate[:32000]

  def get_rates_ini_phi(name, ini_list, phi_list, index=None):
       rates = Parallel(n_jobs=-1)(delayed(get_rate)(name, ini, phi) for ini in ini_list for phi in phi_list)
       rates = np.array(rates)
       rates = rates.reshape(len(ini_list), len(phi_list), 32000, -1)
       return rates[..., index, :]
#+end_src

#+RESULTS:

#+begin_src ipython  
  def get_df_ini_phi(rates):
      n_trials, n_phi, n_neurons, n_times = rates.shape

      # Create indices
      trials_ind, phi_ind, neurons_ind, times_ind = np.indices((n_trials, n_phi, n_neurons, n_times))

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten(),
          'rates': rates.flatten()
      })

      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data_ini_phi(name, ini_list, phi_list, index):
      rates = get_rates_ini_phi(name, ini_list, phi_list, index)
      df = get_df_ini_phi(rates)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_code(df):
      df_code = df.groupby(['time', 'trial', 'phi'])['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code = df_code.drop(columns=['rates'])
      
      end_point = df_code[df_code.time==df_code.time.iloc[-1]]
      end_point = end_point.drop(columns=['time'])
      print(end_point.head())  
      return df_code, end_point  
#+end_src

#+RESULTS:

#+begin_src ipython
  import os
  def run_ini_phi(name, ini_list, phi_list):
    restore_conf(REPO_PATH + '/conf/config_LR.yml',
                 REPO_PATH + '/conf/config_LR.yml.bak')

    conf_path = REPO_PATH + '/conf/config_LR.yml'

    for ini in ini_list:
      Jab = [20.0, -1.4, 2.8, -1.7]
      for i in range(len(Jab)):
        Jab[i] = Jab[i] * 1.25 * np.random.rand()

      update_conf(REPO_PATH + '/conf/config_LR', 'Jab', Jab)
      update_conf(REPO_PATH + '/conf/config_LR', 'CHECK_BISTABILITY', 1)
      update_conf(REPO_PATH + '/conf/config_LR', 'BUMP_SWITCH', 0, axis=0)
      
      for phi in phi_list:
        session = "%s_phi_%d_ini_%d" % (name, phi, ini)
        data_path = REPO_PATH + '/data/simul/' + session
        os.makedirs(data_path, exist_ok=True)          
        np.savetxt(data_path + '/Jab.txt', np.round(Jab, 2))

        update_conf(REPO_PATH + '/conf/config_LR', 'PHI_STIM', float(phi), axis=0)
        update_conf(REPO_PATH + '/conf/config_LR', 'DATA_PATH', data_path)

        sleep(.2)
        run_cpp(session, conf_path=conf_path)
        sleep(.2)

        # subprocess.run([REPO_PATH + '/src/mem_usage.sh'])
        # subprocess.run([REPO_PATH + '/src/cpu_usage.sh'])

    restore_conf(REPO_PATH + '/conf/config_LR.yml.bak',
                 REPO_PATH + '/conf/config_LR.yml')
#+end_src

#+RESULTS:

* Multiple Trials
*** Simulation
**** Parameters

#+begin_src ipython
  ini_list = np.arange(0, 25)
  phi_list = [0]
  name = 'LR_search'
#+end_src

#+RESULTS:

#+begin_src ipython
1/np.sqrt(3200)
#+end_src

#+RESULTS:
: 0.017677669529663688

**** simulation

#+begin_src ipython
  run_ini_phi(name, ini_list, phi_list)
#+end_src

#+RESULTS:
: File moved successfully!
: File moved successfully!

*** Analysis
#+begin_src ipython
  index_order = get_index()
  df = load_data_ini_phi(name, ini_list, phi_list, index_order)
  df_code, end_point = get_code(df)
#+end_src

#+RESULTS:
:       trial  phi   m0   m1  phase
: 2500      0    0  0.0  0.0    0.0
: 2501      0    1  0.0  0.0    0.0
: 2502      1    0  0.0  0.0    0.0
: 2503      1    1  0.0  0.0    0.0
: 2504      2    0  0.0  0.0    0.0

*** Phases

#+begin_src ipython
  import warnings

  # Ignore FutureWarning
  warnings.simplefilter(action='ignore', category=FutureWarning)

  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  sns.lineplot(data=df_code, x='time', y=df_code['m1'], legend=False, lw=2, ax=ax[0], hue='trial', alpha=0.1)

  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('m1 (Hz)')
  # ax[0].set_yticks([0, 90, 180, 270, 360])
  
  sns.lineplot(data=df_code, x='time', y=df_code['phase']*180/np.pi, legend=False, lw=2, ax=ax[1], hue='phi', alpha=0.1)

  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('$\phi$ (°)')
  ax[1].set_yticks([0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=False, stat='density')

  ax[2].set_xlabel('$\phi$ (°)')
  ax[2].set_ylabel('Density')
  ax[2].set_xticks([0, 90, 180, 270, 360])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/3f0029e24e7948d13188bf790e2a12f027dfa731.png]]


#+begin_src ipython
  from matplotlib.patches import Circle

  fig, ax = plt.subplots()

  for i in range(len(phi_list)):
      for j in range(len(ini_list)):
          phi = df_code[(df_code.trial==j) & (df_code.phi==i)].phase
          m1 = df_code[(df_code.trial==j) & (df_code.phi==i)].m1

          theta = np.array([m1 * np.cos(phi), m1 * np.sin(phi)])

          if i==0:
              ax.plot(theta[0], theta[1], 'r', alpha=.1)
          else:
              ax.plot(theta[0], theta[1], 'b', alpha=.1)

  phi = end_point[end_point.phi==0].phase
  m1 = end_point[end_point.phi==0].m1
  theta = np.array([m1 * np.cos(phi), m1 * np.sin(phi)])

  ax.plot(theta[0], theta[1], 'or', label='A')

  phi = end_point[end_point.phi==1].phase
  m1 = end_point[end_point.phi==1].m1
  theta = np.array([m1 * np.cos(phi), m1 * np.sin(phi)])

  ax.plot(theta[0], theta[1], 'ob', label='B')

  ax.plot(0, 0, 'o', ms=10, color='k')
  # ax.plot(theta[0][-1], theta[1][-1], 'o', ms=10, color='r')
  ax.axis('off')
  # ax.set_title('Dual Go')
  # Create a circle patch
  circle = Circle((0, 0), radius=3, color='blue', fill=False, lw=10, alpha=0.1)
  # Add the circle to the current Axes
  ax.add_patch(circle)
  plt.axvline(x=0, ls='--', color='k', alpha=0.1)
  plt.axhline(y=0, ls='--', color='k', alpha=0.1)
  plt.legend(fontsize=14, frameon=False)
  # Set equal scaling by changing the axis limits or the plot aspect ratio
  ax.axis('equal')
  plt.savefig('errors_' + name + '.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/760281152ca0e24e66b347c5a4675bea0b504017.png]]

#+begin_src ipython
  sample_A = end_point[end_point.phi==0].phase * 180 / np.pi
  sample_B = end_point[end_point.phi==1].phase * 180 / np.pi
  
  plt.hist(sample_A)
  errors_A = (sample_A > 90) & (sample_A<270)
  errors_B = (sample_B < 90) | (sample_B>270)
  print(1-(np.sum(errors_A) + np.sum(errors_B)) / 100)
#+end_src

#+RESULTS:
:RESULTS:
: 0.6799999999999999
[[file:./.ob-jupyter/8791935a4e14273b4ab929f854d2c86cce76a29b.png]]
:END:
