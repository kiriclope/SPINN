#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session odr :kernel dual_data

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/models/lif_cpp/notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python
ESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python
: 0ed4f48d-0f8c-4886-aa89-11439b23adf0
:END:
:END:

* Compilation
#+begin_src sh
  cd $HOME/models/lif_cpp
  make clean
  make 
#+end_src

#+RESULTS:
| rm  | -rf   | ./obj/*.o    | ./bin/LifNet  |                   |               |                  |                  |             |                      |                           |               |                |                     |             |                      |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/globals.cpp     | -o          | obj/globals.o        |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/lif_network.cpp | -o          | obj/lif_network.o    |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/main.cpp        | -o          | obj/main.o           |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/sparse_mat.cpp  | -o          | obj/sparse_mat.o     |                           |            |
| g++ | -o    | ./bin/LifNet | obj/globals.o | obj/lif_network.o | obj/main.o    | obj/sparse_mat.o | -Wall            | -std=c++17  | -Ofast               | -s                        | -march=native | -funroll-loops | -ftree-vectorize    | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp |

* Imports

#+begin_src ipython
  import warnings
  # Ignore FutureWarning
  warnings.simplefilter(action='ignore', category=FutureWarning)

  import sys
  sys.path.insert(0, '/home/leon/models/lif_cpp')  
  REPO_PATH = "/home/leon/models/lif_cpp"

  import subprocess
  import pandas as pd
  from time import sleep
  from yaml import safe_load
  from scipy.stats import circmean
  from run_model import run_cpp, update_conf, restore_conf
  from analysis.decode import decode_bump, circcvl
  
  pal = [sns.color_palette("tab10")[0], sns.color_palette("tab10")[1]]
#+end_src

#+RESULTS:

* Helpers

#+begin_src ipython
  from joblib import Parallel, delayed
  import numpy as np

  def work(name, X_str, ini, phi, X):
      try:
          session = "/%s_%s_%.3f_phi_%d_ini_%d/" % (name, X_str, X, phi, ini)
          rate = get_data(session)
          return rate[:32000, -1]
      except:
          return None

  def get_rates_X_parallel(name, X_list, ini_list, phi_list, X_str='Jee', n_jobs=-1):
      # Create a parallel instance using n_jobs
      parallel = Parallel(n_jobs=n_jobs)

      # Use delayed to set up a list of tasks
      tasks = (delayed(work)(name, X_str, ini, phi, X) for ini in ini_list for phi in phi_list for X in X_list)

      # Execute the tasks in parallel
      rates_data = parallel(tasks)

      # Removing None values resulted from exceptions and build the rates array
      # rates_data = list(filter(None, rates_data))
      rates = np.array(rates_data)
      print(rates.shape)
      rates = rates.reshape(len(ini_list), len(phi_list), len(X_list), 32000, -1)
      return rates
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_data(session='/'):
    # Open the file in binary mode and read the data
    with open('/home/leon/models/lif_cpp/data/simul/'+ session + '/rates.txt', 'rb') as f:
      data = np.fromfile(f, dtype=np.float32)
    # Now 'data' is a numpy array containing your data
    return data.reshape(-1, 40000).T
 #+end_src

#+RESULTS:

#+begin_src ipython
  def get_rates_X(name, X_list, ini_list, phi_list, X_str='Jee'):
     rates = []
     for ini in ini_list:
        for phi in phi_list:
           for X in X_list:
              try:
                 session = "/%s_%s_%.2f_phi_%d_ini_%d/" % (name, X_str, X, phi, ini)
                 rate = get_data(session)
                 rates.append(rate[:32000])
              except:
                 pass
              
     rates = np.array(rates)
     rates = rates.reshape(len(ini_list), len(phi_list), len(X_list), 32000, -1)
     return rates
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_ini_X(rates, X_list, X_str='Jee'):
      n_trials, n_phi, n_X, n_neurons, n_times = rates.shape

      # Create indices
      # trials_ind, phi_ind, X_ind, neurons_ind, times_ind = np.indices((n_trials, n_phi, n_X, n_neurons, n_times))

      trials_ind, phi_ind, X_ind, neurons_ind, times_ind = np.meshgrid(
          np.arange(n_trials),
          np.arange(n_phi),
          np.arange(n_X),
          np.arange(n_neurons),
          np.arange(n_times),
          indexing='ij'
      )
      
      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          X_str : X_ind.flatten() * (X_list[-1] - X_list[0]) / (X_list.shape[0] -1)+ X_list[0],
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten() * 0.1,
          'rates': rates.flatten()
      })

      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data(name, X_list, ini_list, phi_list, X_str='Jee'):
      rates = get_rates_X_parallel(name, X_list, ini_list, phi_list, X_str)
      print(rates.shape)
      df = get_df_ini_X(rates, X_list, X_str)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_code(df, X_str='Jee'):
      df_code = df.groupby(['time', 'trial', 'phi', X_str])['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code = df_code.drop(columns=['rates'])
      
      end_point = df_code[df_code.time==df_code.time.iloc[-1]]
      end_point = end_point.drop(columns=['time'])
      print(end_point.head())  
      return df_code, end_point 
#+end_src

#+RESULTS:

#+begin_src ipython
  def run_loop_X(conf_name, name, X_str, X_list, ini_list, phi_list, axis=0):
      restore_conf(REPO_PATH + '/conf/' + conf_name + '.yml',
                   REPO_PATH + '/conf/' + conf_name + '.yml.bak')

      conf_path = REPO_PATH + '/conf/'+ conf_name + '.yml'

      for ini in ini_list:
          for phi in phi_list:
              for X in X_list:
                  session = "%s_%s_%.3f_phi_%d_ini_%d" % (name, X_str, X, phi, ini)
                  data_path = REPO_PATH + '/data/simul/' + session
                  update_conf(REPO_PATH + '/conf/'+ conf_name, 'DATA_PATH', data_path)
                  update_conf(REPO_PATH + '/conf/' + conf_name, X_str, float(X), axis=axis)
                  update_conf(REPO_PATH + '/conf/' + conf_name, 'PHI_STIM', float(phi), axis=0)
                  
                  sleep(.2)
                  run_cpp(session, conf_path=conf_path)
                  sleep(.2)

                  subprocess.run([REPO_PATH + '/src/mem_usage.sh'])
                  subprocess.run([REPO_PATH + '/src/cpu_usage.sh'])

      restore_conf(REPO_PATH + '/conf/' + conf_name + '.yml.bak',
                   REPO_PATH + '/conf/' + conf_name + '.yml')
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_precision(x):

      cmean =  (x - circmean(x, low=-np.pi, high=np.pi)) % (2* np.pi) - np.pi

      cmean[cmean > np.pi/2] -= np.pi
      cmean[cmean < -np.pi/2] += np.pi
      
      return cmean
#+end_src

#+RESULTS:

* Phase Space
*** Varying Tau fac
**** Parameters

#+begin_src ipython
  name = 'odr_tau'
  conf_name = 'config_single'
  TAU_FAC_list = np.linspace(400, 900, 11)
  print(TAU_FAC_list)
  ini_list = np.arange(0, 10)
  phi_list = np.linspace(0, 315, 8)
  phi_list = [180]
  ini_list = [0]
#+end_src

#+RESULTS:
: [400. 450. 500. 550. 600. 650. 700. 750. 800. 850. 900.]

**** Simulation

#+begin_src ipython
  config = safe_load(open("/home/leon/models/lif_cpp/conf/config_ODR.yml", "r"))

  Iext = np.array(config['Iext'])
  Jab = np.array(config['Jab'])

  BALANCE = ((Iext[0] / Jab[0]) / (Iext[1] / Jab[2])) > ((Jab[1] / Jab[0]) / (Jab[3] / Jab[2]))
  print('Balance', BALANCE)

  BALANCE = (Iext[0] / Iext[1]) > (Jab[1] / Jab[3])
  print(BALANCE)

  rates = -np.dot(np.linalg.inv(Jab.reshape((2 ,2))), Iext)
  print('rates', rates)

  J = Jab[1] * Jab[2] / (Jab[0] * Jab[3])
  Q = (Jab[3] * Jab[1] * Iext[0] - Iext[1]) / Jab[2]

  print('stp G', J)
  print('stp Q', Q)
#+end_src

#+RESULTS:
: Balance True
: True
: rates [-0.1366843   0.77914952]
: stp G 0.09999999999999999
: stp Q 3.384325396825397

#+begin_src ipython
  run_loop_X(conf_name, name, 'TAU_FAC', TAU_FAC_list, ini_list, phi_list, axis=0)
#+end_src

#+RESULTS:
: File moved successfully!
: File moved successfully!

**** Analysis
***** Load Data

#+begin_src ipython
  df = load_data(name, TAU_FAC_list, ini_list, phi_list, 'TAU_FAC')
  df_code, end_point = get_df_code(df, 'TAU_FAC')
  
  end_point['accuracy'] = (end_point.phase - end_point['phi'] / 180 * np.pi) % (2 * np.pi)
  end_point['precision'] = end_point.groupby(['phi', 'TAU_FAC'], group_keys=False)['phase'].apply(get_precision)

  df_smooth = df.groupby(['time', 'trial', 'phi', 'TAU_FAC'])['rates'].apply(circcvl).reset_index()

#+end_src

#+RESULTS:
: (11, 32000)
: (1, 1, 11, 32000, 1)
:    trial  phi  TAU_FAC        m0        m1     phase
: 0      0    0    400.0  0.723000  0.012084  4.092778
: 1      0    0    450.0  0.759875  0.009839  6.211645
: 2      0    0    500.0  0.798000  0.014380  3.477776
: 3      0    0    550.0  0.835875  0.029859  3.959538
: 4      0    0    600.0  5.198875  3.861332  3.055879

***** Tuning Profile

#+begin_src ipython
  idx_off = TAU_FAC_list[5]
  idx_on = TAU_FAC_list[6]
  print('parameters', idx_off, idx_on)
#+end_src

#+RESULTS:
: parameters 650.0 700.0

#+begin_src ipython
  N_E = 32000

  df_point = end_point[end_point.TAU_FAC==idx_off]
  df_point_on = end_point[end_point.TAU_FAC==idx_on]

  fig, ax = plt.subplots(1, 3, figsize=[2.25*width, height])

  sns.lineplot(end_point, x='TAU_FAC', y='m0', ax=ax[0], legend=False, marker='o', lw=0, hue='trial')
  ax[0].set_xlabel('FF Input')
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
  
  sns.lineplot(end_point, x='TAU_FAC', y=end_point['m1']/end_point['m0'], ax=ax[1], legend=False, marker='o', color='k')
  sns.lineplot(end_point, x=idx_off, y=df_point['m1']/ df_point['m0'], ax=ax[1], legend=False, marker='o', ms=10, color=pal[0]) 
  sns.lineplot(end_point, x=idx_on, y=df_point_on['m1'] / df_point_on['m0'], ax=ax[1], legend=False, marker='o', ms=10, color=pal[1])

  ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[1].set_xlabel('FF Input (Hz)')
  # ax[0].set_ylim([0.4, 1])


  point = df_smooth[df_smooth.TAU_FAC==idx_off].reset_index() 
  m0, m1, phase = decode_bump(point.rates[0])
  point = np.roll(point.rates[0], int(( phase / 2.0 / np.pi - 0.5) * point.rates[0].shape[0]))

  point_on = df_smooth[df_smooth.TAU_FAC==idx_on].reset_index()  
  m0, m1, phase = decode_bump(point_on.rates[0])
  point_on = np.roll(point_on.rates[0], int((phase / 2.0 / np.pi - 0.5) * point_on.rates[0].shape[0]))

  ax[2].plot(point, color=pal[0])
  ax[2].plot(point_on, color=pal[1])

  ax[2].set_xticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[2].set_ylabel('Firing Rate (Hz)')
  ax[2].set_xlabel('Pref. Location (°)')

  plt.savefig(name + '_tuning.svg', dpi=300)

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/5161c6020635ebf2d25cc1c2c39f90c0fedcc384.png]]

***** Diffusion

#+begin_src ipython
  point = end_point[end_point.TAU_FAC==idx_off]
  point_on = end_point[end_point.TAU_FAC==idx_on]
  
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='TAU_FAC', y=end_point.precision.abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0])

  sns.lineplot(x=idx_off, y=point['precision'].abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color=pal[0])
  sns.lineplot(x=idx_on, y=point_on['precision'].abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color=pal[1])

  ax[0].set_xlabel('FF Input (Hz)')
  ax[0].set_ylabel('Diffusivity (°)')
  ax[0].set_ylim([0, 10])
  ax1 = ax[0].twinx()
  sns.lineplot(end_point, x='TAU_FAC', y=end_point['m1']/end_point['m0'], ax=ax1, legend=False, ls='--', color='k', alpha=0.5, marker='o')

  sns.lineplot(end_point, x=idx_off, y=point['m1']/point['m0'], legend=False, marker='o', ax=ax1, ms=10, color=pal[0])
  sns.lineplot(end_point, x=idx_on, y=point_on['m1']/point_on['m0'], legend=False, marker='o', ax=ax1, ms=10, color=pal[1])

  ax1.set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax1.spines['right'].set_visible(True)

  bins = 'auto'
  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0,color = pal[0])
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0., color=pal[1])
  ax[1].set_xlabel('Angular Deviation (°)')
  ax[1].set_ylabel('Density')
  # ax[1].set_xlim([-20, 20])

  plt.savefig(name + '_diffusion.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[17], line 1[0m
: [0;32m----> 1[0m point [38;5;241m=[39m [43mend_point[49m[end_point[38;5;241m.[39mTAU_FAC[38;5;241m==[39midx_off]
: [1;32m      2[0m point_on [38;5;241m=[39m end_point[end_point[38;5;241m.[39mTAU_FAC[38;5;241m==[39midx_on]
: [1;32m      4[0m fig, ax [38;5;241m=[39m plt[38;5;241m.[39msubplots([38;5;241m1[39m, [38;5;241m2[39m, figsize[38;5;241m=[39m[[38;5;241m2[39m[38;5;241m*[39mwidth, height])
: 
: [0;31mNameError[0m: name 'end_point' is not defined
:END:

#+begin_src ipython
  idx_off = Ie_list[3]
  idx_on = Ie_list[6]

  print(idx_off, idx_on)
  point = end_point[end_point.Ie==idx_off]
  point_on = end_point[end_point.Ie==idx_on]
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[18], line 1[0m
: [0;32m----> 1[0m idx_off [38;5;241m=[39m [43mIe_list[49m[[38;5;241m3[39m]
: [1;32m      2[0m idx_on [38;5;241m=[39m Ie_list[[38;5;241m6[39m]
: [1;32m      4[0m [38;5;28mprint[39m(idx_off, idx_on)
: 
: [0;31mNameError[0m: name 'Ie_list' is not defined
:END:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  sns.histplot(data=point, x=point['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density', color=pal[0], alpha=0, element='step')
  sns.histplot(data=point_on, x=point_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density', color=pal[1], alpha=0, element='step')
  ax[0].set_xlabel('$\phi$(°)')
  ax[0].set_ylabel('Density')
  ax[0].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=point, x=point['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density', color=pal[0])
  sns.histplot(data=point_on, x=point_on['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density', color=pal[1])
  ax[1].set_xlabel('$\phi - \phi_{stim}$ (°)')
  ax[1].set_ylabel('Density')
  ax[1].set_xticks([0, 90, 180, 270, 360])

  bins = 8
  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[2], bins=bins, kde=True, stat='density', element='step', alpha=0,color = pal[0])
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[2], bins=bins, kde=True, stat='density', element='step', alpha=0., color=pal[1])
  ax[2].set_xlabel('$\phi - <\phi>_{trials}$ (°)')
  ax[2].set_ylabel('Density')
  # ax[2].set_xlim([-20, 20])

  plt.show()  
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[19], line 3[0m
: [1;32m      1[0m fig, ax [38;5;241m=[39m plt[38;5;241m.[39msubplots([38;5;241m1[39m, [38;5;241m3[39m, figsize[38;5;241m=[39m[[38;5;241m2[39m[38;5;241m*[39mwidth, height])
: [0;32m----> 3[0m sns[38;5;241m.[39mhistplot(data[38;5;241m=[39m[43mpoint[49m, x[38;5;241m=[39mpoint[[38;5;124m'[39m[38;5;124mphase[39m[38;5;124m'[39m][38;5;241m*[39m[38;5;241m180[39m[38;5;241m/[39mnp[38;5;241m.[39mpi, legend[38;5;241m=[39m[38;5;28;01mFalse[39;00m, lw[38;5;241m=[39m[38;5;241m2[39m, ax[38;5;241m=[39max[[38;5;241m0[39m], kde[38;5;241m=[39m[38;5;28;01mFalse[39;00m, bins[38;5;241m=[39m[38;5;241m200[39m, stat[38;5;241m=[39m[38;5;124m'[39m[38;5;124mdensity[39m[38;5;124m'[39m, color[38;5;241m=[39mpal[[38;5;241m0[39m], alpha[38;5;241m=[39m[38;5;241m0[39m, element[38;5;241m=[39m[38;5;124m'[39m[38;5;124mstep[39m[38;5;124m'[39m)
: [1;32m      4[0m sns[38;5;241m.[39mhistplot(data[38;5;241m=[39mpoint_on, x[38;5;241m=[39mpoint_on[[38;5;124m'[39m[38;5;124mphase[39m[38;5;124m'[39m][38;5;241m*[39m[38;5;241m180[39m[38;5;241m/[39mnp[38;5;241m.[39mpi, legend[38;5;241m=[39m[38;5;28;01mFalse[39;00m, lw[38;5;241m=[39m[38;5;241m2[39m, ax[38;5;241m=[39max[[38;5;241m0[39m], kde[38;5;241m=[39m[38;5;28;01mFalse[39;00m, bins[38;5;241m=[39m[38;5;241m200[39m, stat[38;5;241m=[39m[38;5;124m'[39m[38;5;124mdensity[39m[38;5;124m'[39m, color[38;5;241m=[39mpal[[38;5;241m1[39m], alpha[38;5;241m=[39m[38;5;241m0[39m, element[38;5;241m=[39m[38;5;124m'[39m[38;5;124mstep[39m[38;5;124m'[39m)
: [1;32m      5[0m ax[[38;5;241m0[39m][38;5;241m.[39mset_xlabel([38;5;124m'[39m[38;5;124m$[39m[38;5;124m\[39m[38;5;124mphi$(°)[39m[38;5;124m'[39m)
: 
: [0;31mNameError[0m: name 'point' is not defined
[[file:./.ob-jupyter/947ef9870e46cb047ee45bdc7b8c25aec394b586.png]]
:END:

*** Varying M0
**** Parameters

#+begin_src ipython
  name = 'odr'
  conf_name = 'config_single'
  M0_list = np.linspace(0.5, 1.5, 11)
  print(M0_list)

  ini_list = np.arange(0, 10)
  phi_list = np.linspace(0, 315, 8)

  # ini_list = [0]
  # phi_list = [180]
#+end_src

#+RESULTS:
: [0.5 0.6 0.7 0.8 0.9 1.  1.1 1.2 1.3 1.4 1.5]

**** Simulation

#+begin_src ipython
  config = safe_load(open("/home/leon/models/lif_cpp/conf/config_ODR.yml", "r"))

  Iext = np.array(config['Iext'])
  Jab = np.array(config['Jab'])

  BALANCE = ((Iext[0] / Jab[0]) / (Iext[1] / Jab[2])) > ((Jab[1] / Jab[0]) / (Jab[3] / Jab[2]))
  print('Balance', BALANCE)

  BALANCE = (Iext[0] / Iext[1]) > (Jab[1] / Jab[3])
  print(BALANCE)

  rates = -np.dot(np.linalg.inv(Jab.reshape((2 ,2))), Iext)
  print('rates', rates)

  J = Jab[1] * Jab[2] / (Jab[0] * Jab[3])
  Q = (Jab[3] * Jab[1] * Iext[0] - Iext[1]) / Jab[2]

  print('stp G', J)
  print('stp Q', Q)
#+end_src

#+RESULTS:
: Balance True
: True
: rates [-0.1366843   0.77914952]
: stp G 0.09999999999999999
: stp Q 3.384325396825397

#+begin_src ipython
  run_loop_X(conf_name, name, 'M0', M0_list, ini_list, phi_list, axis=None)
#+end_src

#+RESULTS:
#+begin_example
  File moved successfully!
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
#+end_example

**** Analysis
***** Load Data

#+begin_src ipython
  df = load_data(name, M0_list, ini_list, phi_list, 'M0')
  df_code, end_point = get_df_code(df, 'M0')

  end_point['accuracy'] = (end_point.phase - end_point['phi'] / 180 * np.pi) % (2 * np.pi)
  end_point['precision'] = end_point.groupby(['phi', 'M0'], group_keys=False)['phase'].apply(get_precision)
  
  df_smooth = df.groupby(['time', 'trial', 'phi', 'M0'])['rates'].apply(circcvl).reset_index()
#+end_src

#+RESULTS:
: (880, 32000)
: (10, 8, 11, 32000, 1)
:    trial  phi   M0        m0        m1     phase
: 0      0    0  0.5  0.024250  0.001325  2.191206
: 1      0    0  0.6  0.053250  0.010708  5.864330
: 2      0    0  0.7  0.099875  0.018979  0.966244
: 3      0    0  0.8  0.220375  0.111138  5.497182
: 4      0    0  0.9  0.780000  0.774165  6.207969

***** Tuning Profile

#+begin_src ipython
  idx_off = M0_list[6]
  idx_on = np.round(M0_list[7], 5)
  print('parameters', idx_off, idx_on)
#+end_src

#+RESULTS:
: parameters 1.1 1.2

#+begin_src ipython
  N_E = 32000

  df_point = end_point[end_point.M0==idx_off]
  df_point_on = end_point[end_point.M0==idx_on]

  fig, ax = plt.subplots(1, 3, figsize=[2.25*width, height])

  sns.lineplot(end_point, x='M0', y='m0', ax=ax[0], legend=False, marker='o', lw=0, hue='trial')
  ax[0].set_xlabel('FF Input')
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')

  sns.lineplot(end_point, x='M0', y=end_point['m1']/end_point['m0'], ax=ax[1], legend=False, marker='o', color='k')
  sns.lineplot(end_point, x=idx_off, y=df_point['m1']/ df_point['m0'], ax=ax[1], legend=False, marker='o', ms=10, color=pal[0]) 
  sns.lineplot(end_point, x=idx_on, y=df_point_on['m1'] / df_point_on['m0'], ax=ax[1], legend=False, marker='o', ms=10, color=pal[1])

  ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[1].set_xlabel('FF Input (Hz)')
  # ax[0].set_ylim([0.4, 1])


  point = df_smooth[df_smooth.M0==idx_off].reset_index() 
  m0, m1, phase = decode_bump(point.rates[0])
  point = np.roll(point.rates[0], int(( phase / 2.0 / np.pi - 0.5) * point.rates[0].shape[0]))

  point_on = df_smooth[df_smooth.M0==idx_on].reset_index()  
  m0, m1, phase = decode_bump(point_on.rates[0])
  point_on = np.roll(point_on.rates[0], int((phase / 2.0 / np.pi - 0.5) * point_on.rates[0].shape[0]))

  ax[2].plot(point, color=pal[0])
  ax[2].plot(point_on, color=pal[1])

  ax[2].set_xticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[2].set_ylabel('Firing Rate (Hz)')
  ax[2].set_xlabel('Pref. Location (°)')

  plt.savefig(name + '_tuning.svg', dpi=300)

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/3c8fd4cccf061457dac3322258c76c7ddca17ac1.png]]

***** Diffusion

 #+begin_src ipython
  point = end_point[end_point.M0==idx_off]
  point_on = end_point[end_point.M0==idx_on]

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='M0', y=end_point.precision.abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0])

  sns.lineplot(x=idx_off, y=point['precision'].abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color=pal[0])
  sns.lineplot(x=idx_on, y=point_on['precision'].abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color=pal[1])

  ax[0].set_xlabel('FF Input (Hz)')
  ax[0].set_ylabel('Diffusivity (°)')

  ax1 = ax[0].twinx()
  sns.lineplot(end_point, x='M0', y=end_point['m1']/end_point['m0'], ax=ax1, legend=False, ls='--', color='k', alpha=0.5, marker='o')

  sns.lineplot(end_point, x=idx_off, y=point['m1']/point['m0'], legend=False, marker='o', ax=ax1, ms=10, color=pal[0])
  sns.lineplot(end_point, x=idx_on, y=point_on['m1']/point_on['m0'], legend=False, marker='o', ax=ax1, ms=10, color=pal[1])

  ax1.set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax1.spines['right'].set_visible(True)

  bins = 'auto'
  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0,color = pal[0])
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0., color=pal[1])
  ax[1].set_xlabel('Angular Deviation (°)')
  ax[1].set_ylabel('Density')
  # ax[1].set_xlim([-20, 20])

  plt.savefig(name + '_diffusion.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/57180900bf53301520b20c27a73914db74ee2396.png]]

*** Varying Ie
**** Parameters

#+begin_src ipython
  name = 'odr'
  conf_name = 'config_single'
  Ie_list = np.linspace(1.5, 2.5, 11)
  print(Ie_list)
  ini_list = np.arange(0, 10)
  print(ini_list)
  phi_list = np.linspace(0, 315, 8)
  print(phi_list)

  # Ie_list=[3]
  # ini_list = [0]
  # phi_list = [180]
#+end_src

#+RESULTS:
: [1.5 1.6 1.7 1.8 1.9 2.  2.1 2.2 2.3 2.4 2.5]
: [0 1 2 3 4 5 6 7 8 9]
: [  0.  45.  90. 135. 180. 225. 270. 315.]

**** Simulation

#+begin_src ipython
  config = safe_load(open("/home/leon/models/lif_cpp/conf/config_single.yml", "r"))
  Iext = np.array(config['Iext'])  
  Jab = np.array(config['Jab'])

  BALANCE = ((Iext[0] / Jab[0]) / (Iext[1] / Jab[2])) > ((Jab[1] / Jab[0]) / (Jab[3] / Jab[2]))
  print('Balance', BALANCE)
  
  BALANCE = (Iext[0] / Iext[1]) > (Jab[1] / Jab[3])
  print(BALANCE)

  rates = -np.dot(np.linalg.inv(Jab.reshape((2 ,2))), Iext)
  print('rates', rates)

  J = Jab[1] * Jab[2] / (Jab[0] * Jab[3])
  Q = (Jab[3] * Jab[1] * Iext[0] - Iext[1]) / Jab[2]

  print('stp G', J)
  print('stp Q', Q)
#+end_src

#+RESULTS:
: Balance True
: True
: rates [-0.10662824  0.95100865]
: stp G 0.0994809688581315
: stp Q 1.7279999999999998

#+begin_src ipython
  run_loop_X(conf_name, name, 'Iext', Ie_list, ini_list, phi_list, axis=0)
#+end_src

#+RESULTS:
: File moved successfully!
: File moved successfully!

**** Analysis
***** Load Data

#+begin_src ipython
  df = load_data(name, Ie_list, ini_list, phi_list, 'Iext')
  df_code, end_point = get_df_code(df, 'Iext')
  
  end_point['accuracy'] = (end_point.phase - end_point['phi'] / 180 * np.pi) % (2 * np.pi)
  end_point['precision'] = end_point.groupby(['phi', 'Iext'], group_keys=False)['phase'].apply(get_precision)

  df_smooth = df.groupby(['time', 'trial', 'phi', 'Iext'])['rates'].apply(circcvl).reset_index()
#+end_src

#+RESULTS:
: (880, 32000)
: (10, 8, 11, 32000, 1)
:    trial  phi  Iext        m0        m1     phase
: 0      0    0   1.5  0.021625  0.004951  0.229970
: 1      0    0   1.6  0.048500  0.016797  0.118679
: 2      0    0   1.7  0.100625  0.050589  0.378536
: 3      0    0   1.8  0.154625  0.028661  3.124790
: 4      0    0   1.9  0.455875  0.314494  6.050418
#+RESULTS:

***** Tuning Profile

#+begin_src ipython
  idx_off = Ie_list[5]
  idx_on = Ie_list[9]
  print('parameters', idx_off, idx_on)
#+end_src

#+RESULTS:
: parameters 2.0 2.4

#+begin_src ipython
  N_E = 32000

  df_point = end_point[end_point.Iext==idx_off]
  df_point_on = end_point[end_point.Iext==idx_on]

  fig, ax = plt.subplots(1, 3, figsize=[2.25*width, height])

  sns.lineplot(end_point, x='Iext', y=end_point['m0'], ax=ax[0], legend=False, marker='o', lw=0, hue='trial')
  ax[0].set_xlabel('FF Input')
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')

  sns.lineplot(end_point, x='Iext', y=end_point['m1']/end_point['m0'], ax=ax[1], legend=False, marker='o', color='k')
  sns.lineplot(end_point, x=idx_off, y=df_point['m1']/ df_point['m0'], ax=ax[1], legend=False, marker='o', ms=10, color=pal[0]) 
  sns.lineplot(end_point, x=idx_on, y=df_point_on['m1'] / df_point_on['m0'], ax=ax[1], legend=False, marker='o', ms=10, color=pal[1])

  ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[1].set_xlabel('FF Input (Hz)')
  # ax[0].set_ylim([0.4, 1])

  point = df_smooth[df_smooth.Iext==idx_off].reset_index()
  m0, m1, phase = decode_bump(point.rates[0])
  point = np.roll(point.rates[0], int(( phase / 2.0 / np.pi - 0.5) * point.rates[0].shape[0]))

  point_on = df_smooth[df_smooth.Iext==idx_on].reset_index()  
  m0, m1, phase = decode_bump(point_on.rates[0])
  point_on = np.roll(point_on.rates[0], int((phase / 2.0 / np.pi - 0.5) * point_on.rates[0].shape[0]))

  ax[2].plot(point, color=pal[0])
  ax[2].plot(point_on, color=pal[1])

  ax[2].set_xticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[2].set_ylabel('Firing Rate (Hz)')
  ax[2].set_xlabel('Pref. Location (°)')

  plt.savefig(name + '_tuning.svg', dpi=300)

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/8241cec9fbf7a50e349cf7eb446ed22a0c7b7678.png]]

***** Diffusion

#+begin_src ipython
  point = end_point[end_point.Iext==idx_off]
  point_on = end_point[end_point.Iext==idx_on]

  fig, ax = plt.subplots(1, 3, figsize=[3*width, height])

  sns.lineplot(end_point, x='Iext', y=end_point.precision.abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0])

  sns.lineplot(x=idx_off, y=point['precision'].abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color=pal[0])
  sns.lineplot(x=idx_on, y=point_on['precision'].abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color=pal[1])

  ax[0].set_xlabel('FF Input (Hz)')
  ax[0].set_ylabel('Diffusivity (°)')

  ax1 = ax[0].twinx()
  sns.lineplot(end_point, x='Iext', y=end_point['m1']/end_point['m0'], ax=ax1, legend=False, ls='--', color='k', alpha=0.5, marker='o')

  sns.lineplot(end_point, x=idx_off, y=point['m1']/point['m0'], legend=False, marker='o', ax=ax1, ms=10, color=pal[0])
  sns.lineplot(end_point, x=idx_on, y=point_on['m1']/point_on['m0'], legend=False, marker='o', ax=ax1, ms=10, color=pal[1])

  ax1.set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax1.spines['right'].set_visible(True)
  point = df_smooth[df_smooth.Iext==idx_off].reset_index()
  m0, m1, phase = decode_bump(point.rates[0])
  point = np.roll(point.rates[0], int(( phase / 2.0 / np.pi - 0.5) * point.rates[0].shape[0]))

  point_on = df_smooth[df_smooth.Iext==idx_on].reset_index()  
  m0, m1, phase = decode_bump(point_on.rates[0])
  point_on = np.roll(point_on.rates[0], int((phase / 2.0 / np.pi - 0.5) * point_on.rates[0].shape[0]))

  ax[1].plot(point, color=pal[0])
  ax[1].plot(point_on, color=pal[1])

  ax[1].set_xticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[1].set_ylabel('Firing Rate (Hz)')
  ax[1].set_xlabel('Pref. Location (°)')

  point = end_point[end_point.Iext==idx_off]
  point_on = end_point[end_point.Iext==idx_on]
  
  bins = 'auto'
  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[2], bins=bins, kde=True, stat='density', element='step', alpha=0,color = pal[0])
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[2], bins=bins, kde=True, stat='density', element='step', alpha=0., color=pal[1])
  ax[2].set_xlabel('Angular Deviation (°)')
  ax[2].set_ylabel('Density')
  # ax[1].set_xlim([-20, 20])

  plt.savefig(name + '_diffusion.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/caa6e14100a560ab26847b7b504287ea317c9800.png]]

*** Varying Jee
**** Parameters

#+begin_src ipython
  name = 'odr_single'
  conf_name = 'config_single'
  Jab_list = np.linspace(5, 10, 11)
  print(Jab_list)
  ini_list = np.arange(0, 10)
  ini_list = [0]
  # phi_list = np.linspace(0, 315, 8)
  phi_list = [180]
#+end_src

#+RESULTS:
: [ 5.   5.5  6.   6.5  7.   7.5  8.   8.5  9.   9.5 10. ]

**** Simulation

#+begin_src ipython
  config = safe_load(open("/home/leon/models/lif_cpp/conf/config_ODR.yml", "r"))

  Iext = np.array(config['Iext'])
  Jab = np.array(config['Jab'])

  BALANCE = ((Iext[0] / Jab[0]) / (Iext[1] / Jab[2])) > ((Jab[1] / Jab[0]) / (Jab[3] / Jab[2]))
  print('Balance', BALANCE)

  BALANCE = (Iext[0] / Iext[1]) > (Jab[1] / Jab[3])
  print(BALANCE)

  rates = -np.dot(np.linalg.inv(Jab.reshape((2 ,2))), Iext)
  print('rates', rates)

  J = Jab[1] * Jab[2] / (Jab[0] * Jab[3])
  Q = (Jab[3] * Jab[1] * Iext[0] - Iext[1]) / Jab[2]

  print('stp G', J)
  print('stp Q', Q)
#+end_src

#+RESULTS:
: Balance True
: True
: rates [-0.1366843   0.77914952]
: stp G 0.09999999999999999
: stp Q 3.384325396825397

#+begin_src ipython
  run_loop_X(conf_name, name, 'Jab', Jab_list, ini_list, phi_list, axis=0)
#+end_src

#+RESULTS:
: File moved successfully!
: File moved successfully!

**** Analysis
***** Load Data

#+begin_src ipython
  df = load_data(name, Jab_list, ini_list, phi_list, 'Jab')
  df_code, end_point = get_df_code(df, 'Jab')

  end_point['accuracy'] = (end_point.phase - end_point['phi'] / 180 * np.pi) % (2 * np.pi)
  end_point['precision'] = end_point.groupby(['phi', 'Jab'], group_keys=False)['phase'].apply(get_precision)
  
  df_smooth = df.groupby(['time', 'trial', 'phi', 'Jab'])['rates'].apply(circcvl).reset_index()

#+end_src

#+RESULTS:
: (11, 32000)
: (1, 1, 11, 32000, 1)
:    trial  phi  Jab        m0        m1     phase
: 0      0    0  5.0  0.621250  0.012968  3.279996
: 1      0    0  5.5  0.659125  0.033702  3.441674
: 2      0    0  6.0  0.736875  0.073571  3.226387
: 3      0    0  6.5  1.088625  0.457196  3.153078
: 4      0    0  7.0  3.966250  3.625566  3.140358

***** Tuning Profile

#+begin_src ipython
  idx_off = Jab_list[3]
  idx_on = Jab_list[5]
  print('parameters', idx_off, idx_on)
#+end_src

#+RESULTS:
: parameters 6.5 7.5

#+begin_src ipython
  N_E = 32000

  df_point = end_point[end_point.Jab==idx_off]
  df_point_on = end_point[end_point.Jab==idx_on]

  fig, ax = plt.subplots(1, 3, figsize=[2.25*width, height])

  sns.lineplot(end_point, x='Jab', y='m0', ax=ax[0], legend=False, marker='o', lw=0, hue='trial')
  ax[0].set_xlabel('$J_{EE}$')
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
  
  sns.lineplot(end_point, x='Jab', y=end_point['m1']/end_point['m0'], ax=ax[1], legend=False, marker='o', color='k')
  sns.lineplot(end_point, x=idx_off, y=df_point['m1']/ df_point['m0'], ax=ax[1], legend=False, marker='o', ms=10, color=pal[0]) 
  sns.lineplot(end_point, x=idx_on, y=df_point_on['m1'] / df_point_on['m0'], ax=ax[1], legend=False, marker='o', ms=10, color=pal[1])

  ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[1].set_xlabel('$J_{EE}$')
  # ax[0].set_ylim([0.4, 1])


  point = df_smooth[df_smooth.Jab==idx_off].reset_index() 
  m0, m1, phase = decode_bump(point.rates[0])
  point = np.roll(point.rates[0], int(( phase / 2.0 / np.pi - 0.5) * point.rates[0].shape[0]))

  point_on = df_smooth[df_smooth.Jab==idx_on].reset_index()  
  m0, m1, phase = decode_bump(point_on.rates[0])
  point_on = np.roll(point_on.rates[0], int((phase / 2.0 / np.pi - 0.5) * point_on.rates[0].shape[0]))

  ax[2].plot(point, color=pal[0])
  ax[2].plot(point_on, color=pal[1])

  ax[2].set_xticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[2].set_ylabel('Firing Rate (Hz)')
  ax[2].set_xlabel('Pref. Location (°)')

  plt.savefig(name + '_tuning.svg', dpi=300)

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/e9a570f804f94d1d8c746d98c071d38fa3128074.png]]

***** Diffusion

#+begin_src ipython
  point = end_point[end_point.Jab==idx_off]
  point_on = end_point[end_point.Jab==idx_on]

  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='Jab', y=end_point.precision.abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0])

  sns.lineplot(x=idx_off, y=point['precision'].abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color=pal[0])
  sns.lineplot(x=idx_on, y=point_on['precision'].abs() * 180 / np.pi, legend=False, marker='o', ax=ax[0], ms=10, color=pal[1])

  ax[0].set_xlabel('$J_{EE}$')
  ax[0].set_ylabel('Diffusivity (°)')

  ax1 = ax[0].twinx()
  sns.lineplot(end_point, x='Jab', y=end_point['m1']/end_point['m0'], ax=ax1, legend=False, ls='--', color='k', alpha=0.5, marker='o')

  sns.lineplot(end_point, x=idx_off, y=point['m1']/point['m0'], legend=False, marker='o', ax=ax1, ms=10, color=pal[0])
  sns.lineplot(end_point, x=idx_on, y=point_on['m1']/point_on['m0'], legend=False, marker='o', ax=ax1, ms=10, color=pal[1])

  ax1.set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax1.spines['right'].set_visible(True)

  bins = 'auto'
  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0,color = pal[0])
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[1], bins=bins, kde=True, stat='density', element='step', alpha=0., color=pal[1])
  ax[1].set_xlabel('Angular Deviation (°)')
  ax[1].set_ylabel('Density')
  # ax[1].set_xlim([-20, 20])

  plt.savefig(name + '_diffusion.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/0feda236fe0f92596a5efcabff6fce9aae167c30.png]]

#+begin_src ipython

#+end_src
