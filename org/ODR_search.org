#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual_data :kernel dual_data

* Notebook Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/models/lif_cpp/notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

* Compilation
#+begin_src sh
  cd $HOME/models/lif_cpp
  make 
#+end_src

#+RESULTS:
: g++ -o ./bin/LifNet obj/globals.o obj/lif_network.o obj/main.o obj/sparse_mat.o -Wall -std=c++17 -Ofast -s -march=native -funroll-loops -ftree-vectorize -ffast-math -fomit-frame-pointer -fexpensive-optimizations  -lyaml-cpp

* Imports

#+begin_src ipython
  import warnings
  # Ignore FutureWarning
  warnings.simplefilter(action='ignore', category=FutureWarning)
  
  import sys
  sys.path.insert(0, '/home/leon/models/lif_cpp')  
  REPO_PATH = "/home/leon/models/lif_cpp"

  import subprocess
  import pandas as pd
  from time import sleep
  from yaml import safe_load
  from scipy.stats import circmean
  from run_model import run_cpp, update_conf, restore_conf
  from analysis.decode import decode_bump, circcvl  
#+end_src

#+RESULTS:

* Helpers
#+begin_src ipython
  def get_data(session='/'):
    # Open the file in binary mode and read the data
    with open('/home/leon/models/lif_cpp/data/simul/'+ session + '/rates.txt', 'rb') as f:
      data = np.fromfile(f, dtype=np.float32)
    # Now 'data' is a numpy array containing your data
    return data.reshape(-1, 40000).T
 #+end_src

#+RESULTS:

#+begin_src ipython
  def get_rates_X(name, X_list, ini_list, phi_list, X_str='Jee'):
     rates = []
     for ini in ini_list:
        for phi in phi_list:
           for X in X_list:
              try:
                 session = "/%s_%s_%.2f_phi_%d_ini_%d/" % (name, X_str, X, phi, ini)
                 rate = get_data(session)
                 rates.append(rate[:32000])
              except:
                 pass
              
     rates = np.array(rates)
     rates = rates.reshape(len(ini_list), len(phi_list), len(X_list), 32000, -1)
     return rates
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_ini_X(rates, X_list, X_str='Jee'):
      n_trials, n_phi, n_X, n_neurons, n_times = rates.shape

      # Create indices
      trials_ind, phi_ind, X_ind, neurons_ind, times_ind = np.indices((n_trials, n_phi, n_X, n_neurons, n_times))

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          X_str : X_ind.flatten() * (X_list[-1] - X_list[0]) / (X_list.shape[0] -1)+ X_list[0],
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten() * 0.05,
          'rates': rates.flatten()
      })

      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data(name, X_list, ini_list, phi_list, X_str='Jee'):
      rates = get_rates_X(name, X_list, ini_list, phi_list, X_str)
      df = get_df_ini_X(rates, X_list, X_str)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_code(df, X_str='Jee'):
      df_code = df.groupby(['time', 'trial', 'phi', X_str])['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code = df_code.drop(columns=['rates'])
      
      end_point = df_code[df_code.time==df_code.time.iloc[-1]]
      end_point = end_point.drop(columns=['time'])
      print(end_point.head())  
      return df_code, end_point 
#+end_src

#+RESULTS:

#+begin_src ipython
  def run_loop_Ie(name, Ie_list, ini_list, phi_list):
      restore_conf(REPO_PATH + '/conf/config_ODR.yml',
                   REPO_PATH + '/conf/config_ODR.yml.bak')

      conf_path = REPO_PATH + '/conf/config_ODR.yml'

      for ini in ini_list:
          for phi in phi_list:
              for Ie in Ie_list:
                  session = "%s_Ie_%.2f_phi_%d_ini_%d" % (name, Ie, phi, ini)
                  data_path = REPO_PATH + '/data/simul/' + session
                  update_conf(REPO_PATH + '/conf/config_ODR', 'DATA_PATH', data_path)
                  update_conf(REPO_PATH + '/conf/config_ODR', 'Iext', float(Ie/1000.0), axis=0)
                  update_conf(REPO_PATH + '/conf/config_ODR', 'PHI_STIM', float(phi), axis=0)

                  sleep(.2)
                  run_cpp(session, conf_path=conf_path)
                  sleep(.2)

                  subprocess.run([REPO_PATH + '/src/mem_usage.sh'])
                  subprocess.run([REPO_PATH + '/src/cpu_usage.sh'])

      restore_conf(REPO_PATH + '/conf/config_ODR.yml.bak',
                   REPO_PATH + '/conf/config_ODR.yml')
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_precision(x):
      return x - circmean(x)
#+end_src

#+RESULTS:

* Phase Space
*** Varying Ie
**** Parameters

#+begin_src ipython
  name = 'odr'
  Ie_list = np.linspace(2, 4, 11)
  ini_list = np.arange(25, 50)
  phi_list = np.linspace(0, 315, 8)
  # phi_list = [180]
#+end_src

#+RESULTS:

**** Simulation

#+begin_src ipython
  config = safe_load(open("/home/leon/models/lif_cpp/conf/config_ODR.yml", "r"))

  Iext = np.array(config['Iext'])  
  Jab = np.array(config['Jab'])

  BALANCE = ((Iext[0] / Jab[0]) / (Iext[1] / Jab[2])) > ((Jab[1] / Jab[0]) / (Jab[3] / Jab[2]))
  print('Balance', BALANCE)

  BALANCE = (Iext[0] / Iext[1]) > (Jab[1] / Jab[3])
  print(BALANCE)

  rates = -np.dot(np.linalg.inv(Jab.reshape((2 ,2))), Iext)
  print('rates', rates)

  J = Jab[1] * Jab[2] / (Jab[0] * Jab[3])
  Q = (Jab[3] * Jab[1] * Iext[0] - Iext[1]) / Jab[2]

  print('stp G', J)
  print('stp Q', Q)
#+end_src

#+RESULTS:
: Balance True
: True
: rates [-0.00019812  0.00075117]
: stp G 0.1125
: stp Q 0.004000000000000001

#+begin_src ipython
  run_loop_Ie(name, Ie_list, ini_list, phi_list)
#+end_src

#+RESULTS:
#+begin_example
  File moved successfully!
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
   MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
  MEM_USAGE > 85.0%, sleeping for a while ...
#+end_example


**** Analysis
***** Load Data

#+begin_src ipython
  df = load_data(name, Ie_list, ini_list, phi_list, 'Ie')
  print(df.head())
#+end_src

#+RESULTS:
: Empty DataFrame
: Columns: [trial, phi, Ie, neuron, time, rates]
: Index: []

#+begin_src ipython
  df_code, end_point = get_df_code(df, 'Ie')
#+end_src

#+RESULTS:
:        trial  phi   Ie        m0        m1     phase
: 48400      0    0  2.0  0.275875  0.066284  0.135753
: 48401      0    0  2.2  1.041000  0.744426  6.224310
: 48402      0    0  2.4  2.873375  2.630152  0.010769
: 48403      0    0  2.6  3.701000  2.649389  6.240334
: 48404      0    0  2.8  4.496250  2.549315  0.004834

***** Bifurcation

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='Ie', y='m0', ax=ax[0], legend=False, marker='o', lw=0, hue='trial')
  ax[0].set_xlabel('FF Input')
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')

  sns.lineplot(end_point, x='Ie', y=end_point['m1']/end_point['m0'], ax=ax[1], legend=False, marker='o', lw=0, hue='trial')

  ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[1].set_xlabel('FF Input')

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/cb8d1a23ef1a52b24ed8665ea19cd97ea0cf804b.png]]

***** Tuning Profile

#+begin_src ipython
  np.array([15, 2.5]) * .5
#+end_src

#+RESULTS:
: array([7.5 , 1.25])

#+begin_src ipython
  df_smooth = df.groupby(['time', 'trial', 'phi', 'Ie'])['rates'].apply(circcvl).reset_index()
#+end_src

#+RESULTS:

#+begin_src ipython
    endpoint = df_smooth[df_smooth.time==df_smooth.time.iloc[-1]]
    endpoint = endpoint.drop(columns=['time'])
#+end_src

#+RESULTS:

#+begin_src ipython
  idx_off = Ie_list[2]
  idx_on = Ie_list[4]
  
  end0 = endpoint[endpoint.Ie==idx_off].reset_index()
  end1 = endpoint[endpoint.Ie==idx_on].reset_index()

  N_E = 32000

  plt.plot(end0.rates[4])
  plt.plot(end1.rates[4])

  plt.xticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  plt.ylabel('Firing Rate (Hz)')
  plt.xlabel('Pref. Location (°)')
  plt.show()

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/576ce2b1705823f8a902bc63930aed35286469ab.png]]

***** Errors

#+begin_src ipython
  end_point['accuracy'] = (end_point.phase - end_point['phi'] / 180 * np.pi) % (2 * np.pi)
  end_point['precision'] = end_point.groupby(['phi', 'Ie'], group_keys=False)['phase'].apply(get_precision)
  
  print(end_point.head())
#+end_src

#+RESULTS:
:        trial  phi   Ie        m0        m1     phase  accuracy  precision
: 48400      0    0  2.0  0.275875  0.066284  0.135753  0.135753   0.116924
: 48401      0    0  2.2  1.041000  0.744426  6.224310  6.224310  -0.041568
: 48402      0    0  2.4  2.873375  2.630152  0.010769  0.010769   0.005525
: 48403      0    0  2.6  3.701000  2.649389  6.240334  6.240334   6.226007
: 48404      0    0  2.8  4.496250  2.549315  0.004834  0.004834  -0.052115

#+begin_src ipython
  fig, ax = plt.subplots()

  sns.lineplot(end_point, x='Ie', y=end_point.precision.abs() * 180 / np.pi, legend=False, marker='o', ax=ax)
  ax.set_xlabel('FF Input')
  ax.set_ylabel('Diffusivity (°)')
  # ax.set_xticks(np.linspace(0, len(Ie_list)-1, 5), np.round(np.linspace(Ie_list[0], Ie_list[-1], 5), 2))

  ax1 = ax.twinx()
  sns.lineplot(end_point, x='Ie', y=end_point['m1']/end_point['m0'], ax=ax1, legend=False, ls='--', color='k', alpha=0.5)
  ax1.set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/6089818298e4639aca38d38b55c6843e66bbcda1.png]]

#+begin_src ipython
point = end_point[end_point.Ie==idx_off]
point_on = end_point[end_point.Ie==idx_on]
#+end_src

#+RESULTS:

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])
  
  sns.histplot(data=point, x=point['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins='auto', stat='density', color='b')
  sns.histplot(data=point_on, x=point_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins='auto', stat='density', color='r')
  ax[0].set_xlabel('$\phi$(°)')
  ax[0].set_ylabel('Density')
  # ax[0].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=point, x=point['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins='auto', stat='density', color='b')
  sns.histplot(data=point_on, x=point_on['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins='auto', stat='density', color='r')
  ax[1].set_xlabel('$\phi - \phi_{stim}$ (°)')
  ax[1].set_ylabel('Density')
  # ax[1].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=point, x=point['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=False, stat='density', element='step', alpha=0,color = 'b')
  sns.histplot(data=point_on, x=point_on['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=False, stat='density', element='step', alpha=0., color='r')
  ax[2].set_xlabel('$\phi - <\phi>_{trials}$ (°)')
  ax[2].set_ylabel('Density')
  ax[2].set_xlim([-10, 10])

  plt.show()  
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/ee6da1639b21c3dae51158380ebcad9d0ed73d96.png]]

*** Varying Jee
**** Parameters

#+begin_src ipython
  Jee_list = np.linspace(17, 23, 11)
  ini_list = np.arange(0, 10)
  phi_list = np.linspace(0, 315, 8)
  phi_list = [180]
#+end_src

#+RESULTS:

**** Simulation
#+begin_src ipython
  def run_loop_Jee(name, Jee_list, ini_list, phi_list):

      for ini in ini_list:
          for phi in phi_list:
              for Jee in Jee_list:
                  session = "%s_Jee_%.2f_phi_%d_ini_%d" % (name, Jee, phi, ini)
                  data_path = REPO_PATH + '/data/simul/' + session
                  update_conf(REPO_PATH + '/conf/config_EI', 'DATA_PATH', data_path)
                  update_conf(REPO_PATH + '/conf/config_EI', 'Jab', float(Jee), axis=0)
                  update_conf(REPO_PATH + '/conf/config_EI', 'PHI_STIM', float(phi), axis=0)

                  sleep(.2)
                  run_cpp(session)
                  sleep(.2)
                  
                  subprocess.run([REPO_PATH + '/src/mem_usage.sh'])
                  subprocess.run([REPO_PATH + '/src/cpu_usage.sh'])

      restore_conf(REPO_PATH + '/conf/config_EI.yml')
#+end_src

#+RESULTS:

#+begin_src ipython
  name = 'EI'
  run_loop_Jee(name, Jee_list, ini_list, phi_list)
#+end_src

#+RESULTS:
: File moved successfully!

**** Analysis
***** Load Data

#+begin_src ipython
  df = load_data(name, Jee_list, ini_list, phi_list, 'Jee')
  print(df.head())
#+end_src

#+RESULTS:
:    trial  phi  Jee  neuron  time  rates
: 0      0    0    0       0     0    4.0
: 1      0    0    0       0     1    4.0
: 2      0    0    0       0     2    4.0
: 3      0    0    0       0     3    8.0
: 4      0    0    0       0     4    0.0

#+begin_src ipython
  df_code, end_point = get_df_code(df, 'Jee')
#+end_src

#+RESULTS:
:        trial  phi  Jee        m0        m1     phase
: 11660      0    0    0  0.263600  0.004021  3.766620
: 11661      0    0    1  0.265333  0.007139  1.962238
: 11662      0    0    2  0.270000  0.009053  2.494349
: 11663      0    0    3  0.286533  0.010270  4.420489
: 11664      0    0    4  0.290133  0.005266  1.065609

***** Plot Data
#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  # sns.lineplot(end_point, x='Jee', y='m0', ax=ax[0], legend=False, marker='o')
  sns.lineplot(end_point, x='Jee', y='m0', ax=ax[0], legend=False, marker='o', lw=0, hue='trial')
  ax[0].set_xlabel('$J_{EE}$')
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
  ax[0].set_xticks(np.linspace(0, len(Jee_list), 5), np.round(np.linspace(Jee_list[0], Jee_list[-1], 5), 2))

  # sns.lineplot(end_point, x='Jee', y=end_point['m1'], ax=ax[1], legend=False)
  # ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')

  sns.lineplot(end_point, x='Jee', y=end_point['m1']/end_point['m0'], ax=ax[1], legend=False, marker='o', hue='trial', lw=0)
  ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[1].set_xlabel('$J_{EE}$')
  ax[1].set_xticks(np.linspace(0, len(Jee_list)-1, 5), np.round(np.linspace(Jee_list[0], Jee_list[-1], 5), 2))

  plt.show()
#+end_src
#+RESULTS:
[[file:./.ob-jupyter/5eb1062945926247a0beb44f68930237a2bcc88e.png]]

#+begin_src ipython

#+end_src

#+RESULTS:


#+begin_src ipython
  df_smooth = df.groupby(['time', 'trial', 'phi', 'Jee'])['rates'].apply(circcvl).reset_index()
#+end_src

#+RESULTS:

#+begin_src ipython
  endpoint = df_smooth[df_smooth.time==df_smooth.time.iloc[-1]]
  endpoint = endpoint.drop(columns=['time']).reset_index()
#+end_src

#+RESULTS:

#+begin_src ipython
  end0 = endpoint[endpoint.Jee==3].reset_index()
  end1 = endpoint[endpoint.Jee==4].reset_index()

  plt.plot(end0.rates[4])
  plt.plot(end1.rates[4])
  plt.show()
#+end_src

