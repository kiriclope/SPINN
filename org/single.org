#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session lif :kernel dual_data
# #+PROPERTY: header-args:ipython :results both :exports both :async yes :session /ssh:172.26.20.46:~/.local/share/jupyter/runtime/kernel-343f5c4f-82fe-4da8-aa26-6dafafa92f96.json :kernel dual_data

* Notebook Configuration
** Settings

#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/models/lif_cpp/notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

** Imports

#+begin_src ipython
  import sys
  sys.path.insert(0, '/home/leon/models/lif_cpp')  
  REPO_PATH = "/home/leon/models/lif_cpp"

  import subprocess
  import pandas as pd
  from time import sleep
  from yaml import safe_load
  from scipy.stats import circmean
  from run_model import run_cpp, update_conf, restore_conf
  from analysis.decode import decode_bump, circcvl  
#+end_src

#+RESULTS:

* Helpers

#+begin_src ipython
  def run_sim(repo_path, conf_name, name, DURATION=10000, T_STEADY=5000, gain=1):

    conf_path = repo_path + '/conf/' + conf_name
    config = safe_load(open(conf_path + ".yml", "r"))
    data_path = repo_path + '/data/simul/'

    restore_conf(conf_path + '.yml',
                 conf_path +'.yml.bak')

    update_conf(conf_path, 'Iext', float(gain), axis=0)
    update_conf(conf_path, 'T_SAVE', float(0.0), axis=None)
    update_conf(conf_path, 'DURATION', float(DURATION), axis=None)
    update_conf(conf_path, 'T_STEADY', float(T_STEADY), axis=None)
    
    update_conf(conf_path, 'DATA_PATH', data_path + name)
    # update_conf(conf_path, 'PHI_STIM', float(phi), axis=0)

    sleep(.2)
    run_cpp(name, conf_path = conf_path + ".yml")
    sleep(.2)


    restore_conf(conf_path + '.yml.bak',
                 conf_path +'.yml')
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_data(session='/'):
    # Open the file in binary mode and read the data
    with open('/home/leon/models/lif_cpp/data/simul/'+ session + '/rates.txt', 'rb') as f:
      data = np.fromfile(f, dtype=np.float32)
    # Now 'data' is a numpy array containing your data
    return data.reshape(-1, 40000).T
 #+end_src

 #+RESULTS:

#+begin_src ipython
  def get_times(conf_name):
       config = safe_load(open("/home/leon/models/lif_cpp/conf/" + conf_name + ".yml", "r"))
       
       times = np.arange(0, config['DURATION'] + config['T_WINDOW'], config['T_WINDOW'])
       # times -= config['T_STEADY']
       times /= 1000.0

       return times
#+end_src

#+RESULTS:

* Connectivity
#+begin_src sh
  cd $HOME/models/lif_cpp/src
  nvcc -lyaml-cpp mat.cu globals.cpp
#+end_src

#+RESULTS:

#+begin_src ipython
  arr = np.fromfile('../data/matrix/colptr.txt', dtype=np.uint)  # specify the dtype according to your data
  print(arr)
#+end_src

#+RESULTS:
: [        0      4018      8047 ... 159988477 159992510 159996569]

* Compilation

#+begin_src sh
  cd $HOME/models/lif_cpp
  make clean
  make
#+end_src

#+RESULTS:
| rm  | -rf   | ./obj/*.o    | ./bin/LifNet  |                   |               |                  |                  |             |                      |                           |               |                |                     |             |                      |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/globals.cpp     | -o          | obj/globals.o        |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/lif_network.cpp | -o          | obj/lif_network.o    |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/main.cpp        | -o          | obj/main.o           |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/sparse_mat.cpp  | -o          | obj/sparse_mat.o     |                           |            |
| g++ | -o    | ./bin/LifNet | obj/globals.o | obj/lif_network.o | obj/main.o    | obj/sparse_mat.o | -Wall            | -std=c++17  | -Ofast               | -s                        | -march=native | -funroll-loops | -ftree-vectorize    | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp |

* Single trial
** Simulation

#+begin_src ipython
  conf_name = 'config'

  name = 'single_off'
  run_sim(REPO_PATH, conf_name, name, DURATION=30000, T_STEADY=1000, gain=2.0)
  
  name = 'single_on'
  run_sim(REPO_PATH, conf_name, name, DURATION=30000, T_STEADY=1000, gain=2.12)
#+end_src

#+RESULTS:

** Analysis
**** Rates

#+begin_src ipython
  session = 'single_off'

  data = get_data(session)
  print('data', data.shape)
  rates_off = data[:32000]

  print('rates', np.mean(data[:32000]), np.mean(data[8000:]))

  session = 'single_on'
  
  data = get_data(session)
  print('data', data.shape)
  rates_on = data[:32000]

  print('rates', np.mean(data[:32000]), np.mean(data[8000:]))
#+end_src

#+RESULTS:
: data (40000, 51)
: rates 0.66418874 1.7070857
: data (40000, 48)
: rates 1.0695599 2.0981615

#+begin_src ipython
  N_E = 32000
  r_min = 0
  r_max = 5

  times = get_times(conf_name)
  print(times.shape)
  print(data.shape)
  times = times[:data.shape[1]]

  fig, ax = plt.subplots(1, 2, figsize=(2*width, height), sharey=True)

  im0 = ax[0].imshow(rates_off, aspect='auto', cmap='jet',vmin=0, vmax=r_max, extent=[times[0], times[-1], 0, N_E])
  im = ax[1].imshow(rates_on, aspect='auto', cmap='jet',vmin=0, vmax=r_max, extent=[times[0], times[-1], 0, N_E])

  ax[1].set_xlabel('Time (s)')
  # ax[1].set_xticks([0, 1, 2, 3, 4, 5])

  ax[0].set_xlabel('Time (s)')
  # ax[0].set_xticks([0, 1, 2, 3, 4, 5])

  ax[0].set_title('NB OFF')
  ax[0].set_ylabel('Pref. Location (Â°)')
  ax[0].set_yticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])

  ax[1].set_yticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])
  ax[1].set_title('NB ON')

  cbar = plt.colorbar(im, ax=ax[0])
  cbar.set_label("Firing Rate (Hz)")
  cbar.set_ticks([0, 5, 10, 15])
  plt.savefig('./lif_single.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (121,)
: (40000, 48)
[[file:./.ob-jupyter/b0b7b5f3abad120af9f2e1ee068df5211f48770a.png]]
:END:

**** Fourier vs Time

#+begin_src ipython
  m0, m1, phi = decode_bump(rates_on, axis=0)

  times = get_times(conf_name)
  times = times[:data.shape[1]]
  fig, ax = plt.subplots(1, 3, figsize=(2*width, height))

  ax[0].plot(times, m0)
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\mathcal{F}^0$')
  ax[0].set_xticks([0, 2, 4, 6, 8, 10])
  # ax[0].set_yticks([0, 1, ])
  # ax[0].set_ylim([0, 5])

  ax[1].plot(times, m1 / m0)
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('$\mathcal{F}^1 / \mathcal{F}^0$')
  ax[1].set_xticks([0, 2, 4, 6, 8, 10])

  ax[2].plot(times, phi * 180 / np.pi)
  ax[2].set_xlabel('Time (s)')
  ax[2].set_ylabel('$\phi$')
  ax[2].set_yticks([0, 90, 180, 270, 360])
  ax[2].set_xticks([0, 2, 4, 6, 8, 10])
  plt.tight_layout()
  plt.show()
  #+end_src

#+RESULTS:
[[file:./.ob-jupyter/5eaf2c157ef15007812a257ad3b635fb7ef185f0.png]]


**** Spatial profile

#+begin_src ipython
  smooth_E = circcvl(rates_on, windowSize=3200, axis=0)
  theta = np.linspace(0, 360, rates_off.shape[0])

  plt.plot(theta, smooth_E[:, -30] , 'b')
  plt.plot(theta, smooth_E[:, -1], 'r')

  plt.xlabel('Prefered Location (Â°)')
  plt.ylabel('Rate (Hz)')
  # plt.yticks([5, 10])
  plt.xticks([0, 90, 180, 270, 360]);
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mIndexError[0m                                Traceback (most recent call last)
: Cell [0;32mIn[106], line 4[0m
: [1;32m      1[0m smooth_E [38;5;241m=[39m circcvl(rates_on, windowSize[38;5;241m=[39m[38;5;241m3200[39m, axis[38;5;241m=[39m[38;5;241m0[39m)
: [1;32m      2[0m theta [38;5;241m=[39m np[38;5;241m.[39mlinspace([38;5;241m0[39m, [38;5;241m360[39m, rates_off[38;5;241m.[39mshape[[38;5;241m0[39m])
: [0;32m----> 4[0m plt[38;5;241m.[39mplot(theta, [43msmooth_E[49m[43m[[49m[43m:[49m[43m,[49m[43m [49m[38;5;241;43m-[39;49m[38;5;241;43m30[39;49m[43m][49m , [38;5;124m'[39m[38;5;124mb[39m[38;5;124m'[39m)
: [1;32m      5[0m plt[38;5;241m.[39mplot(theta, smooth_E[:, [38;5;241m-[39m[38;5;241m1[39m], [38;5;124m'[39m[38;5;124mr[39m[38;5;124m'[39m)
: [1;32m      7[0m plt[38;5;241m.[39mxlabel([38;5;124m'[39m[38;5;124mPrefered Location (Â°)[39m[38;5;124m'[39m)
: 
: [0;31mIndexError[0m: index -30 is out of bounds for axis 1 with size 29
:END:

**** Raster

#+begin_src ipython
  import pandas as pd
  import matplotlib.pyplot as plt

  # Read the file into a DataFrame
  filename = '/home/leon/models/lif_cpp/data/simul/spikes.txt'
  df = pd.read_csv(filename, names=['neuron_id', 'spike_time'], sep=' ')

  # Group by 'neuron_id' and aggregate the 'spike_time' into lists
  grouped = df.groupby('neuron_id')['spike_time'].apply(list)

  # Now 'grouped' is a DataFrame with 'neuron_id' and a list of 'spike_time's
  # You can print it out to verify its structure
  print(grouped.head())
#+end_src

#+begin_src ipython
  # If you want to visualize this in a raster plot:
  fig, ax = plt.subplots()
  
  plt.eventplot(grouped, lineoffsets=grouped.index, linelengths=1)

  ax.set_xlabel('Spike Time')
  ax.set_ylabel('Neuron ID')
  ax.set_title('Raster Plot')

  # Display the plot
  plt.show()
#+end_src

#+RESULTS:
