#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session lif :kernel dual_data
# #+PROPERTY: header-args:ipython :results both :exports both :async yes :session /ssh:172.26.20.46:~/.local/share/jupyter/runtime/kernel-343f5c4f-82fe-4da8-aa26-6dafafa92f96.json :kernel dual_data

* Notebook Configuration
** Settings
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/models/lif_cpp/notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

** Imports
#+begin_src ipython
  import sys
  sys.path.insert(0, '/home/leon/models/lif_cpp')  
  REPO_PATH = "/home/leon/models/lif_cpp"

  import subprocess
  import pandas as pd
  from time import sleep
  from yaml import safe_load
  from scipy.stats import circmean
  from run_model import run_cpp, update_conf, restore_conf
  from analysis.decode import decode_bump, circcvl  
#+end_src

#+RESULTS:

* Helpers
#+begin_src ipython
  def get_data(session='/'):
    # Open the file in binary mode and read the data
    with open('/home/leon/models/lif_cpp/data/simul/'+ session + '/rates.txt', 'rb') as f:
      data = np.fromfile(f, dtype=np.float32)
    # Now 'data' is a numpy array containing your data
    return data.reshape(-1, 40000).T
 #+end_src

 #+RESULTS:

#+begin_src ipython
  def get_times(conf_name):
       config = safe_load(open("/home/leon/models/lif_cpp/conf/" + conf_name + ".yml", "r"))

       times = np.arange(0, config['DURATION']-config['T_WINDOW'], config['T_WINDOW'])
       # times -= config['T_STEADY']
       times /= 1000.0

       return times
#+end_src

#+RESULTS:

#+begin_src ipython
  def gram_schmidt(a, b):
      e1 = a / np.linalg.norm(a)
      v = b - np.dot(b, e1) * e1
      e2 = v / np.linalg.norm(v)

      return np.arctan2(e2, e1)
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_index():
      ksi_1 = np.fromfile('../data/matrix/ksi_1.txt', dtype=np.float32)
      ksi_2 = np.fromfile('../data/matrix/ksi_2.txt', dtype=np.float32) 
      # theta = np.arctan2(ksi_2 / np.linalg.norm(ksi_2), ksi_1 / np.linalg.norm(ksi_1))
      theta = gram_schmidt(ksi_1, ksi_2)

      return theta.argsort()
#+end_src

#+RESULTS:

* Connectivity
#+begin_src sh
  cd $HOME/models/lif_cpp/src
  nvcc -lyaml-cpp mat.cu globals.cpp
#+end_src

#+RESULTS:

#+begin_src ipython
  arr = np.fromfile('../data/matrix/colptr.txt', dtype=np.uint)  # specify the dtype according to your data
  print(arr)
#+end_src

#+RESULTS:
: [        0      4018      8047 ... 159988477 159992510 159996569]

* Compilation
#+begin_src sh
  cd $HOME/models/lif_cpp
  make clean
  make
#+end_src

#+RESULTS:
| rm  | -rf   | ./obj/*.o    | ./bin/LifNet  |                   |               |                  |                  |             |                      |                           |               |                |                     |             |                      |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/globals.cpp     | -o          | obj/globals.o        |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/lif_network.cpp | -o          | obj/lif_network.o    |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/main.cpp        | -o          | obj/main.o           |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/sparse_mat.cpp  | -o          | obj/sparse_mat.o     |                           |            |
| g++ | -o    | ./bin/LifNet | obj/globals.o | obj/lif_network.o | obj/main.o    | obj/sparse_mat.o | -Wall            | -std=c++17  | -Ofast               | -s                        | -march=native | -funroll-loops | -ftree-vectorize    | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp |

* Single trial
** Simulation

#+begin_src ipython
  session = 'single_trial'
  conf_path = REPO_PATH + '/conf/config_ODR.yml'
  run_cpp(session, conf_path=conf_path)
#+end_src

#+RESULTS:

** Analysis
**** Rates

#+begin_src ipython
  session = '/'
  conf_name = 'config_ODR'
  data = get_data(session)
  print('data', data.shape)
  rates = data[:32000]
  print('rates', np.mean(data[:32000]), np.mean(data[8000:]))
#+end_src

#+RESULTS:
: data (40000, 23)
: rates 5.299837 7.0409184

#+begin_src ipython
  fig, ax = plt.subplots()

  N_E = 32000
  r_min = 0
  r_max = 1.5 * np.mean(data[:N_E])

  times = get_times(conf_name)
  times = times[:data.shape[1]]

  im = ax.imshow(rates, aspect='auto', cmap='jet',vmin=0, vmax=r_max, extent=[times[0], times[-1], 0, N_E])

  ax.set_xlabel('Time (s)')
  ax.set_ylabel('Prefered Location (°)')
  ax.set_yticks([0, N_E/4, N_E/2, 3*N_E/4, N_E], [0, 90, 180, 270, 360])

  cbar = plt.colorbar(im, ax=ax)
  cbar.set_label("Firing Rate (Hz)")
  # cbar.set_ticks([0, 5, 10])
  plt.savefig('./neurons.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/67d163fb439e7ba3a126f7aa4036ae9de59b9b80.png]]

**** Fourier vs Time

#+begin_src ipython
  m0, m1, phi = decode_bump(rates, axis=0)

  times = get_times(conf_name)
  times = times[:data.shape[1]]
  fig, ax = plt.subplots(1, 3, figsize=(2*width, height))
  ax[0].plot(times, m0)
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\mathcal{F}^0$')
  ax[0].set_xticks([0, 2, 4, 6, 8, 10])
  # ax[0].set_yticks([0, 1, ])
  # ax[0].set_ylim([0, 5])

  ax[1].plot(times, m1 / m0)
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('$\mathcal{F}^1 / \mathcal{F}^0$')
  ax[1].set_xticks([0, 2, 4, 6, 8, 10])

  ax[2].plot(times, phi * 180 / np.pi)
  ax[2].set_xlabel('Time (s)')
  ax[2].set_ylabel('$\phi$')
  ax[2].set_yticks([0, 90, 180, 270, 360])
  ax[2].set_xticks([0, 2, 4, 6, 8, 10])
  plt.tight_layout()
  plt.show()
  #+end_src

#+RESULTS:
[[file:./.ob-jupyter/80397ae7df4f2dee492fd728ffb108131deb4dab.png]]


**** Spatial profile

#+begin_src ipython
  smooth_E = circcvl(rates, windowSize=3200, axis=0)
  theta = np.linspace(0, 360, rates.shape[0])

  plt.plot(theta, smooth_E[:, 0] , 'b')
  plt.plot(theta, smooth_E[:, -1], 'r')

  plt.xlabel('Prefered Location (°)')
  plt.ylabel('Rate (Hz)')
  # plt.yticks([5, 10])
  plt.xticks([0, 90, 180, 270, 360]);
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/c926be2793e543b3b52c15612025d23031248f22.png]]

**** Raster

#+begin_src ipython
  import pandas as pd
  import matplotlib.pyplot as plt

  # Read the file into a DataFrame
  filename = '/home/leon/models/lif_cpp/data/simul/spikes.txt'
  df = pd.read_csv(filename, names=['neuron_id', 'spike_time'], sep=' ')

  # Group by 'neuron_id' and aggregate the 'spike_time' into lists
  grouped = df.groupby('neuron_id')['spike_time'].apply(list)

  # Now 'grouped' is a DataFrame with 'neuron_id' and a list of 'spike_time's
  # You can print it out to verify its structure
  print(grouped.head())
#+end_src

#+begin_src ipython
  # If you want to visualize this in a raster plot:
  fig, ax = plt.subplots()
  
  plt.eventplot(grouped, lineoffsets=grouped.index, linelengths=1)

  ax.set_xlabel('Spike Time')
  ax.set_ylabel('Neuron ID')
  ax.set_title('Raster Plot')

  # Display the plot
  plt.show()
#+end_src

#+RESULTS:
