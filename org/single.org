#+STARTUP: fold
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session lif :kernel dual_data
# #+PROPERTY: header-args:ipython :results both :exports both :async yes :session /ssh:172.26.20.46:~/.local/share/jupyter/runtime/kernel-343f5c4f-82fe-4da8-aa26-6dafafa92f96.json :kernel dual_data

* Notebook Configuration
** Settings
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/models/lif_cpp/notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python

** Imports
#+begin_src ipython
  import sys
  sys.path.insert(0, '/home/leon/models/lif_cpp')  
  REPO_PATH = "/home/leon/models/lif_cpp"

  import subprocess
  import pandas as pd
  from time import sleep
  from yaml import safe_load
  from scipy.stats import circmean
  from run_model import run_cpp, update_conf, restore_conf
  from analysis.decode import decode_bump, circcvl  
#+end_src

#+RESULTS:

* Helpers
#+begin_src ipython
  def get_data(session='/'):
    # Open the file in binary mode and read the data
    with open('/home/leon/models/lif_cpp/data/simul/'+ session + '/rates.txt', 'rb') as f:
      data = np.fromfile(f, dtype=np.float32)
    # Now 'data' is a numpy array containing your data
    return data.reshape(-1, 40000).T
 #+end_src

 #+RESULTS:

#+begin_src ipython
  def get_times():
       config = safe_load(open("/home/leon/models/lif_cpp/conf/config_LR.yml", "r"))
       
       times = np.arange(config['T_STEADY'], config['DURATION'], config['T_WINDOW'])
       times -= config['T_STEADY']
       times /= 1000.0

       return times
#+end_src

#+RESULTS:

#+begin_src ipython
  def gram_schmidt(a, b):
      e1 = a / np.linalg.norm(a)
      v = b - np.dot(b, e1) * e1
      e2 = v / np.linalg.norm(v)

      return np.arctan2(e2, e1)
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_index():
      ksi_1 = np.fromfile('../data/matrix/ksi_1.txt', dtype=np.float32)
      ksi_2 = np.fromfile('../data/matrix/ksi_2.txt', dtype=np.float32) 
      # theta = np.arctan2(ksi_2 / np.linalg.norm(ksi_2), ksi_1 / np.linalg.norm(ksi_1))
      theta = gram_schmidt(ksi_1, ksi_2)

      return theta.argsort()
#+end_src

#+RESULTS:

* Connectivity
#+begin_src sh
  cd $HOME/models/lif_cpp/src
  nvcc -lyaml-cpp mat.cu globals.cpp
#+end_src

#+RESULTS:

#+begin_src ipython
  arr = np.fromfile('../data/matrix/colptr.txt', dtype=np.uint)  # specify the dtype according to your data
  print(arr)
#+end_src

#+RESULTS:
: [20002519 20103263 20148192 ... 39849837 39803895 39915849]

* Compilation
#+begin_src sh
  cd $HOME/models/lif_cpp
  make clean
  make
#+end_src

#+RESULTS:
| rm  | -rf   | ./obj/*.o    | ./bin/LifNet  |                   |               |                  |                  |             |                      |                           |               |                |                     |             |                      |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/globals.cpp     | -o          | obj/globals.o        |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/lif_network.cpp | -o          | obj/lif_network.o    |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/main.cpp        | -o          | obj/main.o           |                           |            |
| g++ | -Wall | -std=c++17   | -Ofast        | -s                | -march=native | -funroll-loops   | -ftree-vectorize | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp    | -c             | src/sparse_mat.cpp  | -o          | obj/sparse_mat.o     |                           |            |
| g++ | -o    | ./bin/LifNet | obj/globals.o | obj/lif_network.o | obj/main.o    | obj/sparse_mat.o | -Wall            | -std=c++17  | -Ofast               | -s                        | -march=native | -funroll-loops | -ftree-vectorize    | -ffast-math | -fomit-frame-pointer | -fexpensive-optimizations | -lyaml-cpp |

* Single trial
** Simulation

#+begin_src ipython
  session = 'single_trial'
  conf_path = REPO_PATH + '/conf/config_LR.yml'
  run_cpp(session, conf_path=conf_path)
#+end_src

#+RESULTS:

** Analysis
**** Rates

#+begin_src ipython
  session = '/'
  session = '/LR_DPA_last_phi_0_ini_0'
  data = get_data(session)
  print('data', data.shape)
  rates = data[:32000]
  print('rates', np.mean(data[:32000]), np.mean(data[8000:]))
#+end_src

#+RESULTS:
: data (40000, 51)
: rates 2.766571 8.920941

#+begin_src ipython  
  index_order = get_index()
  rates_ordered = rates[index_order]
#+end_src

#+RESULTS:

#+begin_src ipython
  width = 7
  golden_ratio = (5**.5 - 1) / 2
  fig, ax = plt.subplots(1, 2, figsize= [1.5*width, width * golden_ratio])

  time = np.linspace(0, 12, 28)
  print(time.shape)
  im = ax[0].imshow(rates, aspect='auto', vmin=0, vmax=10, cmap='jet', extent=[0, 12, 0, 32000])

  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('Neuron #')
  ax[0].set_yticks([0, 32000/4, 32000/2, 3*32000/4, 32000])
  ax[0].set_title('Unordered')

  im = ax[1].imshow(rates_ordered, aspect='auto', vmin=0, vmax=10, cmap='jet', extent=[0, 12, 0, 32000])
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('Pref. Location (Â°)')
  ax[1].set_yticks([0, 32000/4, 32000/2, 3*32000/4, 32000], [0, 90, 180, 270, 360])
  ax[1].set_title('Ordered')
  
  cbar = plt.colorbar(im, ax=ax[1])
  cbar.set_label("Firing Rate (Hz)")
  cbar.set_ticks([0, 5, 10])
  plt.savefig('./neurons.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (28,)
[[file:./.ob-jupyter/4628222e04d47afa3a228e158a8d1087ac2a0784.png]]
:END:
**** Fourier vs Time

#+begin_src ipython
  # data = get_data(session)

  rates_E = rates_ordered
  m0, m1, phi = decode_bump(rates_E, axis=0)

  times = get_times()
  times = times[:data.shape[1]]

  fig, ax = plt.subplots(1, 3, figsize=(2*width, height))
  ax[0].plot(times, m0)
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\mathcal{F}^0$')
  # ax[0].set_yticks([0, 1, ])
  # ax[0].set_ylim([0, 5])

  ax[1].plot(times, m1 / m0)
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('$\mathcal{F}^1 / \mathcal{F}^0$')
  # ax[1].set_yticks([0, 0.5, 1, 1.5])
  # ax[1].set_ylim([0, 1])

  ax[2].plot(times, phi * 180 / np.pi)
  ax[2].set_xlabel('Time (s)')
  ax[2].set_ylabel('$\phi$')
  ax[2].set_yticks([0, 90, 180, 270, 360])
  plt.tight_layout()
  plt.show()
  #+end_src

#+RESULTS:
:RESULTS:
: /tmp/ipykernel_1249738/3551809589.py:16: RuntimeWarning: invalid value encountered in divide
:   ax[1].plot(times, m1 / m0)
[[file:./.ob-jupyter/6bdadf16492dd9fede5f1ea606fb73aaeef60ddd.png]]
:END:

#+begin_src ipython
  from matplotlib.patches import Circle

  fig, ax = plt.subplots()

  theta = [ m1 * np.cos(phi), m1 * np.sin(phi)]
  ax.plot(theta[0], theta[1], color='b')
  ax.plot(theta[0][0], theta[1][0], '*', ms=10, color='b')
  ax.plot(theta[0][-1], theta[1][-1], 'o', ms=10, color='r')
  ax.axis('off')
  # ax.set_title('Dual Go')
  # Create a circle patch
  circle = Circle((0, 0), radius=2.5, color='blue', fill=False, lw=20, alpha=0.1)

  # Add the circle to the current Axes
  ax.add_patch(circle)

  # Set equal scaling by changing the axis limits or the plot aspect ratio
  ax.axis('equal')
  plt.savefig('trajectory_A.svg', dpi=300)
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/fd4ac829b05778fc4520ccfe90d779aade39dad4.png]]

**** Spatial profile

#+begin_src ipython
  smooth_E = circcvl(rates_E, windowSize=3000, axis=0)
  theta = np.linspace(0, 360, rates_E.shape[0])
  plt.plot(theta, smooth_E[:, 0])
  plt.plot(theta, smooth_E[:, -1])
  
  plt.xlabel('Prefered Location (Â°)')
  plt.ylabel('Rate (Hz)')
  # plt.yticks([0, 5])
  plt.xticks([0, 90, 180, 270, 360]);
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/d9c20b120453159e49209a24eade763200262e52.png]]

#+BEGIN_SRC ipython

#+END_SRC

#+RESULTS:

**** Raster

#+begin_src python
  import numpy as np
  import matplotlib.pyplot as plt
  import os

  filename = '/home/leon/models/lif_cpp/data/simul/spikes.txt'

  if not os.path.isfile(filename):
      raise FileNotFoundError(f"File {filename} not found.")

  # Assume an 'int' is 4 bytes and a 'float' is 4 bytes
  dt = np.dtype([('neuron_id', np.int32), ('spike_time', np.float32)])

  # Make sure to open the file in binary mode
  with open(filename, 'rb') as f:
      spikes = np.fromfile(f, dtype=dt)

  # Extract neuron IDs and spike times for plotting
  # neuron_ids = spikes['neuron_id']
  # spike_times = spikes['spike_time']

#+end_src

#+RESULTS:
: None

#+begin_src ipython
print(spikes)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[49], line 1[0m
: [0;32m----> 1[0m [38;5;28mprint[39m([43mspikes[49m)
: 
: [0;31mNameError[0m: name 'spikes' is not defined
:END:

#+begin_src ipython
# Generate the raster plot
plt.scatter(spike_times, neuron_ids, marker='|')
plt.xlabel('Time')
plt.ylabel('Neuron ID')
plt.title('Raster plot of neuronal spike times')
plt.show()
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mNameError[0m                                 Traceback (most recent call last)
: Cell [0;32mIn[6], line 2[0m
: [1;32m      1[0m [38;5;66;03m# Generate the raster plot[39;00m
: [0;32m----> 2[0m plt[38;5;241m.[39mscatter([43mspike_times[49m, neuron_ids, marker[38;5;241m=[39m[38;5;124m'[39m[38;5;124m|[39m[38;5;124m'[39m)
: [1;32m      3[0m plt[38;5;241m.[39mxlabel([38;5;124m'[39m[38;5;124mTime[39m[38;5;124m'[39m)
: [1;32m      4[0m plt[38;5;241m.[39mylabel([38;5;124m'[39m[38;5;124mNeuron ID[39m[38;5;124m'[39m)
: 
: [0;31mNameError[0m: name 'spike_times' is not defined
:END:
