#+STARTUP: fold
#+TITLE: Cholinergic neuromodulation of prefrontal attractor dynamics controls performance in spatial WM
#+PROPERTY: header-args:ipython :results both :exports both :async yes :session dual_data :kernel dual_data

* notebook settings
#+begin_src ipython
  %load_ext autoreload
  %autoreload 2
  %reload_ext autoreload

  %run /home/leon/models/lif_cpp/notebooks/setup.py
  %matplotlib inline
  %config InlineBackend.figure_format = 'png'
#+end_src

#+RESULTS:
:RESULTS:
: The autoreload extension is already loaded. To reload it, use:
:   %reload_ext autoreload
: Python exe
: /home/leon/mambaforge/envs/dual_data/bin/python
: <Figure size 600x370.82 with 0 Axes>
:END:

* Spiking network model
** imports
#+begin_src ipython
  import sys
  sys.path.insert(0, '/home/leon/models/lif_cpp')  
  REPO_PATH = "/home/leon/models/lif_cpp"
#+end_src

#+RESULTS:

#+begin_src ipython
  import subprocess
  from time import sleep
  from yaml import safe_load

  from run_model import run_cpp, update_conf, restore_conf
  from analysis.decode import decode_bump, circcvl
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_data(session='/'):
    # Open the file in binary mode and read the data
    with open('/home/leon/models/lif_cpp/data/simul/'+ session + '/rates.txt', 'rb') as f:
      data = np.fromfile(f, dtype=np.float32)
      
    # Now 'data' is a numpy array containing your data
    return data.reshape(-1, 40000).T
 #+end_src

#+RESULTS:

#+begin_src ipython
  def get_times():
       config = safe_load(open("/home/leon/models/lif_cpp/conf/config_EI.yml", "r"))

       times = np.arange(config['T_STEADY'], config['DURATION'], config['T_WINDOW'])
       times -= config['T_STEADY']
       times /= 1000.0
       
       return times
#+end_src

#+RESULTS:
** Connectivity
#+begin_src sh
  cd $HOME/models/lif_cpp/src
  nvcc -lyaml-cpp mat.cu globals.cpp
#+end_src

#+RESULTS:

#+begin_src ipython
  arr = np.fromfile('../data/matrix/colptr.txt', dtype=np.uint)  # specify the dtype according to your data
  print(arr)
#+end_src

#+RESULTS:
: [20002519 20103263 20148192 ... 39849837 39803895 39915849]

** Single trial

*** Compilation
#+begin_src sh
  cd $HOME/models/lif_cpp
  make 
#+end_src

#+RESULTS:
| g++ | -Wall | -lyaml-cpp   | -std=c++17       | -pthread          | -Ofast        | -s         | -c    | src/lif_network.cpp | -o         | obj/lif_network.o |        |    |
| g++ | -o    | ./bin/LifNet | obj/sparse_mat.o | obj/lif_network.o | obj/globals.o | obj/main.o | -Wall | -lyaml-cpp          | -std=c++17 | -pthread          | -Ofast | -s |

*** Simulation
#+begin_src ipython
  # pass screen session_name to run_cpp
  session = 'single_trial'
  run_cpp(session)
#+end_src

#+RESULTS:

*** Analysis
**** Raster
#+begin_src ipython
  session = '/'
  data = get_data(session)
  print('data', data.shape)
  print('rates', np.mean(data[:30000]), np.mean(data[10000:]))
#+end_src

#+RESULTS:
: data (40000, 19)
: rates 4.2570314 7.334505

#+begin_src ipython  
  theta = np.linspace(0, 360, 30000)
  times = get_times()
  print(times.shape)
  plt.imshow(data[:30000], aspect='auto', vmin=0, vmax=10, cmap='jet', extent=[0, times[data.shape[1]], 0, 30000], origin='lower')

  plt.xlabel('Time (s)')
  plt.ylabel('Pref. Location (°)')
  plt.yticks([0, 30000/4, 30000/2, 3*30000/4, 30000], [0, 90, 180, 270, 360])

  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (20,)
[[file:./.ob-jupyter/ca7c6dec7ff65fa4216d2224c1991b4b4ca9d27d.png]]
:END:

**** Fourier vs Time
#+begin_src ipython
  data = get_data(session)

  rates_E = data[:30000]
  m0, m1, phi = decode_bump(rates_E, axis=0)

  times = get_times()
  times = times[:data.shape[1]]

  fig, ax = plt.subplots(1, 3, figsize=(2*width, height))
  ax[0].plot(times, m0)
  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\mathcal{F}^0$')
  # ax[0].set_yticks([0, 1, ])
  # ax[0].set_ylim([0, 5])

  ax[1].plot(times, m1/m0)
  ax[1].set_xlabel('Time (s)')
  ax[1].set_ylabel('$\mathcal{F}^1 / \mathcal{F}^0$')
  ax[1].set_yticks([0, 0.5, 1, 1.5])
  # ax[1].set_ylim([0, 1])

  ax[2].plot(times, phi * 180 / np.pi)
  ax[2].set_xlabel('Time (s)')
  ax[2].set_ylabel('$\phi$')
  ax[2].set_yticks([0, 90, 180, 270, 360])
  plt.tight_layout()
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/36a33a1fcbbc014d73b1eb74cfec1563193d4ea4.png]]

**** Spatial profile
#+begin_src ipython
  smooth_E = circcvl(rates_E, windowSize=3000, axis=0)
  theta = np.linspace(0, 360, rates_E.shape[0])
  plt.plot(theta, smooth_E[:, -1])

  plt.xlabel('Prefered Location (°)')
  plt.ylabel('Rate (Hz)')
  # plt.yticks([0, 5])
  plt.xticks([0, 90, 180, 270, 360]);
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/681a427eb804572824c8e09627d8a73a07a7faa4.png]]

#+BEGIN_SRC ipython
  0.002*1.25
#+END_SRC

#+RESULTS:
: 0.0025

** Multiple Trials
*** Simulation
#+begin_src ipython
  ini_list = np.arange(0, 10)
  phi_list = np.linspace(0, 315, 8)
#+end_src

#+RESULTS:

**** Control

#+begin_src ipython
  for ini in ini_list:
      for phi in phi_list:
          session = "EI_phi_%d_ini_%d" % (phi, ini)
          data_path = REPO_PATH + '/data/simul/' + session
          update_conf(REPO_PATH + '/conf/config_EI', 'DATA_PATH', data_path)
          update_conf(REPO_PATH + '/conf/config_EI', 'PHI_STIM', float(phi), axis=0)

          sleep(.2)
          run_cpp(session)
          sleep(.2)

          subprocess.run([REPO_PATH + '/src/mem_usage.sh'])
          subprocess.run([REPO_PATH + '/src/cpu_usage.sh'])
          
  restore_conf(REPO_PATH + '/conf/config_EI.yml')
#+end_src

#+RESULTS:
: File moved successfully!

**** NB ON
#+begin_src ipython
  for ini in ini_list:
      for phi in phi_list:
          session = "EI_on_phi_%d_ini_%d" % (phi, ini)
          data_path = REPO_PATH + '/data/simul/' + session
          update_conf(REPO_PATH + '/conf/config_EI', 'DATA_PATH', data_path)
          update_conf(REPO_PATH + '/conf/config_EI', 'Iext', float(.0045), axis=0)
          update_conf(REPO_PATH + '/conf/config_EI', 'PHI_STIM', float(phi), axis=0)

          sleep(.2)
          run_cpp(session)
          sleep(.2)

          subprocess.run([REPO_PATH + '/src/mem_usage.sh'])
          subprocess.run([REPO_PATH + '/src/cpu_usage.sh'])

  restore_conf(REPO_PATH + '/conf/config_EI.yml')
#+end_src

#+RESULTS:
:  CPU_USAGE > 90.0 %, sleeping for a while ...
:  CPU_USAGE > 90.0 %, sleeping for a while ...
:  CPU_USAGE > 90.0 %, sleeping for a while ...
:  CPU_USAGE > 90.0 %, sleeping for a while ...
: File moved successfully!

*** Analysis
#+begin_src ipython
  rates = []
  for ini in ini_list:
      for phi in phi_list:
          session = "/EI_phi_%d_ini_%d/" % (phi, ini)
          rate = get_data(session)
          rates.append(rate[:30000])
          
  rates = np.array(rates)
  print(rates.shape)
#+end_src

#+RESULTS:
: (80, 30000, 19)

#+begin_src ipython
  rates_on = []
  for ini in ini_list:
      for phi in phi_list:
          session = "/EI_on_phi_%d_ini_%d/" % (phi, ini)
          rate = get_data(session)
          rates_on.append(rate[:30000])
          
  rates_on = np.array(rates_on)
  print(rates_on.shape)

#+end_src
#+RESULTS:
: (80, 30000, 19)

#+begin_src ipython
  rates = rates.reshape(10, 8, 30000, -1)
  rates_on = rates_on.reshape(10, 8, 30000, -1)
#+end_src

#+RESULTS:

#+begin_src ipython
  import pandas as pd

  def get_df(rates):
      n_trials, n_phi, n_neurons, n_times = rates.shape

      # Create indices
      trials_ind, phi_ind, neurons_ind, times_ind = np.indices((n_trials, n_phi, n_neurons, n_times))

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten(),
          'phi': phi_ind.flatten(),          
          'rates': rates.flatten()
      })

      return df

#+end_src

#+RESULTS:

#+begin_src ipython
  df = get_df(rates)
  df_on = get_df(rates_on)
#+end_src

#+RESULTS:

#+begin_src ipython
  df_code = df.groupby(['time', 'trial', 'phi'])['rates'].apply(decode_bump).reset_index()
  df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
  df_code = df_code.drop(columns=['rates'])
  print(df_code.head())

  df_code_on = df_on.groupby(['time', 'trial', 'phi'])['rates'].apply(decode_bump).reset_index()
  df_code_on[['m0', 'm1', 'phase']] = pd.DataFrame(df_code_on['rates'].tolist(), index=df_code_on.index)
  df_code_on = df_code_on.drop(columns=['rates'])
  print(df_code_on.head())  
#+end_src

#+RESULTS:
#+begin_example
     time  trial  phi        m0        m1     phase
  0     0      0    0  1.058400  0.023029  2.395471
  1     0      0    1  1.062267  0.029419  2.113271
  2     0      0    2  1.048400  0.052818  2.359141
  3     0      0    3  1.040667  0.016085  4.379736
  4     0      0    4  1.043200  0.023995  1.439798
     time  trial  phi        m0        m1     phase
  0     0      0    0  4.966933  0.318566  1.829095
  1     0      0    1  5.096800  0.366640  2.171003
  2     0      0    2  5.121867  0.508155  2.202363
  3     0      0    3  4.923067  0.152306  2.486222
  4     0      0    4  4.941733  0.195970  2.195592
#+end_example

#+begin_src ipython
  end_point = df_code[df_code.time==df_code.time.iloc[-1]]
  end_point = end_point.drop(columns=['time', 'trial'])
  print(end_point.head())
  
  end_point_on = df_code_on[df_code_on.time==df_code_on.time.iloc[-1]]
  end_point_on = end_point_on.drop(columns=['time', 'trial'])
  print(end_point_on.head())
#+end_src

#+RESULTS:
#+begin_example
        phi        m0        m1     phase
  1440    0  5.840933  2.903570  0.174271
  1441    1  6.331467  3.328041  5.638314
  1442    2  6.149867  3.026477  4.624583
  1443    3  5.446267  2.892254  3.853657
  1444    4  5.254933  2.768927  3.138333
        phi        m0        m1     phase
  1440    0  8.233733  0.413433  6.256501
  1441    1  8.263333  0.833519  6.220012
  1442    2  7.933466  0.385731  5.356735
  1443    3  8.229333  1.042361  3.893860
  1444    4  7.999733  1.108249  3.340193
#+end_example

*** Phases 
#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  # sns.lineplot(data=df_code, x='time', y=df_code['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], hue='phi', alpha=0.25)

  # sns.lineplot(data=df_code_on, x='time', y=df_code_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], hue='phi', alpha=0.25)

  ax[0].set_xlabel('Time (s)')
  ax[0].set_ylabel('$\phi$ (°)')
  ax[0].set_xticks([0, 1, 2, 3, 4])
  ax[0].set_yticks([0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi, legend=False, ax=ax[1], bins=200, kde=False, stat='density')
  sns.histplot(data=end_point_on, x=end_point_on['phase']*180/np.pi, legend=False, ax=ax[1], bins=200, kde=False, stat='density')

  ax[1].set_xlabel('$\phi$ (°)')
  ax[1].set_ylabel('$Count$')
  ax[1].set_xticks([0, 90, 180, 270, 360])
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/c33533563847f39622c3507a8f0e8ec42d6bdeb9.png]]

*** Endpoint Errors

#+begin_src ipython
  from scipy.stats import circmean
  
  def get_precision(x):
      return x - circmean(x)
#+end_src

#+RESULTS:

#+begin_src ipython
  # end_point['accuracy'] = (end_point.phase - np.pi) % (2 * np.pi)
  # end_point['precision'] = get_precision(end_point.phase)

  # end_point_on['accuracy'] = (end_point_on.phase - np.pi) % (2 * np.pi)
  # end_point_on['precision'] = get_precision(end_point_on.phase)

  end_point['accuracy'] = (end_point.phase - end_point['phi'] / 180 * np.pi) % (2 * np.pi)
  end_point['precision'] = end_point.groupby('phi')['phase'].apply(get_precision)

  end_point_on['accuracy'] = (end_point_on.phase - end_point_on['phi'] / 180 * np.pi) % (2 * np.pi)
  end_point_on['precision'] = end_point_on.groupby('phi')['phase'].apply(get_precision)

  print(end_point.head())

#+end_src

#+RESULTS:
#+begin_example
        phi        m0        m1     phase  accuracy  precision
  1440    0  5.840933  2.903570  0.174271  0.174271  -0.002308
  1441    1  6.331467  3.328041  5.638314  5.620860  -0.002163
  1442    2  6.149867  3.026477  4.624583  4.589677  -0.081671
  1443    3  5.446267  2.892254  3.853657  3.801297  -0.043654
  1444    4  5.254933  2.768927  3.138333  3.068520  -0.028972
  /tmp/ipykernel_875829/2696038204.py:8: FutureWarning: Not prepending group keys to the result index of transform-like apply. In the future, the group keys will be included in the index, regardless of whether the applied function returns a like-indexed object.
  To preserve the previous behavior, use

  	>>> .groupby(..., group_keys=False)

  To adopt the future behavior and silence this warning, use 

  	>>> .groupby(..., group_keys=True)
    end_point['precision'] = end_point.groupby('phi')['phase'].apply(get_precision)
  /tmp/ipykernel_875829/2696038204.py:11: FutureWarning: Not prepending group keys to the result index of transform-like apply. In the future, the group keys will be included in the index, regardless of whether the applied function returns a like-indexed object.
  To preserve the previous behavior, use

  	>>> .groupby(..., group_keys=False)

  To adopt the future behavior and silence this warning, use 

  	>>> .groupby(..., group_keys=True)
    end_point_on['precision'] = end_point_on.groupby('phi')['phase'].apply(get_precision)
#+end_example

#+begin_src ipython
  fig, ax = plt.subplots(1, 3, figsize=[2*width, height])

  sns.histplot(data=end_point, x=end_point['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density')
  sns.histplot(data=end_point_on, x=end_point_on['phase']*180/np.pi, legend=False, lw=2, ax=ax[0], kde=False, bins=200, stat='density')
  ax[0].set_xlabel('$\phi$(°)')
  ax[0].set_ylabel('Density')
  ax[0].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density')
  sns.histplot(data=end_point_on, x=end_point_on['accuracy']*180/np.pi, legend=False, lw=2, ax=ax[1], kde=False, bins=200, stat='density')
  ax[1].set_xlabel('$\phi - \phi_{stim}$ (°)')
  ax[1].set_ylabel('Density')
  ax[1].set_xticks([0, 90, 180, 270, 360])

  sns.histplot(data=end_point, x=end_point['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=False, stat='density', element='step', alpha=0)
  sns.histplot(data=end_point_on, x=end_point_on['precision']*180/np.pi, legend=False, ax=ax[2], bins='auto', kde=False, stat='density', element='step', alpha=0.)
  ax[2].set_xlabel('$\phi - <\phi>_{trials}$ (°)')
  ax[2].set_ylabel('Density')
  ax[2].set_xlim([-10, 10])

  plt.show()  
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/1e0d84b4340f7fc876fc4a1d7024ae7449cee968.png]]

** Phase space exploration
*** Helpers
#+begin_src ipython
  def get_rates_X(X_list, ini_list, phi_list, X_str='Jee'):
     rates = []
     for ini in ini_list:
        for phi in phi_list:
           for X in X_list:
              session = "/EI_%s_%.2f_phi_%d_ini_%d/" % (X_str, X, phi, ini)
              rate = get_data(session)
              rates.append(rate[:30000])
              
     rates = np.array(rates)
     rates = rates.reshape(len(ini_list), len(phi_list), len(X_list), 30000, -1)
     return rates
#+end_src

#+RESULTS:
: ab91112b-6c1e-462b-aa9e-83df4bc61257

#+begin_src ipython  
  def get_df_ini_X(rates, X_str='Jee'):
      n_trials, n_phi, n_X, n_neurons, n_times = rates.shape

      # Create indices
      trials_ind, phi_ind, X_ind, neurons_ind, times_ind = np.indices((n_trials, n_phi, n_X, n_neurons, n_times))

      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'phi': phi_ind.flatten(),
          X_str : X_ind.flatten(),
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten(),
          'rates': rates.flatten()
      })

      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def load_data(X_list, ini_list, X_str='Jee'):
      rates = get_rates_X(X_list, ini_list, X_str)
      df = get_df_ini_X(rates, X_str)
      return df
#+end_src

#+RESULTS:

#+begin_src ipython
  def get_df_code(df, X_str='Jee'):
      df_code = df.groupby(['time', 'trial', 'phi', X_str])['rates'].apply(decode_bump).reset_index()
      df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
      df_code = df_code.drop(columns=['rates'])
      print(df_code.head())
      
      end_point = df_code[df_code.time==df_code.time.iloc[-1]]
      end_point = end_point.drop(columns=['time'])
      print(end_point.head())  
      return df_code, end_point  
#+end_src

#+RESULTS:
***** Load Data
#+begin_src ipython
  df = load_data(Jee_list, ini_list, 'Jee')
#+end_src

#+RESULTS:

#+begin_src ipython
  df_code, end_point = get_df_code(df, 'Jee')
#+end_src

#+RESULTS:

***** Plot
#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='Jee', y='m0', ax=ax[0], legend=False)
  ax[0].set_xlabel('$J_{EE}$')
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')

  sns.lineplot(end_point, x='Jee', y=end_point['m1'], ax=ax[1], legend=False)
  ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
  # sns.lineplot(end_point, x='Jee', y=end_point['m1']/end_point['m0'], ax=ax[1], legend=False)
  # ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[1].set_xlabel('$J_{EE}$')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/8f4bde6659a8d2e4eebc50f20d0377faf6d1a946.png]]

#+begin_src ipython
print(Jee_list)
#+end_src

#+RESULTS:
: [15 16 17 18 19 20 21 22 23 24 25]

*** Varying Jee
**** Simulation
***** Helpers
#+begin_src ipython
  def run_loop_Jee(Jee_list, ini_list):

      for ini in ini_list:
          for Jee in Jee_list:
              session = "Jee_%.2f_ini_%d" % (Jee, ini)
              data_path = REPO_PATH + '/data/simul/' + session
              update_conf(REPO_PATH + '/conf/config_EI', 'DATA_PATH', data_path)
              update_conf(REPO_PATH + '/conf/config_EI', 'Jab', float(Jee), axis=0)

              sleep(.2)
              run_cpp(session)
              sleep(.2)

              subprocess.run([REPO_PATH + '/src/mem_usage.sh'])
              subprocess.run([REPO_PATH + '/src/cpu_usage.sh'])
              
      restore_conf(REPO_PATH + '/conf/config_EI.yml')

#+end_src

#+RESULTS:
***** Run
#+begin_src ipython
  Jee_list = np.arange(15, 26, 1)
  print(Jee_list)
  ini_list = np.arange(10)
#+end_src

#+RESULTS:
: [15 16 17 18 19 20 21 22 23 24 25]

#+begin_src ipython
  run_loop_Jee(Jee_list, ini_list)
#+end_src

#+RESULTS:
: File moved successfully!
**** Analysis
*** Varying Jei
**** Simulation
***** Helpers
#+begin_src ipython
  def run_loop_Jei(Jei_list, ini_list):

      for ini in ini_list:          
          for Jei in Jei_list:
              session = "Jei_%.2f_ini_%d" % (Jei, ini)
              data_path = REPO_PATH + '/data/simul/' + session
              update_conf(REPO_PATH + '/conf/config_EI', 'DATA_PATH', data_path)
              update_conf(REPO_PATH + '/conf/config_EI', 'Jab', float(-Jei), axis=1)
              
              sleep(.2)
              run_cpp(session)
              sleep(.2)

          sleep(5)

      restore_conf(REPO_PATH + '/conf/config_EI.yml')
#+end_src

#+RESULTS:
***** Run
#+begin_src ipython
  Jei_list = np.linspace(0.75, 1.75, 21)
  print(Jei_list)
  ini_list = np.arange(1)
#+end_src

#+RESULTS:
: [0.75 0.8  0.85 0.9  0.95 1.   1.05 1.1  1.15 1.2  1.25 1.3  1.35 1.4
:  1.45 1.5  1.55 1.6  1.65 1.7  1.75]

#+begin_src ipython
  run_loop_Jei(Jei_list, ini_list)
#+end_src

#+RESULTS:
: File moved successfully!
**** Analysis
***** Helpers
#+begin_src ipython  
  def get_rates_Jei(Jei_list, ini_list):
     rates = []

     for ini in ini_list:
        for Jei in Jei_list:

           session = "/Jei_%.2f_ini_%d/" % (Jei, ini)
           rate = get_data(session)
           rates.append(rate[:30000])
           
     rates = np.array(rates)
     return rates
#+end_src

#+RESULTS:

***** Load Data
#+begin_src ipython
  # Jei_list = Jei_list[Jei_list>.85]
  rates = get_rates_Jei(Jei_list, ini_list)
#+end_src

#+RESULTS:

#+begin_src ipython
  rates = rates.reshape(len(ini_list), len(Jei_list), 30000, -1)
  print(rates.shape)
#+end_src
#+RESULTS:
: (1, 21, 30000, 59)

#+begin_src ipython
 m0, m1, phi = decode_bump(rates, axis=2)
#+end_src

#+RESULTS:

#+begin_src ipython
  print(m0.shape, m1.shape)
  m0 = np.mean(m0, 0)
  m1 = np.mean(m1, 0)
  print(m0.shape, m1.shape)
#+end_src

#+RESULTS:
: (1, 21, 59) (1, 21, 59)
: (21, 59) (21, 59)

***** Plot
#+begin_src ipython
  idx = -1
  print(Jei_list[idx])
  print(m0[idx, -1], m1[idx, -1])
#+end_src

#+RESULTS:
: 1.75
: 0.8748 0.052695109436351764


#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  ax[0].plot(Jei_list, m0[:, -1])
  ax[0].set_xlabel('$J_{EI}$')
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')

  ax[1].plot(Jei_list, m1[:,-1])
  # ax[1].plot(Jei_list, m1[:,-1] / m0[:,-1])
  ax[1].set_xlabel('$J_{EI}$')
  ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: 1.75
: 0.8748 0.052695109436351764
[[file:./.ob-jupyter/b51c7c81867ee8e01f05fe1bd956e4eb95334ede.png]]
:END:

*** Varying Ie
#+begin_src ipython
  Ie_list = np.linspace(3, 5, 21)
  ini_list = np.arange(0, 10)
  phi_list = np.linspace(0, 315, 8)
#+end_src

#+RESULTS:

**** Simulation
#+begin_src ipython
  def run_loop_Ie(Ie_list, ini_list, phi_list):
      
      for ini in ini_list:
          for phi in phi_list:
              for Ie in Ie_list:
                  session = "EI_Ie_%.2f_phi_%d_ini_%d" % (Ie, phi, ini)
                  data_path = REPO_PATH + '/data/simul/' + session
                  update_conf(REPO_PATH + '/conf/config_EI', 'DATA_PATH', data_path)
                  update_conf(REPO_PATH + '/conf/config_EI', 'Iext', float(Ie/1000.0), axis=0)
                  update_conf(REPO_PATH + '/conf/config_EI', 'PHI_STIM', float(phi), axis=0)

                  sleep(.2)
                  run_cpp(session)
                  sleep(.2)

                  subprocess.run([REPO_PATH + '/src/mem_usage.sh'])
                  subprocess.run([REPO_PATH + '/src/cpu_usage.sh'])

      restore_conf(REPO_PATH + '/conf/config_EI.yml')
#+end_src

#+RESULTS:

#+begin_src ipython
  run_loop_Ie(Ie_list, ini_list, phi_list)
#+end_src

#+RESULTS:
#+begin_example
  CPU_USAGE > 90.0 %, sleeping for a while ... CPU_USAGE > 90.0 %, sleeping for a while ...
  CPU_USAGE > 90.0 %, sleeping for a while ...
  CPU_USAGE > 90.0 %, sleeping for a while ...
  CPU_USAGE > 90.0 %, sleeping for a while ...
  CPU_USAGE > 90.0 %, sleeping for a while ...
  CPU_USAGE > 90.0 %, sleeping for a while ...
#+end_example

**** Analysis
***** Load Data
#+begin_src ipython
  df = load_data(Ie_list, ini_list, 'Ie')
#+end_src

#+RESULTS:
: (119700000,)

#+begin_src ipython
  df_code, end_point = get_df_code(df, 'Ie')
#+end_src

#+RESULTS:
#+begin_example
     time  trial  Ie        m0        m1     phase
  0     0      0   0  0.108667  0.003554  3.218389
  1     0      0   1  0.149333  0.007059  1.844911
  2     0      0   2  0.197067  0.002185  2.508142
  3     0      0   3  0.250667  0.008160  2.963951
  4     0      0   4  0.309600  0.009383  3.665971
        trial  Ie        m0        m1     phase
  3780      0   0  0.130000  0.018923  3.554873
  3781      0   1  0.171733  0.032125  3.230753
  3782      0   2  0.237733  0.035532  3.059488
  3783      0   3  0.306000  0.046328  3.201897
  3784      0   4  0.380400  0.080034  3.130849
#+end_example

***** Plot
#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='Ie', y='m0', ax=ax[0], legend=False)
  ax[0].set_xlabel('FF Input')
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')
  ax[0].set_xticks(np.linspace(0, len(Ie_list), 5), np.round(np.linspace(Ie_list[0], Ie_list[-1], 5), 2))

  # sns.lineplot(end_point, x='Ie', y=end_point['m1'], ax=ax[1], legend=False)
  # ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
  
  sns.lineplot(end_point, x='Ie', y=end_point['m1']/end_point['m0'], ax=ax[1], legend=False)
  ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[1].set_xlabel('FF Input')
  ax[1].set_xticks(np.linspace(0, len(Ie_list), 5), np.round(np.linspace(Ie_list[0], Ie_list[-1], 5), 2))

  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/eb39b315e41bf65a020b835405f4ff65fb3445a4.png]]

*** Varying kappa
**** simulations
#+begin_src ipython
  kappa_list = np.arange(4, 8.4, .2)
  print(len(kappa_list))
  ini_list = np.arange(10)
#+end_src

#+RESULTS:
: 22

#+begin_src ipython
  for kappa in kappa_list:

      update_conf(REPO_PATH + '/conf/config_EI', 'IF_LOAD_MAT', 0)
      update_conf(REPO_PATH + '/conf/config_EI', 'IF_SAVE_MAT', 1)

      for ini in ini_list:
          session = "spec_kappa_%.2f_ini_%d" % (kappa, ini)
          data_path = REPO_PATH + '/data/simul/' + session
          update_conf(REPO_PATH + '/conf/config_EI', 'DATA_PATH', data_path)
          update_conf(REPO_PATH + '/conf/config_EI', 'KAPPA', float(kappa), axis=0)

          sleep(.2)
          run_cpp(session)
          sleep(.2)

          update_conf(REPO_PATH + '/conf/config_EI', 'IF_LOAD_MAT', 1)
          update_conf(REPO_PATH + '/conf/config_EI', 'IF_SAVE_MAT', 0)

          if ini==0:
              sleep(90)
              
          subprocess.run([REPO_PATH + '/src/mem_usage.sh'])
          subprocess.run([REPO_PATH + '/src/cpu_usage.sh'])

  restore_conf(REPO_PATH + '/conf/config_EI.yml')

#+end_src

#+RESULTS:
: File moved successfully!
**** Analysis
***** Helpers
#+begin_src ipython
  def get_rates_kappa(kappa_list, ini_list):
     rates = []
     
     for ini in ini_list:
        for kappa in kappa_list:

           session = "/spec_kappa_%.2f_ini_%d/" % (kappa, ini)
           rate = get_data(session)
           rates.append(rate[:30000])

     rates = np.array(rates)
     return rates
#+end_src

#+RESULTS:

#+begin_src ipython
  import pandas as pd

  def get_df(rates):
      n_trials, n_kappa, n_neurons, n_times = rates.shape

      # Create indices
      trials_ind, kappa_ind, neurons_ind, times_ind = np.indices((n_trials, n_kappa, n_neurons, n_times))
      
      # Construct DataFrame
      df = pd.DataFrame({
          'trial': trials_ind.flatten(),
          'kappa': kappa_ind.flatten(),
          'neuron': neurons_ind.flatten(),
          'time': times_ind.flatten(),
          'rates': rates.flatten()
      })

      return df

#+end_src

#+RESULTS:

***** Load Data
#+begin_src ipython
  rates = get_rates_kappa(kappa_list, ini_list)
#+end_src

#+RESULTS:

#+begin_src ipython
  rates = rates.reshape(len(ini_list), len(kappa_list), 30000, -1)
  print(rates.shape)
#+end_src
#+RESULTS:
: (10, 22, 30000, 107)

#+begin_src ipython
  df = get_df(rates)
#+end_src

#+RESULTS:

#+begin_src ipython
  df_code = df.groupby(['time', 'trial', 'kappa'])['rates'].apply(decode_bump).reset_index()
  df_code[['m0', 'm1', 'phase']] = pd.DataFrame(df_code['rates'].tolist(), index=df_code.index)
  df_code = df_code.drop(columns=['rates'])
  print(df_code.head())
#+end_src

#+RESULTS:
:    time  trial  kappa        m0        m1     phase
: 0     0      0      0  1.705867  0.132828  6.110803
: 1     0      0      1  1.707733  0.210327  0.734762
: 2     0      0      2  1.710133  0.148767  6.045033
: 3     0      0      3  1.700000  0.255704  0.169523
: 4     0      0      4  1.670000  0.163353  0.343107

#+begin_src ipython
  end_point = df_code[df_code.time==df_code.time.iloc[-1]]
  end_point = end_point.drop(columns=['time'])
  print(end_point.head())  
#+end_src

#+RESULTS:
:        trial  kappa        m0        m1     phase
: 23320      0      0  1.758667  0.159305  0.674997
: 23321      0      1  1.738667  0.184944  0.456542
: 23322      0      2  1.778267  0.112966  0.241534
: 23323      0      3  1.751600  0.161608  0.255068
: 23324      0      4  1.748933  0.286051  0.047078

***** Plot

#+begin_src ipython
  fig, ax = plt.subplots(1, 2, figsize=[2*width, height])

  sns.lineplot(end_point, x='kappa', y='m0', ax=ax[0], legend=False)
  ax[0].set_xlabel('$\kappa$')
  ax[0].set_ylabel('$\mathcal{F}_0$ (Hz)')

  # sns.lineplot(end_point, x='kappa', y=end_point['m1'], ax=ax[1], legend=False, hue='trial')
  # ax[1].set_ylabel('$\mathcal{F}_1$ (Hz)')
  sns.lineplot(end_point, x='kappa', y=end_point['m1']/end_point['m0'], ax=ax[1], legend=False)
  ax[1].set_ylabel('$\mathcal{F}_1 / \mathcal{F}_0$')
  ax[1].set_xlabel('$\kappa$')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/51e40d60e588b510751e44bff3cd5706dcf16205.png]]

*** Varying Ie & Jee
**** run
#+begin_src ipython
  Jee_list = np.arange(10, 21, 1)
  Ie_list = np.arange(1, 11, 1)
#+end_src

#+RESULTS:

#+begin_src ipython

  for Jee in Jee_list:
      for Ie in Ie_list:

          session = "Ie_%.1f_Jee_%.1f" % (Ie, Jee) 
          data_path = '/home/leon/models/lif_cpp/data/simul/' + session
          update_conf('../conf/config_EI', 'DATA_PATH', data_path)
          update_conf('../conf/config_EI', 'Iext', float(Ie/1000.0), axis=0)
          update_conf('../conf/config_EI', 'Jab', float(Jee), axis=0)

          sleep(.2)
          run_cpp(session)
          sleep(.2)

  sleep(1)
  restore_conf('../conf/config_EI.yml')

#+end_src

#+RESULTS:
: File moved successfully!

**** results
#+begin_src ipython
  # %matplotlib qt

  # Jee_list = np.arange(15, 25, 1)
  # Ie_list = np.arange(0, 5, .5)

  rates = []
  for Ie in Ie_list:
      ini = []
      for Jee in Jee_list:

          session = "/Ie_%.1f_Jee_%.1f/" % (Ie, Jee)
          try:
              r = get_data(session)
              m0, m1, phi = decode_bump(r[:30000], axis=0)
              # print(session)
              # plt.plot(m1)
              # input()
              ini.append(m1)
          except:
              pass
      rates.append(np.array(ini))

#+end_src

#+RESULTS:

#+begin_src ipython
  print(Ie_list)
  print(Jee_list)
  rates = np.array(rates)
  print(rates.shape)
  plt.imshow(np.mean(rates[:,:, -10:], -1).T, aspect='auto', vmin=0, vmax=5, cmap='jet', origin='lower')
  plt.xlabel('$I_{0}$')
  plt.ylabel('$J_{EE}$')
#+end_src

#+RESULTS:
:RESULTS:
: [ 1  2  3  4  5  6  7  8  9 10]
: [10 11 12 13 14 15 16 17 18 19 20]
: (10, 0)
# [goto error]
: [0;31m---------------------------------------------------------------------------[0m
: [0;31mIndexError[0m                                Traceback (most recent call last)
: Cell [0;32mIn[16], line 5[0m
: [1;32m      3[0m rates [38;5;241m=[39m np[38;5;241m.[39marray(rates)
: [1;32m      4[0m [38;5;28mprint[39m(rates[38;5;241m.[39mshape)
: [0;32m----> 5[0m plt[38;5;241m.[39mimshow(np[38;5;241m.[39mmean([43mrates[49m[43m[[49m[43m:[49m[43m,[49m[43m:[49m[43m,[49m[43m [49m[38;5;241;43m-[39;49m[38;5;241;43m10[39;49m[43m:[49m[43m][49m, [38;5;241m-[39m[38;5;241m1[39m)[38;5;241m.[39mT, aspect[38;5;241m=[39m[38;5;124m'[39m[38;5;124mauto[39m[38;5;124m'[39m, vmin[38;5;241m=[39m[38;5;241m0[39m, vmax[38;5;241m=[39m[38;5;241m5[39m, cmap[38;5;241m=[39m[38;5;124m'[39m[38;5;124mjet[39m[38;5;124m'[39m, origin[38;5;241m=[39m[38;5;124m'[39m[38;5;124mlower[39m[38;5;124m'[39m)
: [1;32m      6[0m plt[38;5;241m.[39mxlabel([38;5;124m'[39m[38;5;124m$I_[39m[38;5;132;01m{0}[39;00m[38;5;124m$[39m[38;5;124m'[39m)
: [1;32m      7[0m plt[38;5;241m.[39mylabel([38;5;124m'[39m[38;5;124m$J_[39m[38;5;132;01m{EE}[39;00m[38;5;124m$[39m[38;5;124m'[39m)
: 
: [0;31mIndexError[0m: too many indices for array: array is 2-dimensional, but 3 were indexed
:END:

#+begin_src ipython
  plt.plot(rates[-2, 4])
  plt.show()
  print(Ie_list[-2], Jee_list[4])
  print(Ie_list[4], Jee_list[-2])
  
#+end_src
#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/e328553a8f6548fc32bd4a3a3e1a0e282ca6ec62.png]]
: 4.0 19
: 2.0 23
:END:

** Diffusion analysis
*** NB off/on
**** utils

#+begin_src ipython
  def run_single(folder, phi_list, init_list, I0=0.004):

      data_path = '/home/leon/models/lif_cpp/data/simul/' + session
      update_conf('../conf/config_EI', 'DATA_PATH', data_path)
      update_conf('../conf/config_EI', 'Iext', float(I0), axis=0)
      update_conf('../conf/config_EI', 'DURATION', float(10000))

      sleep(.2)
      run_cpp(session)
      sleep(.2)

      sleep(1)
      restore_conf('../conf/config_EI.yml')
#+end_src

#+RESULTS:

#+begin_src ipython
  def run_phi_ini(folder, phi_list, init_list, I0=0.004):

      for init in init_list:
          for phi in phi_list:

              session = "%s_phi_%d_init_%d" % (folder, phi, init)

              data_path = '/home/leon/models/lif_cpp/data/simul/' + session
              update_conf('../conf/config_EI', 'DATA_PATH', data_path)
              update_conf('../conf/config_EI', 'PHI_STIM', float(phi), axis=0)
              update_conf('../conf/config_EI', 'Iext', float(I0), axis=0)
              update_conf('../conf/config_EI', 'DURATION', float(11000))

              sleep(.2)
              run_cpp(session)
              sleep(.2)
              
      sleep(1)
      restore_conf('../conf/config_EI.yml')

#+end_src

#+RESULTS:

#+begin_src ipython  
  def get_rates(dir, phi_list, init_list):
     rates = []
     for phi in phi_list:

         phase_ini = []
         m1_ini = []
         m0_ini = []
         rate_ini = []

         for init in init_list:
             session = "/%s_phi_%d_init_%d/" % (dir, phi, init)

             # try:
             rate = get_data(session)
             rate_ini.append(rate[:30000])
             # except:
             #     pass
         rates.append(np.array(rate_ini))

     rates = np.array(rates)

     return rates
#+end_src

#+RESULTS:

**** run
#+begin_src ipython
  phi_list = np.linspace(0, 315, 8)
  init_list = np.arange(1, 21, 1)
#+end_src

#+RESULTS:

#+begin_src ipython
  # run_phi_ini('nb_off', phi_list, init_list, I0=0.004)
  run_phi_ini('nb_on', phi_list, init_list, I0=0.004)
#+end_src

#+RESULTS:
: File moved successfully!
: File moved successfully!

**** analysis
#+begin_src ipython
  phi_list = np.linspace(0, 315, 8)
  init_list = np.arange(1, 11, 1)
#+end_src

#+RESULTS:

#+begin_src ipython
  rates_off = get_rates('nb_off', phi_list, init_list)
  m0_off, m1_off, phases_off = decode_bump(rates_off, axis=2)
  print('phases off', phases_off.shape)

  rates_on = get_rates('nb_on', phi_list, init_list)
  m0_on, m1_on, phases_on = decode_bump(rates_on, axis=2)
  print('phases on', phases_on.shape)

#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
  [0;31m---------------------------------------------------------------------------[0m
  [0;31mFileNotFoundError[0m                         Traceback (most recent call last)
  Cell [0;32mIn[28], line 1[0m
  [0;32m----> 1[0m rates_off [38;5;241m=[39m [43mget_rates[49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43mnb_off[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43mphi_list[49m[43m,[49m[43m [49m[43minit_list[49m[43m)[49m
  [1;32m      2[0m m0_off, m1_off, phases_off [38;5;241m=[39m decode_bump(rates_off, axis[38;5;241m=[39m[38;5;241m2[39m)
  [1;32m      3[0m [38;5;28mprint[39m([38;5;124m'[39m[38;5;124mphases off[39m[38;5;124m'[39m, phases_off[38;5;241m.[39mshape)

  Cell [0;32mIn[26], line 14[0m, in [0;36mget_rates[0;34m(dir, phi_list, init_list)[0m
  [1;32m     11[0m session [38;5;241m=[39m [38;5;124m"[39m[38;5;124m/[39m[38;5;132;01m%s[39;00m[38;5;124m_phi_[39m[38;5;132;01m%d[39;00m[38;5;124m_init_[39m[38;5;132;01m%d[39;00m[38;5;124m/[39m[38;5;124m"[39m [38;5;241m%[39m ([38;5;28mdir[39m, phi, init)
  [1;32m     13[0m [38;5;66;03m# try:[39;00m
  [0;32m---> 14[0m rate [38;5;241m=[39m [43mget_data[49m[43m([49m[43msession[49m[43m)[49m
  [1;32m     15[0m rate_ini[38;5;241m.[39mappend(rate[:[38;5;241m30000[39m])
  [1;32m     16[0m [38;5;66;03m# except:[39;00m
  [1;32m     17[0m [38;5;66;03m#     pass[39;00m

  Cell [0;32mIn[22], line 3[0m, in [0;36mget_data[0;34m(session)[0m
  [1;32m      1[0m [38;5;28;01mdef[39;00m [38;5;21mget_data[39m(session[38;5;241m=[39m[38;5;124m'[39m[38;5;124m/[39m[38;5;124m'[39m):
  [1;32m      2[0m   [38;5;66;03m# Open the file in binary mode and read the data[39;00m
  [0;32m----> 3[0m   [38;5;28;01mwith[39;00m [38;5;28;43mopen[39;49m[43m([49m[38;5;124;43m'[39;49m[38;5;124;43m../data/simul[39;49m[38;5;124;43m'[39;49m[38;5;241;43m+[39;49m[43m [49m[43msession[49m[43m [49m[38;5;241;43m+[39;49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mrates.txt[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mrb[39;49m[38;5;124;43m'[39;49m[43m)[49m [38;5;28;01mas[39;00m f:
  [1;32m      4[0m     data [38;5;241m=[39m np[38;5;241m.[39mfromfile(f, dtype[38;5;241m=[39mnp[38;5;241m.[39mfloat32)
  [1;32m      6[0m   [38;5;66;03m# Now 'data' is a numpy array containing your data[39;00m

  File [0;32m~/mambaforge/envs/dual_data/lib/python3.8/site-packages/IPython/core/interactiveshell.py:284[0m, in [0;36m_modified_open[0;34m(file, *args, **kwargs)[0m
  [1;32m    277[0m [38;5;28;01mif[39;00m file [38;5;129;01min[39;00m {[38;5;241m0[39m, [38;5;241m1[39m, [38;5;241m2[39m}:
  [1;32m    278[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
  [1;32m    279[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mIPython won[39m[38;5;124m'[39m[38;5;124mt let you open fd=[39m[38;5;132;01m{[39;00mfile[38;5;132;01m}[39;00m[38;5;124m by default [39m[38;5;124m"[39m
  [1;32m    280[0m         [38;5;124m"[39m[38;5;124mas it is likely to crash IPython. If you know what you are doing, [39m[38;5;124m"[39m
  [1;32m    281[0m         [38;5;124m"[39m[38;5;124myou can use builtins[39m[38;5;124m'[39m[38;5;124m open.[39m[38;5;124m"[39m
  [1;32m    282[0m     )
  [0;32m--> 284[0m [38;5;28;01mreturn[39;00m [43mio_open[49m[43m([49m[43mfile[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

  [0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: '../data/simul/nb_off_phi_0_init_1/rates.txt'
#+end_example
:END:

****** m1
#+begin_src ipython
  times = np.linspace(0, 10, m1_off.shape[-1])
  plt.plot(times, np.mean(np.mean(m1_off, 1),0))
  plt.plot(times, np.mean(np.mean(m1_on, 1),0))

#+end_src

#+RESULTS:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7fea32fe0d90> |
[[file:./.ob-jupyter/5b91173bfe8b19963a04288ec49fe6019491843b.png]]
:END:

#+begin_src ipython

  smooth_off = circcvl(rates_off[..., -1], windowSize=3000, axis=2)
  smooth_on = circcvl(rates_on[..., -1], windowSize=3000, axis=2)

  theta = np.linspace(0, 360, rates_off.shape[2])

  plt.plot(theta, np.mean(smooth_off[4], axis=0))
  plt.plot(theta, np.mean(smooth_on[4], axis=0))
  
  plt.xlabel('Prefered Location (°)')
  plt.ylabel('Rate (Hz)')
  plt.yticks([0, 5])
  plt.xticks([0, 90, 180, 270, 360]);

#+end_src

#+RESULTS:
[[file:./.ob-jupyter/96b034b88f81215e06b6c8f55db6af6dd9d1e9f8.png]]

****** phase vs time
#+begin_src ipython
  phases = np.vstack(phases_on).T
  print(phases.shape)
  
  times = get_times()

  plt.plot(phases * 180 / np.pi, alpha=0.25)
  plt.xlabel('Time (s)')
  plt.ylabel('$\phi$')
  plt.yticks([0, 90, 180, 270, 360])
  plt.show()
#+end_src

#+RESULTS:
:RESULTS:
: (23, 320)
[[file:./.ob-jupyter/7500f73ff881375f47ef8fe83cdc34c9caf8ab9d.png]]
:END:

****** phase hist

#+begin_src ipython
  from scipy.stats import circmean

  cmean = circmean(phases_off, axis=1) # over initial conditions
  dtheta_off = np.vstack(phases_off - cmean[:,np.newaxis,:]).T * 180 / np.pi

  cmean = circmean(phases_on, axis=1)
  dtheta_on = np.vstack(phases_on - cmean[:,np.newaxis,:]).T * 180 / np.pi

  plt.hist(dtheta_off[-1], bins='auto', histtype='step', label='Off', density=True)
  plt.hist(dtheta_on[-1], bins='auto', histtype='step', label='On', density=True)
  plt.legend(fontsize=10)
  plt.xlim([-10, 10])
  plt.xlabel('$\delta \phi$')
  plt.ylabel('Density')
  plt.show()
#+end_src

#+RESULTS:
[[file:./.ob-jupyter/df0389bc41b132ea493a86724ccec80cf3df522e.png]]

#+begin_src ipython

#+end_src

#+RESULTS:
